/* AUTOGENERATED CODE BELOW */
function notImplemented(fnName) {
    console.log("Not yet implemented: " + fnName);
}
// Type: Core
/**
 * @param message
 * @return any
 */
export function ask() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("ask");
    return null;
}
/**
 * @param characterExpression
 * @param encoding
 * @return number
 */
export function byteCount() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("byteCount");
    return null;
}
/**
 * @param array
 * @return any
 */
export function cols() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cols");
    return null;
}
/**
 * @param str
 * @param key
 * @return any
 */
export function decrypt64() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("decrypt64");
    return null;
}
/**
 * @return number
 */
export function dFRClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRClose");
    return null;
}
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
export function dFRGDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGDate");
    return null;
}
/**
 * @param value
 * @return number
 */
export function dFRGNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGNum");
    return null;
}
/**
 * @param value
 * @param length
 * @return number
 */
export function dFRGTxt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGTxt");
    return null;
}
/**
 * @return number
 */
export function dFRNext() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRNext");
    return null;
}
/**
 * @param fileName
 * @param regLength
 * @param fieldDelimiter
 * @param strDelimiter
 * @param encoding
 * @return number
 */
export function dFROpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFROpen");
    return null;
}
/**
 * @return number
 */
export function dFWClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWClose");
    return null;
}
/**
 * @return number
 */
export function dFWNext() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWNext");
    return null;
}
/**
 * @param fileName
 * @param fieldDelimiter
 * @param strDelimiter
 * @param append
 * @param encoding
 * @return number
 */
export function dFWOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWOpen");
    return null;
}
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
export function dFWPDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPDate");
    return null;
}
/**
 * @param value
 * @param decimals
 * @return number
 */
export function dFWPNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPNum");
    return null;
}
/**
 * @param value
 * @param length
 * @return number
 */
export function dFWPTxt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPTxt");
    return null;
}
/**
 * @param str
 * @param key
 * @return any
 */
export function encrypt64() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("encrypt64");
    return null;
}
/**
 * @param attribute
 * @return number
 */
export function exists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("exists");
    return null;
}
/**
 * @param fileName
 * @return number
 */
export function fileExist() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileExist");
    return null;
}
/**
 * @param name
 * @return any
 */
export function getDataStore() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDataStore");
    return null;
}
/**
 * @return any
 */
export function getEncryptionKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getEncryptionKey");
    return null;
}
/**
 * @param name
 * @return any
 */
export function getLocation() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLocation");
    return null;
}
/**
 * @return number
 */
export function getSOAPErr() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getSOAPErr");
    return null;
}
/**
 * @return any
 */
export function getSOAPErrMsg() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getSOAPErrMsg");
    return null;
}
/**
 * @return any
 */
export function getTheme() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getTheme");
    return null;
}
/**
 * @param value
 * @param line
 * @param lineLenght
 * @return any
 */
export function gXGetMLi() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("gXGetMLi");
    return null;
}
/**
 * @param value
 * @param lineLength
 * @return number
 */
export function gXMLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("gXMLines");
    return null;
}
/**
 * @param hTMLString
 * @return any
 */
export function hTMLClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hTMLClean");
    return null;
}
/**
 * @param urlString
 * @return any
 */
export function urlEncode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("urlEncode");
    return null;
}
/**
 * @param objectURL
 * @param parameter
 * @return any
 */
export function link() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("link");
    return null;
}
/**
 * @param fileName
 * @return any
 */
export function loadBitmap() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("loadBitmap");
    return null;
}
/**
 * @param document
 * @return number
 */
export function openDocument() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openDocument");
    return null;
}
/**
 * @param blob
 * @return any
 */
export function pathToUrl() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("pathToUrl");
    return null;
}
/**
 * @param document
 * @return number
 */
export function printDocument() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("printDocument");
    return null;
}
/**
 * @return number
 */
export function random() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("random");
    return null;
}
/**
 * @param path
 * @return any
 */
export function readRegKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readRegKey");
    return null;
}
/**
 * @return any
 */
export function remoteAddr() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remoteAddr");
    return null;
}
/**
 * @return any
 */
export function returnOnClick() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("returnOnClick");
    return null;
}
/**
 * @param red
 * @param green
 * @param blue
 * @return any
 */
export function rGB() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rGB");
    return null;
}
/**
 * @param array
 * @return any
 */
export function rows() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rows");
    return null;
}
/**
 * @param seed
 * @return number
 */
export function rSeed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rSeed");
    return null;
}
/**
 * @return Date
 */
export function serverDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverDate");
    return null;
}
/**
 * @return any
 */
export function serverNow() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverNow");
    return null;
}
/**
 * @return any
 */
export function serverTime() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverTime");
    return null;
}
/**
 * @param str
 * @return number
 */
export function setTheme() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setTheme");
    return null;
}
/**
 * @param userId
 * @return number
 */
export function setUserId() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setUserId");
    return null;
}
/**
 * @param workstation
 * @return number
 */
export function setWrkSt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setWrkSt");
    return null;
}
/**
 * @param fileName
 * @param modal
 * @return number
 */
export function shell() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shell");
    return null;
}
/**
 * @param seconds
 * @return number
 */
export function sleep() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sleep");
    return null;
}
/**
 * @return Date
 */
export function sysDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sysDate");
    return null;
}
/**
 * @return any
 */
export function sysTime() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sysTime");
    return null;
}
/**
 * @param name
 * @return any
 */
export function toFormattedString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toFormattedString");
    return null;
}
/**
 * @return any
 */
export function userCls() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("userCls");
    return null;
}
/**
 * @param server
 * @return any
 */
export function userID() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("userID");
    return null;
}
/**
 * @param path
 * @param value
 * @return number
 */
export function writeRegKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeRegKey");
    return null;
}
/**
 * @return any
 */
export function wrkSt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("wrkSt");
    return null;
}
/**
 * @param param1
 * @param param2
 * @param param3
 * @return any
 */
export function xToD() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("xToD");
    return null;
}
/**
 * @param attribute
 * @param condition
 * @param defaultValue
 * @return any
 */
export function set() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("set");
    return null;
}
/**
 * @return any
 */
export function confirmed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("confirmed");
    return null;
}
/**
 * @param name
 * @return any
 */
export function cursor() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cursor");
    return null;
}
/**
 * @param fileName
 * @return any
 */
export function deleteFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("deleteFile");
    return null;
}
/**
 * @param propertyName
 * @param propertyValue
 * @return any
 */
export function setEnvProperty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setEnvProperty");
    return null;
}
/**
 * @param subroutineName
 * @return any
 */
export function errorhandler() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("errorhandler");
    return null;
}
/**
 * @param fileName
 * @param type
 * @return any
 */
export function outputfile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("outputfile");
    return null;
}
/**
 * @param attribute
 * @return any
 */
export function order() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("order");
    return null;
}
/**
 * @param attribute
 * @return number
 */
export function level() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("level");
    return null;
}
/**
 * @return boolean
 */
export function modified() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("modified");
    return null;
}
/**
 * @param name
 * @return any
 */
export function old() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("old");
    return null;
}
/**
 * @param name
 * @return any
 */
export function previous() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("previous");
    return null;
}
/**
 * @param name
 * @param level
 * @return any
 */
export function accept() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("accept");
    return null;
}
/**
 * @param value
 * @param attribute
 * @return any
 */
export function add() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("add");
    return null;
}
/**
 * @param attribute
 * @return any
 */
export function allowNulls() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("allowNulls");
    return null;
}
/**
 * @param action
 * @param level
 * @return any
 */
export function defaultmode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("defaultmode");
    return null;
}
/**
 * @param name
 * @param value
 * @return any
 */
export function equal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("equal");
    return null;
}
/**
 * @param message
 * @param exceptionName
 * @return any
 */
export function error() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("error");
    return null;
}
/**
 * @param message
 * @param attribute
 * @return any
 */
export function refMsg() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("refMsg");
    return null;
}
/**
 * @param userProgram
 * @param submitParms
 * @param parameter
 * @return any
 */
export function submit() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("submit");
    return null;
}
/**
 * @param value
 * @param attribute
 * @return any
 */
export function subtract() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("subtract");
    return null;
}
/**
 * @param attribute
 * @return any
 */
export function update() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("update");
    return null;
}
/**
 * @param linesCount
 * @return any
 */
export function workfilelines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("workfilelines");
    return null;
}
/**
 * @param expressionToEvaluate
 * @param variablesList
 * @param resultError
 * @param errorMessage
 * @return any
 */
export function calculate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("calculate");
    return null;
}
/**
 * @param condition
 * @return any
 */
export function search() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("search");
    return null;
}
// end Type
// Type: Numeric
// end Type
// Type: Character
/**
 * @return any
 */
export function cHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cHtmlClean");
    return null;
}
// end Type
// Type: Date
// end Type
// Type: Image
// end Type
// Type: LongVarchar
/**
 * @return any
 */
export function lHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("lHtmlClean");
    return null;
}
// end Type
// Type: DateTime
/**
 * @param pYear
 * @param pMonth
 * @param pDay
 * @param pHour
 * @param pMin
 * @param pSec
 * @return any
 */
export function dtSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dtSet");
    return null;
}
// end Type
// Type: Varchar
/**
 * @return any
 */
export function vHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("vHtmlClean");
    return null;
}
// end Type
// Type: Binary
/**
 * @return any
 */
export function toBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toBase64String");
    return null;
}
/**
 * @param content
 * @return any
 */
export function binaryFromBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("binaryFromBase64String");
    return null;
}
// end Type
// Type: Boolean
// end Type
// Type: HttpClient
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
export function addAuthentication() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addAuthentication");
    return null;
}
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
export function addProxyAuthentication() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addProxyAuthentication");
    return null;
}
/**
 * @param fileName
 * @param name
 * @return any
 */
export function httpClientAddFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddFile");
    return null;
}
/**
 * @param name
 * @param value
 * @return any
 */
export function httpClientAddHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddHeader");
    return null;
}
/**
 * @param value
 * @return any
 */
export function httpClientAddString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddString");
    return null;
}
/**
 * @param name
 * @param value
 * @return any
 */
export function addVariable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addVariable");
    return null;
}
/**
 * @param method
 * @param url
 * @return any
 */
export function execute() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("execute");
    return null;
}
/**
 * @param name
 * @return any
 */
export function httpClientGetHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientGetHeader");
    return null;
}
/**
 * @param name
 * @return any
 */
export function httpClientToFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientToFile");
    return null;
}
/**
 * @return any
 */
export function httpClientToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientToString");
    return null;
}
// end Type
// Type: HttpResponse
/**
 * @param name
 * @param value
 * @return any
 */
export function addHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addHeader");
    return null;
}
/**
 * @param value
 * @return any
 */
export function addString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addString");
    return null;
}
/**
 * @param name
 * @return any
 */
export function addFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addFile");
    return null;
}
/**
 * @param cookie
 * @return number
 */
export function httpResponseSetCookie() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpResponseSetCookie");
    return null;
}
// end Type
// Type: HttpRequest
/**
 * @return any
 */
export function httpRequestToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpRequestToString");
    return null;
}
/**
 * @param name
 * @return any
 */
export function toFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toFile");
    return null;
}
/**
 * @param name
 * @return any
 */
export function getHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getHeader");
    return null;
}
/**
 * @param name
 * @return any
 */
export function getVariable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getVariable");
    return null;
}
// end Type
// Type: StringCollection
/**
 * @return any
 */
export function strCollectionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionClear");
    return null;
}
/**
 * @param element
 * @return any
 */
export function strCollectionAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionAdd");
    return null;
}
/**
 * @param index
 * @return any
 */
export function strCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionItem");
    return null;
}
// end Type
// Type: WebSession
/**
 * @return any
 */
export function websessionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionClear");
    return null;
}
/**
 * @return any
 */
export function destroy() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("destroy");
    return null;
}
/**
 * @param key
 * @return any
 */
export function websessionGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionGet");
    return null;
}
/**
 * @param key
 * @return any
 */
export function websessionRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionRemove");
    return null;
}
/**
 * @param key
 * @param value
 * @return any
 */
export function websessionSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionSet");
    return null;
}
// end Type
// Type: WebWrapper
/**
 * @return any
 */
export function getResponse() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getResponse");
    return null;
}
// end Type
// Type: Variant
// end Type
// Type: Location
// end Type
// Type: RegExMatch
// end Type
// Type: RegExMatchCollection
// end Type
// Type: ContentInfo
// end Type
// Type: Blob
// end Type
// Type: SearchResult
/**
 * @return any
 */
export function items() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("items");
    return null;
}
// end Type
// Type: SearchResultCollection
/**
 * @param index
 * @return any
 */
export function searchResultCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("searchResultCollectionItem");
    return null;
}
// end Type
// Type: SearchResultItem
// end Type
// Type: Collection
/**
 * @param item
 * @param index
 * @return any
 */
export function collectionAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionAdd");
    return null;
}
/**
 * @return any
 */
export function collectionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionClear");
    return null;
}
/**
 * @param index
 * @return any
 */
export function collectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionItem");
    return null;
}
/**
 * @param index
 * @return any
 */
export function collectionRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionRemove");
    return null;
}
/**
 * @param item
 * @return number
 */
export function indexOf() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("indexOf");
    return null;
}
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export function collectionToXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionToXml");
    return null;
}
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
export function collectionFromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromXml");
    return null;
}
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
export function collectionFromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromXmlFile");
    return null;
}
/**
 * @param includeState
 * @return any
 */
export function collectionToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionToJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function collectionFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function collectionFromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromJsonFile");
    return null;
}
/**
 * @return any
 */
export function collectionClone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionClone");
    return null;
}
/**
 * @param columnListString
 * @return any
 */
export function sort() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sort");
    return null;
}
// end Type
// Type: BusinessComponentCollection
/**
 * @param primaryKeyAtt
 * @return any
 */
export function bcCollectionGetByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionGetByKey");
    return null;
}
/**
 * @param primaryKeyAtt
 * @return boolean
 */
export function bcCollectionRemoveByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionRemoveByKey");
    return null;
}
/**
 * @return boolean
 */
export function bcCollectionUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionUpdate");
    return null;
}
/**
 * @return boolean
 */
export function bcCollectionInsert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionInsert");
    return null;
}
/**
 * @return boolean
 */
export function bcCollectionInsertOrUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionInsertOrUpdate");
    return null;
}
/**
 * @return boolean
 */
export function bcCollectionDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionDelete");
    return null;
}
// end Type
// Type: BusinessComponentLinesCollection
/**
 * @param primaryKeyAtt
 * @return any
 */
export function getByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getByKey");
    return null;
}
/**
 * @param primaryKeyAtt
 * @return boolean
 */
export function removeByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeByKey");
    return null;
}
// end Type
// Type: HTMLBODY
// end Type
// Type: File
/**
 * @return any
 */
export function fileDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileDelete");
    return null;
}
/**
 * @return boolean
 */
export function fileExists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileExists");
    return null;
}
/**
 * @param name
 * @return any
 */
export function fileRename() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileRename");
    return null;
}
/**
 * @param name
 * @return any
 */
export function copy() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("copy");
    return null;
}
/**
 * @return any
 */
export function fileGetName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileGetName");
    return null;
}
/**
 * @return any
 */
export function fileGetAbsoluteName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileGetAbsoluteName");
    return null;
}
/**
 * @return any
 */
export function getURI() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getURI");
    return null;
}
/**
 * @return number
 */
export function getLength() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLength");
    return null;
}
/**
 * @return Date
 */
export function getLastModified() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastModified");
    return null;
}
/**
 * @return any
 */
export function getPath() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPath");
    return null;
}
/**
 * @param encoding
 * @return any
 */
export function fileOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileOpen");
    return null;
}
/**
 * @param encoding
 * @return any
 */
export function openWrite() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openWrite");
    return null;
}
/**
 * @param encoding
 * @return any
 */
export function openRead() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openRead");
    return null;
}
/**
 * @return any
 */
export function fileClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileClose");
    return null;
}
/**
 * @return any
 */
export function readLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readLine");
    return null;
}
/**
 * @param encoding
 * @return any
 */
export function readAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readAllText");
    return null;
}
/**
 * @param encoding
 * @return any
 */
export function readAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readAllLines");
    return null;
}
/**
 * @param value
 * @return any
 */
export function writeLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeLine");
    return null;
}
/**
 * @param value
 * @param encoding
 * @return any
 */
export function writeAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeAllText");
    return null;
}
/**
 * @param value
 * @param encoding
 * @return any
 */
export function writeAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeAllLines");
    return null;
}
/**
 * @param value
 * @param encoding
 * @return any
 */
export function appendAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("appendAllText");
    return null;
}
/**
 * @param vale
 * @param encoding
 * @return any
 */
export function appendAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("appendAllLines");
    return null;
}
/**
 * @return any
 */
export function fileCreate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileCreate");
    return null;
}
/**
 * @param xSLTFile
 * @return any
 */
export function xSLTApply() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("xSLTApply");
    return null;
}
/**
 * @return any
 */
export function fileHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileHtmlClean");
    return null;
}
/**
 * @param base64String
 * @return boolean
 */
export function fromBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromBase64String");
    return null;
}
// end Type
// Type: FileCollection
/**
 * @param i
 * @return any
 */
export function fileCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileCollectionItem");
    return null;
}
// end Type
// Type: Directory
/**
 * @return any
 */
export function create() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("create");
    return null;
}
/**
 * @return any
 */
export function dirDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dirDelete");
    return null;
}
/**
 * @return boolean
 */
export function dirExists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dirExists");
    return null;
}
/**
 * @param name
 * @return any
 */
export function rename() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rename");
    return null;
}
/**
 * @return any
 */
export function getName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getName");
    return null;
}
/**
 * @return any
 */
export function getAbsoluteName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getAbsoluteName");
    return null;
}
/**
 * @param filter
 * @return any
 */
export function getFiles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getFiles");
    return null;
}
/**
 * @return any
 */
export function getDirectories() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDirectories");
    return null;
}
// end Type
// Type: DirectoryCollection
/**
 * @param i
 * @return any
 */
export function item() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("item");
    return null;
}
// end Type
// Type: Properties
/**
 * @param attributeName
 * @param attributeValue
 * @return any
 */
export function propSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propSet");
    return null;
}
/**
 * @param attributeName
 * @return any
 */
export function propGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propGet");
    return null;
}
/**
 * @param attributeName
 * @return any
 */
export function propRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propRemove");
    return null;
}
/**
 * @return any
 */
export function propClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propClear");
    return null;
}
/**
 * @return any
 */
export function propToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propToJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function propFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propFromJson");
    return null;
}
// end Type
// Type: Property
// end Type
// Type: Expression
/**
 * @return number
 */
export function evaluate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("evaluate");
    return null;
}
// end Type
// Type: RegEx
/**
 * @return number
 */
export function getLastErrCode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastErrCode");
    return null;
}
/**
 * @return any
 */
export function getLastErrDescription() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastErrDescription");
    return null;
}
// end Type
// Type: TextSearch
/**
 * @param content
 * @param itemsPerPage
 * @param pageNumber
 * @return any
 */
export function textSearchfind() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchfind");
    return null;
}
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
export function textSearchadd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchadd");
    return null;
}
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
export function textSearchupdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchupdate");
    return null;
}
/**
 * @param variable
 * @return boolean
 */
export function textSearchdelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchdelete");
    return null;
}
/**
 * @return boolean
 */
export function buildDictionary() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("buildDictionary");
    return null;
}
/**
 * @param text
 * @return any
 */
export function checkSpell() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("checkSpell");
    return null;
}
/**
 * @return number
 */
export function reindexAll() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("reindexAll");
    return null;
}
/**
 * @param variableBCorText
 * @param query
 * @param textType
 * @param preTag
 * @param postTag
 * @param fragmentSize
 * @param maxNumFragments
 * @return any
 */
export function hTMLPreview() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hTMLPreview");
    return null;
}
// end Type
// Type: Window
/**
 * @return any
 */
export function windowOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("windowOpen");
    return null;
}
// end Type
// Type: Video
/**
 * @param videoURL
 * @return any
 */
export function videoFromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("videoFromURL");
    return null;
}
// end Type
// Type: Audio
/**
 * @param videoURL
 * @return any
 */
export function fromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromURL");
    return null;
}
// end Type
// Type: BinaryFile
/**
 * @param fileURL
 * @return any
 */
export function binaryFileFromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("binaryFileFromURL");
    return null;
}
// end Type
// Type: CallOptions
// end Type
// Type: CryptoHash
/**
 * @param text
 * @param key
 * @return any
 */
export function compute() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("compute");
    return null;
}
// end Type
// Type: Geography
/**
 * @return any
 */
export function geographyToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToString");
    return null;
}
/**
 * @return any
 */
export function geographyToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToGeoJson");
    return null;
}
/**
 * @return any
 */
export function geographyToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToWkt");
    return null;
}
/**
 * @return any
 */
export function toGeoPoint() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoPoint");
    return null;
}
/**
 * @return any
 */
export function toGeoLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoLine");
    return null;
}
/**
 * @return any
 */
export function toGeoPolygon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoPolygon");
    return null;
}
/**
 * @return boolean
 */
export function geographyIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsNull");
    return null;
}
/**
 * @return any
 */
export function geographySetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographySetNull");
    return null;
}
/**
 * @return boolean
 */
export function geographyIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsEmpty");
    return null;
}
/**
 * @return any
 */
export function geographySetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographySetEmpty");
    return null;
}
/**
 * @return boolean
 */
export function geographyIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsNullOrEmpty");
    return null;
}
// end Type
// Type: GeoPoint
/**
 * @return any
 */
export function geopointToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToGeography");
    return null;
}
/**
 * @return any
 */
export function geopointToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToString");
    return null;
}
/**
 * @return any
 */
export function geopointToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToGeoJson");
    return null;
}
/**
 * @return any
 */
export function toWKT() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toWKT");
    return null;
}
/**
 * @return boolean
 */
export function geopointIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsNull");
    return null;
}
/**
 * @return any
 */
export function geopointSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointSetNull");
    return null;
}
/**
 * @return boolean
 */
export function geopointIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsEmpty");
    return null;
}
/**
 * @return any
 */
export function geopointSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointSetEmpty");
    return null;
}
/**
 * @return boolean
 */
export function geopointIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsNullOrEmpty");
    return null;
}
/**
 * @param latitude
 * @param longitude
 * @return any
 */
export function newGeopoint() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("newGeopoint");
    return null;
}
// end Type
// Type: GeoLine
/**
 * @return any
 */
export function geolineToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToGeography");
    return null;
}
/**
 * @return any
 */
export function geolineToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToString");
    return null;
}
/**
 * @return any
 */
export function geolineToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToGeoJson");
    return null;
}
/**
 * @return any
 */
export function geolineToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToWkt");
    return null;
}
/**
 * @return boolean
 */
export function geolineIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsNull");
    return null;
}
/**
 * @return any
 */
export function geolineSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineSetNull");
    return null;
}
/**
 * @return boolean
 */
export function geolineIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsEmpty");
    return null;
}
/**
 * @return any
 */
export function geolineSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineSetEmpty");
    return null;
}
/**
 * @return boolean
 */
export function geolineIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsNullOrEmpty");
    return null;
}
// end Type
// Type: GeoPolygon
/**
 * @return any
 */
export function geopolygonToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToGeography");
    return null;
}
/**
 * @return any
 */
export function geopolygonToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToString");
    return null;
}
/**
 * @return any
 */
export function geopolygonToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToGeoJson");
    return null;
}
/**
 * @return any
 */
export function geopolygonToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToWkt");
    return null;
}
/**
 * @return boolean
 */
export function geopolygonIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsNull");
    return null;
}
/**
 * @return any
 */
export function geopolygonSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonSetNull");
    return null;
}
/**
 * @return boolean
 */
export function geopolygonIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsEmpty");
    return null;
}
/**
 * @return any
 */
export function geopolygonSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonSetEmpty");
    return null;
}
/**
 * @return boolean
 */
export function geopolygonIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsNullOrEmpty");
    return null;
}
// end Type
// Type: WSAddressing
// end Type
// Type: WSAddressingEndPoint
// end Type
// Type: WSSecurity
// end Type
// Type: WSSignature
// end Type
// Type: WSEncryption
// end Type
// Type: WSSecurityKeyStore
// end Type
// Type: Cache
/**
 * @param name
 * @return any
 */
export function getCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getCache");
    return null;
}
/**
 * @return any
 */
export function clearAllCaches() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearAllCaches");
    return null;
}
/**
 * @param key
 * @param value
 * @param durationMinutes
 * @return any
 */
export function cacheSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cacheSet");
    return null;
}
/**
 * @param key
 * @return any
 */
export function cacheGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cacheGet");
    return null;
}
/**
 * @param key
 * @return boolean
 */
export function contains() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("contains");
    return null;
}
/**
 * @param key
 * @return any
 */
export function remove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remove");
    return null;
}
/**
 * @return any
 */
export function clear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clear");
    return null;
}
// end Type
// Type: StorageProvider
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param expirationMinutes
 * @param outMessages
 * @return boolean
 */
export function getPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPrivate");
    return null;
}
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
export function uploadPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("uploadPrivate");
    return null;
}
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param outMessages
 * @return boolean
 */
export function get() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("get");
    return null;
}
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
export function upload() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("upload");
    return null;
}
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
export function download() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("download");
    return null;
}
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
export function downloadPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("downloadPrivate");
    return null;
}
/**
 * @param storageDirectoryFullName
 * @param outExternalDirectory
 * @param outMessages
 * @return boolean
 */
export function getDirectory() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDirectory");
    return null;
}
// end Type
// Type: ArrayPEM
// end Type
// Type: BusinessComponentLevel
// end Type
// Type: BusinessComponent
/**
 * @return any
 */
export function check() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("check");
    return null;
}
/**
 * @return any
 */
export function bcDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcDelete");
    return null;
}
/**
 * @param primaryKeyAtt
 * @return any
 */
export function load() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("load");
    return null;
}
/**
 * @return any
 */
export function mode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("mode");
    return null;
}
/**
 * @return any
 */
export function bcSave() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcSave");
    return null;
}
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export function bcToXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcToXml");
    return null;
}
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
export function bcFromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromXml");
    return null;
}
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
export function bcFromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromXmlFile");
    return null;
}
/**
 * @param includeState
 * @return any
 */
export function bcToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcToJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function bcFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function bcFromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromJsonFile");
    return null;
}
/**
 * @return boolean
 */
export function bcUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcUpdate");
    return null;
}
/**
 * @return boolean
 */
export function insert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("insert");
    return null;
}
/**
 * @return boolean
 */
export function insertOrUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("insertOrUpdate");
    return null;
}
/**
 * @return boolean
 */
export function success() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("success");
    return null;
}
/**
 * @return boolean
 */
export function fail() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fail");
    return null;
}
/**
 * @return any
 */
export function getMessages() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getMessages");
    return null;
}
/**
 * @return any
 */
export function bcClone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcClone");
    return null;
}
/**
 * @param name
 * @return any
 */
export function createBC() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createBC");
    return null;
}
/**
 * @param name
 * @return any
 */
export function createCollection() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createCollection");
    return null;
}
/**
 * @param name
 * @return any
 */
export function bcGetValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcGetValue");
    return null;
}
/**
 * @param name
 * @param value
 * @return any
 */
export function setValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setValue");
    return null;
}
/**
 * @return any
 */
export function getMetadata() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getMetadata");
    return null;
}
// end Type
// Type: SDT
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export function toXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toXml");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function fromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromXml");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function fromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromXmlFile");
    return null;
}
/**
 * @return any
 */
export function clone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clone");
    return null;
}
/**
 * @param includeState
 * @return any
 */
export function toJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function fromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromJson");
    return null;
}
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export function fromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromJsonFile");
    return null;
}
/**
 * @return boolean
 */
export function sdtIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sdtIsNull");
    return null;
}
/**
 * @return any
 */
export function setNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setNull");
    return null;
}
// end Type
// Type: SDTItem
/**
 * @return any
 */
export function sdtItemToFormattedString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sdtItemToFormattedString");
    return null;
}
// end Type
// Type: Iterator
/**
 * @return any
 */
export function first() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("first");
    return null;
}
/**
 * @return any
 */
export function next() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("next");
    return null;
}
/**
 * @return boolean
 */
export function eof() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("eof");
    return null;
}
// end Type
// Type: 
// end Type
// Type: Void
// end Type
// Type: Timezones
// end Type
// Type: Short
// end Type
// Type: Object
// end Type
// Type: Messages
// end Type
// Type: Int
// end Type
// Type: GxControlFrame
// end Type
// Type: CallEffect
// end Type
// Type: CallType
// end Type
// Type: TargetSize
// end Type
// Type: DipOrPercentage
// end Type
// Type: GeneXusCommonUIProgress
/**
 * @return any
 */
export function show() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("show");
    return null;
}
/**
 * @param title
 * @return any
 */
export function showWithTitle() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("showWithTitle");
    return null;
}
/**
 * @param title
 * @param description
 * @return any
 */
export function showWithTitleAndDescription() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("showWithTitleAndDescription");
    return null;
}
/**
 * @return any
 */
export function hide() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hide");
    return null;
}
// end Type
// Type: GeneXusCommonUINavigation
// end Type
// Type: GeneXusCommonConfigurationConfigurationManager
/**
 * @param propName
 * @param fileName
 * @return any
 */
export function getValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getValue");
    return null;
}
/**
 * @param propName
 * @param fileName
 * @return boolean
 */
export function hasValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hasValue");
    return null;
}
// end Type
// Type: GeneXusCommonClipboard
/**
 * @param data
 * @return any
 */
export function setText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setText");
    return null;
}
/**
 * @return any
 */
export function getText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getText");
    return null;
}
// end Type
// Type: GeneXusCommonAnalytics
/**
 * @param viewName
 * @return any
 */
export function trackView() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackView");
    return null;
}
/**
 * @param category
 * @param action
 * @param label
 * @param value
 * @return any
 */
export function trackEvent() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackEvent");
    return null;
}
/**
 * @param purchaseInfo
 * @return any
 */
export function trackPurchase() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackPurchase");
    return null;
}
/**
 * @param userId
 * @return any
 */
export function setAnalyticsUserId() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setAnalyticsUserId");
    return null;
}
// end Type
var GeneXusCommonGeolocation = /** @class */ (function () {
    function GeneXusCommonGeolocation() {
    }
    /**
     * Indicates wether the application has been given permission to use location services
     * @return boolean
     */
    GeneXusCommonGeolocation.authorized = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("authorized");
        return null;
    };
    /**
     * Indicates wether location services are enable in the device
     * @return boolean
     */
    GeneXusCommonGeolocation.serviceEnabled = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("serviceEnabled");
        return null;
    };
    /**
     * Starts generating tracking information
     * @param changesInterval
     * @param distance
     * @param action
     * @param actionTimeInterval
     * @param accuracy
     * @return any
     */
    GeneXusCommonGeolocation.startTracking = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("startTracking");
        return null;
    };
    /**
     * Stops the generation of tracking information
     * @return any
     */
    GeneXusCommonGeolocation.endTracking = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("endTracking");
        return null;
    };
    /**
     * Returns a collection of location information generated by the tracking methods
     * @param startTime
     * @return any
     */
    GeneXusCommonGeolocation.getLocationHistory = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLocationHistory");
        return null;
    };
    /**
     * Removes all previous location information generated by the tracking methods
     * @return any
     */
    GeneXusCommonGeolocation.clearLocationHistory = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("clearLocationHistory");
        return null;
    };
    /**
     * Returns the latitude of the given location
     * @param location
     * @return number
     */
    GeneXusCommonGeolocation.getLatitude = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLatitude");
        return null;
    };
    /**
     * Returns the longitude of the given location
     * @param location
     * @return number
     */
    GeneXusCommonGeolocation.getLongitude = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLongitude");
        return null;
    };
    /**
     * Returns the distance between the two locations given
     * @param fromLocation
     * @param toLocation
     * @return number
     */
    GeneXusCommonGeolocation.getDistance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getDistance");
        return null;
    };
    /**
     * Returns a collection of addresses for the given location
     * @param location
     * @return any
     */
    GeneXusCommonGeolocation.getAddress = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getAddress");
        return null;
    };
    /**
     * @param proximityAlerts
     * @return boolean
     */
    GeneXusCommonGeolocation.setProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("setProximityAlerts");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.getProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getProximityAlerts");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.getCurrentProximityAlert = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getCurrentProximityAlert");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.clearProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("clearProximityAlerts");
        return null;
    };
    /**
     * @param geoLocationPickerParameters
     * @return any
     */
    GeneXusCommonGeolocation.pickLocation = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("pickLocation");
        return null;
    };
    Object.defineProperty(GeneXusCommonGeolocation, "authorizationStatus", {
        get: function () {
            return this.mauthorizationStatus;
        },
        enumerable: false,
        configurable: true
    });
    return GeneXusCommonGeolocation;
}());
export { GeneXusCommonGeolocation };
// Type: GeneXusCommonServer
/**
 * @return any
 */
export function invalidateCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("invalidateCache");
    return null;
}
// end Type
// Type: GeneXusCommonRuntime
// end Type
// Type: GeneXusCommonMaps
/**
 * @param sourceLocation
 * @param destinationLocation
 * @param transportType
 * @param requestAlternateRoutes
 * @return any
 */
export function calculateDirections() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("calculateDirections");
    return null;
}
// end Type
var GeneXusClientClientInformation = /** @class */ (function () {
    function GeneXusClientClientInformation() {
    }
    return GeneXusClientClientInformation;
}());
export { GeneXusClientClientInformation };
// Type: GeneXusClientClientStorage
/**
 * @param key
 * @param value
 * @return any
 */
export function secureSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("secureSet");
    return null;
}
// end Type
// Type: GeneXusSocialFacebook
/**
 * @param name
 * @param caption
 * @param description
 * @param link
 * @param picture
 * @return any
 */
export function postToWall() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("postToWall");
    return null;
}
/**
 * @param link
 * @return any
 */
export function shareLink() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareLink");
    return null;
}
/**
 * @param image
 * @return any
 */
export function fbShareImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fbShareImage");
    return null;
}
/**
 * @param video
 * @return any
 */
export function shareVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareVideo");
    return null;
}
// end Type
// Type: GeneXusSocialTwitter
/**
 * @param text
 * @param image
 * @return any
 */
export function tweet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("tweet");
    return null;
}
/**
 * @param userName
 * @return any
 */
export function follow() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("follow");
    return null;
}
// end Type
// Type: GeneXusSocialShare
/**
 * @param image
 * @param text
 * @param url
 * @param title
 * @return any
 */
export function shareImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareImage");
    return null;
}
// end Type
// Type: GeneXusServerSocket
/**
 * @param sdtNotification
 * @return number
 */
export function notify() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notify");
    return null;
}
/**
 * @param clientId
 * @param sdtNotification
 * @return number
 */
export function notifyClient() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notifyClient");
    return null;
}
/**
 * @param sdtNotification
 * @return any
 */
export function broadcast() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("broadcast");
    return null;
}
/**
 * @param clientId
 * @param message
 * @return number
 */
export function notifyClientText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notifyClientText");
    return null;
}
// end Type
// Type: GeneXusSDSynchronizationSynchronization
// end Type
// Type: GeneXusSDiOSPermissions
/**
 * Requests permission to alert the user. Typically, you make this request if your app uses local or push notifications to alert the user to new information involving your app.
 * @return any
 */
export function requestUserNotificationsPermission() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestUserNotificationsPermission");
    return null;
}
/**
 * Requests permission to use location services while the app is in the foreground.
 * @return any
 */
export function requestLocationPermissionWhenInUse() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestLocationPermissionWhenInUse");
    return null;
}
/**
 * Requests permission to use location services whenever the app is running.
 * @return any
 */
export function requestLocationPermissionAlways() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestLocationPermissionAlways");
    return null;
}
/**
 * Deprecated. Use RequestUserNotificationsPermission instead.
 * @return any
 */
export function requestRemoteNotificationsPermission() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestRemoteNotificationsPermission");
    return null;
}
// end Type
// Type: GeneXusSDStoreStoreManager
/**
 * @param productIdentifiers
 * @return any
 */
export function getProducts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getProducts");
    return null;
}
/**
 * @param productIdentifier
 * @param quantity
 * @return any
 */
export function purchaseProduct() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("purchaseProduct");
    return null;
}
/**
 * @return any
 */
export function getPurchases() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPurchases");
    return null;
}
/**
 * @param productIdentifier
 * @return boolean
 */
export function consumeProduct() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("consumeProduct");
    return null;
}
/**
 * Restore transactions (iOS only)
 * @return any
 */
export function restorePurchases() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("restorePurchases");
    return null;
}
// end Type
// Type: GeneXusSDNotificationsNotificationsConfiguration
// end Type
// Type: GeneXusSDNotificationsRemoteNotificationResult
// end Type
// Type: GeneXusSDNotificationsNotificationParameters
/**
 * @param name
 * @param value
 * @return any
 */
export function setParameter() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setParameter");
    return null;
}
// end Type
// Type: GeneXusSDNotificationsRemoteNotifications
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @return number
 */
export function call() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("call");
    return null;
}
/**
 * @param applicationId
 * @param deviceToken
 * @param badgeNumber
 * @param sound
 * @return number
 */
export function iOSSetBadge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetBadge");
    return null;
}
/**
 * @param applicationId
 * @param deviceToken
 * @return number
 */
export function iOSResetBadge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSResetBadge");
    return null;
}
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @param actionName
 * @param parameters
 * @return any
 */
export function callAction() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("callAction");
    return null;
}
/**
 * @param applicationId
 * @return number
 */
export function openSession() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openSession");
    return null;
}
/**
 * @param remoteNotification
 * @return any
 */
export function remoteNotificationAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remoteNotificationAdd");
    return null;
}
/**
 * @return any
 */
export function send() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("send");
    return null;
}
/**
 * @param applicationId
 * @param configuration
 * @return any
 */
export function setConfiguration() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setConfiguration");
    return null;
}
// end Type
// Type: GeneXusSDNotificationsLocalNotifications
/**
 * @param alerts
 * @return number
 */
export function createAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createAlerts");
    return null;
}
/**
 * @return any
 */
export function listAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("listAlerts");
    return null;
}
/**
 * @param alerts
 * @return number
 */
export function removeAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeAlerts");
    return null;
}
/**
 * @return number
 */
export function removeAllAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeAllAlerts");
    return null;
}
// end Type
// Type: GeneXusSDMediaCamera
// end Type
// Type: GeneXusSDMediaPhotoLibrary
/**
 * @param image
 * @return any
 */
export function savePhoto() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("savePhoto");
    return null;
}
/**
 * @param video
 * @return any
 */
export function saveVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("saveVideo");
    return null;
}
/**
 * @return any
 */
export function chooseImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseImage");
    return null;
}
/**
 * @return any
 */
export function chooseVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseVideo");
    return null;
}
/**
 * @return any
 */
export function chooseImages() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseImages");
    return null;
}
// end Type
// Type: GeneXusSDMediaAudio
/**
 * Plays the given audio with the specified category
 * @param audio
 * @param category
 * @return any
 */
export function play() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("play");
    return null;
}
/**
 * Plays the given audio in background, keeps playing while the application is in background
 * @param audio
 * @param description
 * @return any
 */
export function playBackground() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playBackground");
    return null;
}
/**
 * Stops the audio playing in all categories
 * @param category
 * @return any
 */
export function audioStop() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("audioStop");
    return null;
}
/**
 * Returns whether there is audio playing in any category
 * @param category
 * @return boolean
 */
export function isPlaying() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("isPlaying");
    return null;
}
/**
 * Returns the current audio queue.
 * @return any
 */
export function getQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getQueue");
    return null;
}
/**
 * Returns the state of the current audio queue (including the position in the queue and inside the current playing item, if any).
 * @return any
 */
export function getQueueState() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getQueueState");
    return null;
}
/**
 * Sets the current audio queue. Stops current background playback, if any.
 * @param queue
 * @return any
 */
export function setQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueue");
    return null;
}
/**
 * Starts or resumes playback of the current audio queue.
 * @return any
 */
export function playQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playQueue");
    return null;
}
/**
 * Pauses playback of the current audio queue.
 * @return any
 */
export function pauseQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("pauseQueue");
    return null;
}
/**
 * Sets the current item in the media queue, given its media id.
 * @param mediaId
 * @return any
 */
export function setQueueCurrentItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueueCurrentItem");
    return null;
}
/**
 * Sets the current item in the media queue, given its index.
 * @param index
 * @return any
 */
export function setQueueCurrentIndex() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueueCurrentIndex");
    return null;
}
/**
 * Allows configuring the audio player UI settings
 * @param settings
 * @return any
 */
export function setPlayerSettings() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setPlayerSettings");
    return null;
}
/**
 * @param show
 * @return any
 */
export function iOSSetShowsMiniPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetShowsMiniPlayer");
    return null;
}
/**
 * @return any
 */
export function iOSDisplayFullScreenPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSDisplayFullScreenPlayer");
    return null;
}
/**
 * @return any
 */
export function iOSDismissFullScreenPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSDismissFullScreenPlayer");
    return null;
}
// end Type
// Type: GeneXusSDMediaAudioRecorder
/**
 * Starts a recording session. Returns True if the operation was successful, False otherwise
 * @return boolean
 */
export function start() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("start");
    return null;
}
/**
 * Stops the recording session and returns the URL of the recorder file.
 * @return any
 */
export function stop() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stop");
    return null;
}
// end Type
// Type: GeneXusSDActions
/**
 * Call this action to execute the standard batch login against the OAuth server.
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
export function login() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("login");
    return null;
}
/**
 * Call this action to execute the batch login against the OAuth server for a External login type.
 * @param type
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
export function loginExternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("loginExternal");
    return null;
}
/**
 * Call this action to execute the standard logout against the OAuth server.
 * @return any
 */
export function logout() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("logout");
    return null;
}
/**
 * Returns to the main object of the application, clearing the current call stack.
 * @return any
 */
export function goHome() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("goHome");
    return null;
}
/**
 * Returns to the object specified in the parameter. If it is present more than once in the call stack, it will return to the most recent instance.
 * @param objectName
 * @return any
 */
export function returnTo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("returnTo");
    return null;
}
/**
 * Call this action to execute the standard save in the edit form in the device.
 * @return any
 */
export function save() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("save");
    return null;
}
/**
 * Call this action to execute the standard cancel in the edit form in the device.
 * @return any
 */
export function cancel() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cancel");
    return null;
}
/**
 * Call this action to execute the standard delete in the edit form in the device.
 * @return any
 */
export function deleteAction() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("deleteAction");
    return null;
}
/**
 * Takes an application screenshot for further use like sharing, save in library, etc.
 * @return any
 */
export function takeApplicationScreenshot() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("takeApplicationScreenshot");
    return null;
}
// end Type
// Type: GeneXusSDContacts
/**
 * Adds a contact to the device&#x27;s Address Book
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param companyName
 * @param photo
 * @param message
 * @return boolean
 */
export function addContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addContact");
    return null;
}
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param message
 * @return boolean
 */
export function removeContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeContact");
    return null;
}
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @return any
 */
export function viewContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("viewContact");
    return null;
}
/**
 * Returns a collection of all the contacts in the device&#x27;s Address Book
 * @return any
 */
export function getAllContacts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getAllContacts");
    return null;
}
// end Type
// Type: GeneXusSDCalendar
// end Type
// Type: GeneXusSDInterop
/**
 * @param message
 * @param to
 * @return any
 */
export function sendMessage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendMessage");
    return null;
}
/**
 * @param video
 * @return any
 */
export function playVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playVideo");
    return null;
}
/**
 * @param audio
 * @return any
 */
export function playAudio() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playAudio");
    return null;
}
/**
 * @param to
 * @param cc
 * @param bcc
 * @param subject
 * @param message
 * @return any
 */
export function sendEmailAdvanced() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendEmailAdvanced");
    return null;
}
/**
 * @param to
 * @param message
 * @return any
 */
export function sendSMS() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendSMS");
    return null;
}
/**
 * @return any
 */
export function clearCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearCache");
    return null;
}
/**
 * Deprecated: use Interop.SetBadgeNumber instead
 * @param num
 * @return any
 */
export function iOSSetBadgeNumber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetBadgeNumber");
    return null;
}
/**
 * @param num
 * @return any
 */
export function setBadgeNumber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setBadgeNumber");
    return null;
}
/**
 * @param tabIndex
 * @return any
 */
export function iOSSetSelectedTabIndex() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetSelectedTabIndex");
    return null;
}
// end Type
// Type: GeneXusSDScanner
// end Type
var GeneXusSDNetwork = /** @class */ (function () {
    function GeneXusSDNetwork() {
    }
    /**
     * @param url
     * @return boolean
     */
    GeneXusSDNetwork.isServerAvailable = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("isServerAvailable");
        return null;
    };
    /**
     * @param url
     * @return any
     */
    GeneXusSDNetwork.type = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("type");
        return null;
    };
    /**
     * @param url
     * @return boolean
     */
    GeneXusSDNetwork.trafficBasedCost = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("trafficBasedCost");
        return null;
    };
    /**
     * If the property Dynamic Services URL is set to True, changes the URL at runtime.
     * @param url
     * @return any
     */
    GeneXusSDNetwork.setApplicationServerURL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("setApplicationServerURL");
        return null;
    };
    return GeneXusSDNetwork;
}());
export { GeneXusSDNetwork };
// Type: GeneXusSDBeacons
/**
 * Start monitoring the specified beacon region.
 * @param proximityAlert
 * @return boolean
 */
export function addBeaconProximityAlert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addBeaconProximityAlert");
    return null;
}
/**
 * Start monitoring the specified beacon regions.
 * @param proximityAlerts
 * @return boolean
 */
export function addBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addBeaconProximityAlerts");
    return null;
}
/**
 * Retrieve a collection for the beacon regions that are currently being monitored.
 * @return any
 */
export function getBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconProximityAlerts");
    return null;
}
/**
 * Removes the beacon region being monitored.
 * @param proximityAlertRegionId
 * @return any
 */
export function removeBeaconProximityAlert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeBeaconProximityAlert");
    return null;
}
/**
 * Removes all the beacon regions being monitored.
 * @return any
 */
export function clearBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearBeaconProximityAlerts");
    return null;
}
/**
 * Retrieve the cached state of the specified region.
 * @param regionId
 * @return any
 */
export function getBeaconRegionState() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconRegionState");
    return null;
}
/**
 * Starts the delivery of notifications for beacons in the specified region.
 * @param beaconRegion
 * @return boolean
 */
export function startRangingBeaconRegion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("startRangingBeaconRegion");
    return null;
}
/**
 * Retrieve a collection for the beacon regions that are currently providing ranging.
 * @return any
 */
export function getRangedBeaconRegions() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getRangedBeaconRegions");
    return null;
}
/**
 * Stops the delivery of notifications for the specified beacon region.
 * @param regionId
 * @return any
 */
export function stopRangingBeaconRegion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stopRangingBeaconRegion");
    return null;
}
/**
 * Retrieve a collection for the beacons (sorted by proximity) currently in range for the given region.
 * @param regionId
 * @return any
 */
export function getBeaconsInRange() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconsInRange");
    return null;
}
/**
 * Advertises the current device as a beacon.
 * @param beaconInfo
 * @return boolean
 */
export function startAsBeacon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("startAsBeacon");
    return null;
}
/**
 * Stops advertising the current device as a beacon.
 * @return boolean
 */
export function stopAsBeacon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stopAsBeacon");
    return null;
}
// end Type
// Type: GeneXusSDSearch
// end Type
// Type: GeneXusSDDeepLink
// end Type
// Type: GeneXusSDWebBrowser
/**
 * Opens the give URL in the InApp Browser
 * @param url
 * @return any
 */
export function webBrowserOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("webBrowserOpen");
    return null;
}
/**
 * Closes the InApp Browser
 * @return any
 */
export function close() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("close");
    return null;
}
// end Type
// Type: GeneXusSDDeviceAuthentication
/**
 * Returns True if the API can be used in the current device, False otherwise
 * @param method
 * @return boolean
 */
export function isAvailable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("isAvailable");
    return null;
}
/**
 * Performs the authentication step, using the method that corresponds for the current device.
 * @param method
 * @param title
 * @param usageDescription
 * @return boolean
 */
export function authenticate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("authenticate");
    return null;
}
// end Type
// Type: GeneXusSDAppLifecycle
// end Type
// Type: GeneXusSDCardScanner
/**
 * @return any
 */
export function scanCard() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("scanCard");
    return null;
}
// end Type
// Type: BlobFile
// end Type
//# sourceMappingURL=not_implemented.js.map