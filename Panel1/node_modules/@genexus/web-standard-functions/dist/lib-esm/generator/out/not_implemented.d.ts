/**
 * @param message
 * @return any
 */
export declare function ask(...args: any[]): any;
/**
 * @param characterExpression
 * @param encoding
 * @return number
 */
export declare function byteCount(...args: any[]): any;
/**
 * @param array
 * @return any
 */
export declare function cols(...args: any[]): any;
/**
 * @param str
 * @param key
 * @return any
 */
export declare function decrypt64(...args: any[]): any;
/**
 * @return number
 */
export declare function dFRClose(...args: any[]): any;
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
export declare function dFRGDate(...args: any[]): any;
/**
 * @param value
 * @return number
 */
export declare function dFRGNum(...args: any[]): any;
/**
 * @param value
 * @param length
 * @return number
 */
export declare function dFRGTxt(...args: any[]): any;
/**
 * @return number
 */
export declare function dFRNext(...args: any[]): any;
/**
 * @param fileName
 * @param regLength
 * @param fieldDelimiter
 * @param strDelimiter
 * @param encoding
 * @return number
 */
export declare function dFROpen(...args: any[]): any;
/**
 * @return number
 */
export declare function dFWClose(...args: any[]): any;
/**
 * @return number
 */
export declare function dFWNext(...args: any[]): any;
/**
 * @param fileName
 * @param fieldDelimiter
 * @param strDelimiter
 * @param append
 * @param encoding
 * @return number
 */
export declare function dFWOpen(...args: any[]): any;
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
export declare function dFWPDate(...args: any[]): any;
/**
 * @param value
 * @param decimals
 * @return number
 */
export declare function dFWPNum(...args: any[]): any;
/**
 * @param value
 * @param length
 * @return number
 */
export declare function dFWPTxt(...args: any[]): any;
/**
 * @param str
 * @param key
 * @return any
 */
export declare function encrypt64(...args: any[]): any;
/**
 * @param attribute
 * @return number
 */
export declare function exists(...args: any[]): any;
/**
 * @param fileName
 * @return number
 */
export declare function fileExist(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function getDataStore(...args: any[]): any;
/**
 * @return any
 */
export declare function getEncryptionKey(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function getLocation(...args: any[]): any;
/**
 * @return number
 */
export declare function getSOAPErr(...args: any[]): any;
/**
 * @return any
 */
export declare function getSOAPErrMsg(...args: any[]): any;
/**
 * @return any
 */
export declare function getTheme(...args: any[]): any;
/**
 * @param value
 * @param line
 * @param lineLenght
 * @return any
 */
export declare function gXGetMLi(...args: any[]): any;
/**
 * @param value
 * @param lineLength
 * @return number
 */
export declare function gXMLines(...args: any[]): any;
/**
 * @param hTMLString
 * @return any
 */
export declare function hTMLClean(...args: any[]): any;
/**
 * @param urlString
 * @return any
 */
export declare function urlEncode(...args: any[]): any;
/**
 * @param objectURL
 * @param parameter
 * @return any
 */
export declare function link(...args: any[]): any;
/**
 * @param fileName
 * @return any
 */
export declare function loadBitmap(...args: any[]): any;
/**
 * @param document
 * @return number
 */
export declare function openDocument(...args: any[]): any;
/**
 * @param blob
 * @return any
 */
export declare function pathToUrl(...args: any[]): any;
/**
 * @param document
 * @return number
 */
export declare function printDocument(...args: any[]): any;
/**
 * @return number
 */
export declare function random(...args: any[]): any;
/**
 * @param path
 * @return any
 */
export declare function readRegKey(...args: any[]): any;
/**
 * @return any
 */
export declare function remoteAddr(...args: any[]): any;
/**
 * @return any
 */
export declare function returnOnClick(...args: any[]): any;
/**
 * @param red
 * @param green
 * @param blue
 * @return any
 */
export declare function rGB(...args: any[]): any;
/**
 * @param array
 * @return any
 */
export declare function rows(...args: any[]): any;
/**
 * @param seed
 * @return number
 */
export declare function rSeed(...args: any[]): any;
/**
 * @return Date
 */
export declare function serverDate(...args: any[]): any;
/**
 * @return any
 */
export declare function serverNow(...args: any[]): any;
/**
 * @return any
 */
export declare function serverTime(...args: any[]): any;
/**
 * @param str
 * @return number
 */
export declare function setTheme(...args: any[]): any;
/**
 * @param userId
 * @return number
 */
export declare function setUserId(...args: any[]): any;
/**
 * @param workstation
 * @return number
 */
export declare function setWrkSt(...args: any[]): any;
/**
 * @param fileName
 * @param modal
 * @return number
 */
export declare function shell(...args: any[]): any;
/**
 * @param seconds
 * @return number
 */
export declare function sleep(...args: any[]): any;
/**
 * @return Date
 */
export declare function sysDate(...args: any[]): any;
/**
 * @return any
 */
export declare function sysTime(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function toFormattedString(...args: any[]): any;
/**
 * @return any
 */
export declare function userCls(...args: any[]): any;
/**
 * @param server
 * @return any
 */
export declare function userID(...args: any[]): any;
/**
 * @param path
 * @param value
 * @return number
 */
export declare function writeRegKey(...args: any[]): any;
/**
 * @return any
 */
export declare function wrkSt(...args: any[]): any;
/**
 * @param param1
 * @param param2
 * @param param3
 * @return any
 */
export declare function xToD(...args: any[]): any;
/**
 * @param attribute
 * @param condition
 * @param defaultValue
 * @return any
 */
export declare function set(...args: any[]): any;
/**
 * @return any
 */
export declare function confirmed(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function cursor(...args: any[]): any;
/**
 * @param fileName
 * @return any
 */
export declare function deleteFile(...args: any[]): any;
/**
 * @param propertyName
 * @param propertyValue
 * @return any
 */
export declare function setEnvProperty(...args: any[]): any;
/**
 * @param subroutineName
 * @return any
 */
export declare function errorhandler(...args: any[]): any;
/**
 * @param fileName
 * @param type
 * @return any
 */
export declare function outputfile(...args: any[]): any;
/**
 * @param attribute
 * @return any
 */
export declare function order(...args: any[]): any;
/**
 * @param attribute
 * @return number
 */
export declare function level(...args: any[]): any;
/**
 * @return boolean
 */
export declare function modified(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function old(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function previous(...args: any[]): any;
/**
 * @param name
 * @param level
 * @return any
 */
export declare function accept(...args: any[]): any;
/**
 * @param value
 * @param attribute
 * @return any
 */
export declare function add(...args: any[]): any;
/**
 * @param attribute
 * @return any
 */
export declare function allowNulls(...args: any[]): any;
/**
 * @param action
 * @param level
 * @return any
 */
export declare function defaultmode(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function equal(...args: any[]): any;
/**
 * @param message
 * @param exceptionName
 * @return any
 */
export declare function error(...args: any[]): any;
/**
 * @param message
 * @param attribute
 * @return any
 */
export declare function refMsg(...args: any[]): any;
/**
 * @param userProgram
 * @param submitParms
 * @param parameter
 * @return any
 */
export declare function submit(...args: any[]): any;
/**
 * @param value
 * @param attribute
 * @return any
 */
export declare function subtract(...args: any[]): any;
/**
 * @param attribute
 * @return any
 */
export declare function update(...args: any[]): any;
/**
 * @param linesCount
 * @return any
 */
export declare function workfilelines(...args: any[]): any;
/**
 * @param expressionToEvaluate
 * @param variablesList
 * @param resultError
 * @param errorMessage
 * @return any
 */
export declare function calculate(...args: any[]): any;
/**
 * @param condition
 * @return any
 */
export declare function search(...args: any[]): any;
/**
 * @return any
 */
export declare function cHtmlClean(...args: any[]): any;
/**
 * @return any
 */
export declare function lHtmlClean(...args: any[]): any;
/**
 * @param pYear
 * @param pMonth
 * @param pDay
 * @param pHour
 * @param pMin
 * @param pSec
 * @return any
 */
export declare function dtSet(...args: any[]): any;
/**
 * @return any
 */
export declare function vHtmlClean(...args: any[]): any;
/**
 * @return any
 */
export declare function toBase64String(...args: any[]): any;
/**
 * @param content
 * @return any
 */
export declare function binaryFromBase64String(...args: any[]): any;
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
export declare function addAuthentication(...args: any[]): any;
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
export declare function addProxyAuthentication(...args: any[]): any;
/**
 * @param fileName
 * @param name
 * @return any
 */
export declare function httpClientAddFile(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function httpClientAddHeader(...args: any[]): any;
/**
 * @param value
 * @return any
 */
export declare function httpClientAddString(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function addVariable(...args: any[]): any;
/**
 * @param method
 * @param url
 * @return any
 */
export declare function execute(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function httpClientGetHeader(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function httpClientToFile(...args: any[]): any;
/**
 * @return any
 */
export declare function httpClientToString(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function addHeader(...args: any[]): any;
/**
 * @param value
 * @return any
 */
export declare function addString(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function addFile(...args: any[]): any;
/**
 * @param cookie
 * @return number
 */
export declare function httpResponseSetCookie(...args: any[]): any;
/**
 * @return any
 */
export declare function httpRequestToString(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function toFile(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function getHeader(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function getVariable(...args: any[]): any;
/**
 * @return any
 */
export declare function strCollectionClear(...args: any[]): any;
/**
 * @param element
 * @return any
 */
export declare function strCollectionAdd(...args: any[]): any;
/**
 * @param index
 * @return any
 */
export declare function strCollectionItem(...args: any[]): any;
/**
 * @return any
 */
export declare function websessionClear(...args: any[]): any;
/**
 * @return any
 */
export declare function destroy(...args: any[]): any;
/**
 * @param key
 * @return any
 */
export declare function websessionGet(...args: any[]): any;
/**
 * @param key
 * @return any
 */
export declare function websessionRemove(...args: any[]): any;
/**
 * @param key
 * @param value
 * @return any
 */
export declare function websessionSet(...args: any[]): any;
/**
 * @return any
 */
export declare function getResponse(...args: any[]): any;
/**
 * @return any
 */
export declare function items(...args: any[]): any;
/**
 * @param index
 * @return any
 */
export declare function searchResultCollectionItem(...args: any[]): any;
/**
 * @param item
 * @param index
 * @return any
 */
export declare function collectionAdd(...args: any[]): any;
/**
 * @return any
 */
export declare function collectionClear(...args: any[]): any;
/**
 * @param index
 * @return any
 */
export declare function collectionItem(...args: any[]): any;
/**
 * @param index
 * @return any
 */
export declare function collectionRemove(...args: any[]): any;
/**
 * @param item
 * @return number
 */
export declare function indexOf(...args: any[]): any;
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export declare function collectionToXml(...args: any[]): any;
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
export declare function collectionFromXml(...args: any[]): any;
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
export declare function collectionFromXmlFile(...args: any[]): any;
/**
 * @param includeState
 * @return any
 */
export declare function collectionToJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function collectionFromJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function collectionFromJsonFile(...args: any[]): any;
/**
 * @return any
 */
export declare function collectionClone(...args: any[]): any;
/**
 * @param columnListString
 * @return any
 */
export declare function sort(...args: any[]): any;
/**
 * @param primaryKeyAtt
 * @return any
 */
export declare function bcCollectionGetByKey(...args: any[]): any;
/**
 * @param primaryKeyAtt
 * @return boolean
 */
export declare function bcCollectionRemoveByKey(...args: any[]): any;
/**
 * @return boolean
 */
export declare function bcCollectionUpdate(...args: any[]): any;
/**
 * @return boolean
 */
export declare function bcCollectionInsert(...args: any[]): any;
/**
 * @return boolean
 */
export declare function bcCollectionInsertOrUpdate(...args: any[]): any;
/**
 * @return boolean
 */
export declare function bcCollectionDelete(...args: any[]): any;
/**
 * @param primaryKeyAtt
 * @return any
 */
export declare function getByKey(...args: any[]): any;
/**
 * @param primaryKeyAtt
 * @return boolean
 */
export declare function removeByKey(...args: any[]): any;
/**
 * @return any
 */
export declare function fileDelete(...args: any[]): any;
/**
 * @return boolean
 */
export declare function fileExists(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function fileRename(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function copy(...args: any[]): any;
/**
 * @return any
 */
export declare function fileGetName(...args: any[]): any;
/**
 * @return any
 */
export declare function fileGetAbsoluteName(...args: any[]): any;
/**
 * @return any
 */
export declare function getURI(...args: any[]): any;
/**
 * @return number
 */
export declare function getLength(...args: any[]): any;
/**
 * @return Date
 */
export declare function getLastModified(...args: any[]): any;
/**
 * @return any
 */
export declare function getPath(...args: any[]): any;
/**
 * @param encoding
 * @return any
 */
export declare function fileOpen(...args: any[]): any;
/**
 * @param encoding
 * @return any
 */
export declare function openWrite(...args: any[]): any;
/**
 * @param encoding
 * @return any
 */
export declare function openRead(...args: any[]): any;
/**
 * @return any
 */
export declare function fileClose(...args: any[]): any;
/**
 * @return any
 */
export declare function readLine(...args: any[]): any;
/**
 * @param encoding
 * @return any
 */
export declare function readAllText(...args: any[]): any;
/**
 * @param encoding
 * @return any
 */
export declare function readAllLines(...args: any[]): any;
/**
 * @param value
 * @return any
 */
export declare function writeLine(...args: any[]): any;
/**
 * @param value
 * @param encoding
 * @return any
 */
export declare function writeAllText(...args: any[]): any;
/**
 * @param value
 * @param encoding
 * @return any
 */
export declare function writeAllLines(...args: any[]): any;
/**
 * @param value
 * @param encoding
 * @return any
 */
export declare function appendAllText(...args: any[]): any;
/**
 * @param vale
 * @param encoding
 * @return any
 */
export declare function appendAllLines(...args: any[]): any;
/**
 * @return any
 */
export declare function fileCreate(...args: any[]): any;
/**
 * @param xSLTFile
 * @return any
 */
export declare function xSLTApply(...args: any[]): any;
/**
 * @return any
 */
export declare function fileHtmlClean(...args: any[]): any;
/**
 * @param base64String
 * @return boolean
 */
export declare function fromBase64String(...args: any[]): any;
/**
 * @param i
 * @return any
 */
export declare function fileCollectionItem(...args: any[]): any;
/**
 * @return any
 */
export declare function create(...args: any[]): any;
/**
 * @return any
 */
export declare function dirDelete(...args: any[]): any;
/**
 * @return boolean
 */
export declare function dirExists(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function rename(...args: any[]): any;
/**
 * @return any
 */
export declare function getName(...args: any[]): any;
/**
 * @return any
 */
export declare function getAbsoluteName(...args: any[]): any;
/**
 * @param filter
 * @return any
 */
export declare function getFiles(...args: any[]): any;
/**
 * @return any
 */
export declare function getDirectories(...args: any[]): any;
/**
 * @param i
 * @return any
 */
export declare function item(...args: any[]): any;
/**
 * @param attributeName
 * @param attributeValue
 * @return any
 */
export declare function propSet(...args: any[]): any;
/**
 * @param attributeName
 * @return any
 */
export declare function propGet(...args: any[]): any;
/**
 * @param attributeName
 * @return any
 */
export declare function propRemove(...args: any[]): any;
/**
 * @return any
 */
export declare function propClear(...args: any[]): any;
/**
 * @return any
 */
export declare function propToJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function propFromJson(...args: any[]): any;
/**
 * @return number
 */
export declare function evaluate(...args: any[]): any;
/**
 * @return number
 */
export declare function getLastErrCode(...args: any[]): any;
/**
 * @return any
 */
export declare function getLastErrDescription(...args: any[]): any;
/**
 * @param content
 * @param itemsPerPage
 * @param pageNumber
 * @return any
 */
export declare function textSearchfind(...args: any[]): any;
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
export declare function textSearchadd(...args: any[]): any;
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
export declare function textSearchupdate(...args: any[]): any;
/**
 * @param variable
 * @return boolean
 */
export declare function textSearchdelete(...args: any[]): any;
/**
 * @return boolean
 */
export declare function buildDictionary(...args: any[]): any;
/**
 * @param text
 * @return any
 */
export declare function checkSpell(...args: any[]): any;
/**
 * @return number
 */
export declare function reindexAll(...args: any[]): any;
/**
 * @param variableBCorText
 * @param query
 * @param textType
 * @param preTag
 * @param postTag
 * @param fragmentSize
 * @param maxNumFragments
 * @return any
 */
export declare function hTMLPreview(...args: any[]): any;
/**
 * @return any
 */
export declare function windowOpen(...args: any[]): any;
/**
 * @param videoURL
 * @return any
 */
export declare function videoFromURL(...args: any[]): any;
/**
 * @param videoURL
 * @return any
 */
export declare function fromURL(...args: any[]): any;
/**
 * @param fileURL
 * @return any
 */
export declare function binaryFileFromURL(...args: any[]): any;
/**
 * @param text
 * @param key
 * @return any
 */
export declare function compute(...args: any[]): any;
/**
 * @return any
 */
export declare function geographyToString(...args: any[]): any;
/**
 * @return any
 */
export declare function geographyToGeoJson(...args: any[]): any;
/**
 * @return any
 */
export declare function geographyToWkt(...args: any[]): any;
/**
 * @return any
 */
export declare function toGeoPoint(...args: any[]): any;
/**
 * @return any
 */
export declare function toGeoLine(...args: any[]): any;
/**
 * @return any
 */
export declare function toGeoPolygon(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geographyIsNull(...args: any[]): any;
/**
 * @return any
 */
export declare function geographySetNull(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geographyIsEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geographySetEmpty(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geographyIsNullOrEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geopointToGeography(...args: any[]): any;
/**
 * @return any
 */
export declare function geopointToString(...args: any[]): any;
/**
 * @return any
 */
export declare function geopointToGeoJson(...args: any[]): any;
/**
 * @return any
 */
export declare function toWKT(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopointIsNull(...args: any[]): any;
/**
 * @return any
 */
export declare function geopointSetNull(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopointIsEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geopointSetEmpty(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopointIsNullOrEmpty(...args: any[]): any;
/**
 * @param latitude
 * @param longitude
 * @return any
 */
export declare function newGeopoint(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineToGeography(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineToString(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineToGeoJson(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineToWkt(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geolineIsNull(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineSetNull(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geolineIsEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geolineSetEmpty(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geolineIsNullOrEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonToGeography(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonToString(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonToGeoJson(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonToWkt(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopolygonIsNull(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonSetNull(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopolygonIsEmpty(...args: any[]): any;
/**
 * @return any
 */
export declare function geopolygonSetEmpty(...args: any[]): any;
/**
 * @return boolean
 */
export declare function geopolygonIsNullOrEmpty(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function getCache(...args: any[]): any;
/**
 * @return any
 */
export declare function clearAllCaches(...args: any[]): any;
/**
 * @param key
 * @param value
 * @param durationMinutes
 * @return any
 */
export declare function cacheSet(...args: any[]): any;
/**
 * @param key
 * @return any
 */
export declare function cacheGet(...args: any[]): any;
/**
 * @param key
 * @return boolean
 */
export declare function contains(...args: any[]): any;
/**
 * @param key
 * @return any
 */
export declare function remove(...args: any[]): any;
/**
 * @return any
 */
export declare function clear(...args: any[]): any;
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param expirationMinutes
 * @param outMessages
 * @return boolean
 */
export declare function getPrivate(...args: any[]): any;
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
export declare function uploadPrivate(...args: any[]): any;
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param outMessages
 * @return boolean
 */
export declare function get(...args: any[]): any;
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
export declare function upload(...args: any[]): any;
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
export declare function download(...args: any[]): any;
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
export declare function downloadPrivate(...args: any[]): any;
/**
 * @param storageDirectoryFullName
 * @param outExternalDirectory
 * @param outMessages
 * @return boolean
 */
export declare function getDirectory(...args: any[]): any;
/**
 * @return any
 */
export declare function check(...args: any[]): any;
/**
 * @return any
 */
export declare function bcDelete(...args: any[]): any;
/**
 * @param primaryKeyAtt
 * @return any
 */
export declare function load(...args: any[]): any;
/**
 * @return any
 */
export declare function mode(...args: any[]): any;
/**
 * @return any
 */
export declare function bcSave(...args: any[]): any;
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export declare function bcToXml(...args: any[]): any;
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
export declare function bcFromXml(...args: any[]): any;
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
export declare function bcFromXmlFile(...args: any[]): any;
/**
 * @param includeState
 * @return any
 */
export declare function bcToJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function bcFromJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function bcFromJsonFile(...args: any[]): any;
/**
 * @return boolean
 */
export declare function bcUpdate(...args: any[]): any;
/**
 * @return boolean
 */
export declare function insert(...args: any[]): any;
/**
 * @return boolean
 */
export declare function insertOrUpdate(...args: any[]): any;
/**
 * @return boolean
 */
export declare function success(...args: any[]): any;
/**
 * @return boolean
 */
export declare function fail(...args: any[]): any;
/**
 * @return any
 */
export declare function getMessages(...args: any[]): any;
/**
 * @return any
 */
export declare function bcClone(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function createBC(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function createCollection(...args: any[]): any;
/**
 * @param name
 * @return any
 */
export declare function bcGetValue(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function setValue(...args: any[]): any;
/**
 * @return any
 */
export declare function getMetadata(...args: any[]): any;
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
export declare function toXml(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function fromXml(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function fromXmlFile(...args: any[]): any;
/**
 * @return any
 */
export declare function clone(...args: any[]): any;
/**
 * @param includeState
 * @return any
 */
export declare function toJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function fromJson(...args: any[]): any;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
export declare function fromJsonFile(...args: any[]): any;
/**
 * @return boolean
 */
export declare function sdtIsNull(...args: any[]): any;
/**
 * @return any
 */
export declare function setNull(...args: any[]): any;
/**
 * @return any
 */
export declare function sdtItemToFormattedString(...args: any[]): any;
/**
 * @return any
 */
export declare function first(...args: any[]): any;
/**
 * @return any
 */
export declare function next(...args: any[]): any;
/**
 * @return boolean
 */
export declare function eof(...args: any[]): any;
/**
 * @return any
 */
export declare function show(...args: any[]): any;
/**
 * @param title
 * @return any
 */
export declare function showWithTitle(...args: any[]): any;
/**
 * @param title
 * @param description
 * @return any
 */
export declare function showWithTitleAndDescription(...args: any[]): any;
/**
 * @return any
 */
export declare function hide(...args: any[]): any;
/**
 * @param propName
 * @param fileName
 * @return any
 */
export declare function getValue(...args: any[]): any;
/**
 * @param propName
 * @param fileName
 * @return boolean
 */
export declare function hasValue(...args: any[]): any;
/**
 * @param data
 * @return any
 */
export declare function setText(...args: any[]): any;
/**
 * @return any
 */
export declare function getText(...args: any[]): any;
/**
 * @param viewName
 * @return any
 */
export declare function trackView(...args: any[]): any;
/**
 * @param category
 * @param action
 * @param label
 * @param value
 * @return any
 */
export declare function trackEvent(...args: any[]): any;
/**
 * @param purchaseInfo
 * @return any
 */
export declare function trackPurchase(...args: any[]): any;
/**
 * @param userId
 * @return any
 */
export declare function setAnalyticsUserId(...args: any[]): any;
export declare class GeneXusCommonGeolocation {
    /**
     * Indicates wether the application has been given permission to use location services
     * @return boolean
     */
    static authorized(...args: any[]): any;
    /**
     * Indicates wether location services are enable in the device
     * @return boolean
     */
    static serviceEnabled(...args: any[]): any;
    /**
     * Starts generating tracking information
     * @param changesInterval
     * @param distance
     * @param action
     * @param actionTimeInterval
     * @param accuracy
     * @return any
     */
    static startTracking(...args: any[]): any;
    /**
     * Stops the generation of tracking information
     * @return any
     */
    static endTracking(...args: any[]): any;
    /**
     * Returns a collection of location information generated by the tracking methods
     * @param startTime
     * @return any
     */
    static getLocationHistory(...args: any[]): any;
    /**
     * Removes all previous location information generated by the tracking methods
     * @return any
     */
    static clearLocationHistory(...args: any[]): any;
    /**
     * Returns the latitude of the given location
     * @param location
     * @return number
     */
    static getLatitude(...args: any[]): any;
    /**
     * Returns the longitude of the given location
     * @param location
     * @return number
     */
    static getLongitude(...args: any[]): any;
    /**
     * Returns the distance between the two locations given
     * @param fromLocation
     * @param toLocation
     * @return number
     */
    static getDistance(...args: any[]): any;
    /**
     * Returns a collection of addresses for the given location
     * @param location
     * @return any
     */
    static getAddress(...args: any[]): any;
    /**
     * @param proximityAlerts
     * @return boolean
     */
    static setProximityAlerts(...args: any[]): any;
    /**
     * @return any
     */
    static getProximityAlerts(...args: any[]): any;
    /**
     * @return any
     */
    static getCurrentProximityAlert(...args: any[]): any;
    /**
     * @return any
     */
    static clearProximityAlerts(...args: any[]): any;
    /**
     * @param geoLocationPickerParameters
     * @return any
     */
    static pickLocation(...args: any[]): any;
    /**
     * Returns the current authorization status.
     */
    private static mauthorizationStatus;
    static get authorizationStatus(): any;
}
/**
 * @return any
 */
export declare function invalidateCache(...args: any[]): any;
/**
 * @param sourceLocation
 * @param destinationLocation
 * @param transportType
 * @param requestAlternateRoutes
 * @return any
 */
export declare function calculateDirections(...args: any[]): any;
export declare class GeneXusClientClientInformation {
}
/**
 * @param key
 * @param value
 * @return any
 */
export declare function secureSet(...args: any[]): any;
/**
 * @param name
 * @param caption
 * @param description
 * @param link
 * @param picture
 * @return any
 */
export declare function postToWall(...args: any[]): any;
/**
 * @param link
 * @return any
 */
export declare function shareLink(...args: any[]): any;
/**
 * @param image
 * @return any
 */
export declare function fbShareImage(...args: any[]): any;
/**
 * @param video
 * @return any
 */
export declare function shareVideo(...args: any[]): any;
/**
 * @param text
 * @param image
 * @return any
 */
export declare function tweet(...args: any[]): any;
/**
 * @param userName
 * @return any
 */
export declare function follow(...args: any[]): any;
/**
 * @param image
 * @param text
 * @param url
 * @param title
 * @return any
 */
export declare function shareImage(...args: any[]): any;
/**
 * @param sdtNotification
 * @return number
 */
export declare function notify(...args: any[]): any;
/**
 * @param clientId
 * @param sdtNotification
 * @return number
 */
export declare function notifyClient(...args: any[]): any;
/**
 * @param sdtNotification
 * @return any
 */
export declare function broadcast(...args: any[]): any;
/**
 * @param clientId
 * @param message
 * @return number
 */
export declare function notifyClientText(...args: any[]): any;
/**
 * Requests permission to alert the user. Typically, you make this request if your app uses local or push notifications to alert the user to new information involving your app.
 * @return any
 */
export declare function requestUserNotificationsPermission(...args: any[]): any;
/**
 * Requests permission to use location services while the app is in the foreground.
 * @return any
 */
export declare function requestLocationPermissionWhenInUse(...args: any[]): any;
/**
 * Requests permission to use location services whenever the app is running.
 * @return any
 */
export declare function requestLocationPermissionAlways(...args: any[]): any;
/**
 * Deprecated. Use RequestUserNotificationsPermission instead.
 * @return any
 */
export declare function requestRemoteNotificationsPermission(...args: any[]): any;
/**
 * @param productIdentifiers
 * @return any
 */
export declare function getProducts(...args: any[]): any;
/**
 * @param productIdentifier
 * @param quantity
 * @return any
 */
export declare function purchaseProduct(...args: any[]): any;
/**
 * @return any
 */
export declare function getPurchases(...args: any[]): any;
/**
 * @param productIdentifier
 * @return boolean
 */
export declare function consumeProduct(...args: any[]): any;
/**
 * Restore transactions (iOS only)
 * @return any
 */
export declare function restorePurchases(...args: any[]): any;
/**
 * @param name
 * @param value
 * @return any
 */
export declare function setParameter(...args: any[]): any;
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @return number
 */
export declare function call(...args: any[]): any;
/**
 * @param applicationId
 * @param deviceToken
 * @param badgeNumber
 * @param sound
 * @return number
 */
export declare function iOSSetBadge(...args: any[]): any;
/**
 * @param applicationId
 * @param deviceToken
 * @return number
 */
export declare function iOSResetBadge(...args: any[]): any;
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @param actionName
 * @param parameters
 * @return any
 */
export declare function callAction(...args: any[]): any;
/**
 * @param applicationId
 * @return number
 */
export declare function openSession(...args: any[]): any;
/**
 * @param remoteNotification
 * @return any
 */
export declare function remoteNotificationAdd(...args: any[]): any;
/**
 * @return any
 */
export declare function send(...args: any[]): any;
/**
 * @param applicationId
 * @param configuration
 * @return any
 */
export declare function setConfiguration(...args: any[]): any;
/**
 * @param alerts
 * @return number
 */
export declare function createAlerts(...args: any[]): any;
/**
 * @return any
 */
export declare function listAlerts(...args: any[]): any;
/**
 * @param alerts
 * @return number
 */
export declare function removeAlerts(...args: any[]): any;
/**
 * @return number
 */
export declare function removeAllAlerts(...args: any[]): any;
/**
 * @param image
 * @return any
 */
export declare function savePhoto(...args: any[]): any;
/**
 * @param video
 * @return any
 */
export declare function saveVideo(...args: any[]): any;
/**
 * @return any
 */
export declare function chooseImage(...args: any[]): any;
/**
 * @return any
 */
export declare function chooseVideo(...args: any[]): any;
/**
 * @return any
 */
export declare function chooseImages(...args: any[]): any;
/**
 * Plays the given audio with the specified category
 * @param audio
 * @param category
 * @return any
 */
export declare function play(...args: any[]): any;
/**
 * Plays the given audio in background, keeps playing while the application is in background
 * @param audio
 * @param description
 * @return any
 */
export declare function playBackground(...args: any[]): any;
/**
 * Stops the audio playing in all categories
 * @param category
 * @return any
 */
export declare function audioStop(...args: any[]): any;
/**
 * Returns whether there is audio playing in any category
 * @param category
 * @return boolean
 */
export declare function isPlaying(...args: any[]): any;
/**
 * Returns the current audio queue.
 * @return any
 */
export declare function getQueue(...args: any[]): any;
/**
 * Returns the state of the current audio queue (including the position in the queue and inside the current playing item, if any).
 * @return any
 */
export declare function getQueueState(...args: any[]): any;
/**
 * Sets the current audio queue. Stops current background playback, if any.
 * @param queue
 * @return any
 */
export declare function setQueue(...args: any[]): any;
/**
 * Starts or resumes playback of the current audio queue.
 * @return any
 */
export declare function playQueue(...args: any[]): any;
/**
 * Pauses playback of the current audio queue.
 * @return any
 */
export declare function pauseQueue(...args: any[]): any;
/**
 * Sets the current item in the media queue, given its media id.
 * @param mediaId
 * @return any
 */
export declare function setQueueCurrentItem(...args: any[]): any;
/**
 * Sets the current item in the media queue, given its index.
 * @param index
 * @return any
 */
export declare function setQueueCurrentIndex(...args: any[]): any;
/**
 * Allows configuring the audio player UI settings
 * @param settings
 * @return any
 */
export declare function setPlayerSettings(...args: any[]): any;
/**
 * @param show
 * @return any
 */
export declare function iOSSetShowsMiniPlayer(...args: any[]): any;
/**
 * @return any
 */
export declare function iOSDisplayFullScreenPlayer(...args: any[]): any;
/**
 * @return any
 */
export declare function iOSDismissFullScreenPlayer(...args: any[]): any;
/**
 * Starts a recording session. Returns True if the operation was successful, False otherwise
 * @return boolean
 */
export declare function start(...args: any[]): any;
/**
 * Stops the recording session and returns the URL of the recorder file.
 * @return any
 */
export declare function stop(...args: any[]): any;
/**
 * Call this action to execute the standard batch login against the OAuth server.
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
export declare function login(...args: any[]): any;
/**
 * Call this action to execute the batch login against the OAuth server for a External login type.
 * @param type
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
export declare function loginExternal(...args: any[]): any;
/**
 * Call this action to execute the standard logout against the OAuth server.
 * @return any
 */
export declare function logout(...args: any[]): any;
/**
 * Returns to the main object of the application, clearing the current call stack.
 * @return any
 */
export declare function goHome(...args: any[]): any;
/**
 * Returns to the object specified in the parameter. If it is present more than once in the call stack, it will return to the most recent instance.
 * @param objectName
 * @return any
 */
export declare function returnTo(...args: any[]): any;
/**
 * Call this action to execute the standard save in the edit form in the device.
 * @return any
 */
export declare function save(...args: any[]): any;
/**
 * Call this action to execute the standard cancel in the edit form in the device.
 * @return any
 */
export declare function cancel(...args: any[]): any;
/**
 * Call this action to execute the standard delete in the edit form in the device.
 * @return any
 */
export declare function deleteAction(...args: any[]): any;
/**
 * Takes an application screenshot for further use like sharing, save in library, etc.
 * @return any
 */
export declare function takeApplicationScreenshot(...args: any[]): any;
/**
 * Adds a contact to the device&#x27;s Address Book
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param companyName
 * @param photo
 * @param message
 * @return boolean
 */
export declare function addContact(...args: any[]): any;
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param message
 * @return boolean
 */
export declare function removeContact(...args: any[]): any;
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @return any
 */
export declare function viewContact(...args: any[]): any;
/**
 * Returns a collection of all the contacts in the device&#x27;s Address Book
 * @return any
 */
export declare function getAllContacts(...args: any[]): any;
/**
 * @param message
 * @param to
 * @return any
 */
export declare function sendMessage(...args: any[]): any;
/**
 * @param video
 * @return any
 */
export declare function playVideo(...args: any[]): any;
/**
 * @param audio
 * @return any
 */
export declare function playAudio(...args: any[]): any;
/**
 * @param to
 * @param cc
 * @param bcc
 * @param subject
 * @param message
 * @return any
 */
export declare function sendEmailAdvanced(...args: any[]): any;
/**
 * @param to
 * @param message
 * @return any
 */
export declare function sendSMS(...args: any[]): any;
/**
 * @return any
 */
export declare function clearCache(...args: any[]): any;
/**
 * Deprecated: use Interop.SetBadgeNumber instead
 * @param num
 * @return any
 */
export declare function iOSSetBadgeNumber(...args: any[]): any;
/**
 * @param num
 * @return any
 */
export declare function setBadgeNumber(...args: any[]): any;
/**
 * @param tabIndex
 * @return any
 */
export declare function iOSSetSelectedTabIndex(...args: any[]): any;
export declare class GeneXusSDNetwork {
    /**
     * @param url
     * @return boolean
     */
    static isServerAvailable(...args: any[]): any;
    /**
     * @param url
     * @return any
     */
    static type(...args: any[]): any;
    /**
     * @param url
     * @return boolean
     */
    static trafficBasedCost(...args: any[]): any;
    /**
     * If the property Dynamic Services URL is set to True, changes the URL at runtime.
     * @param url
     * @return any
     */
    static setApplicationServerURL(...args: any[]): any;
}
/**
 * Start monitoring the specified beacon region.
 * @param proximityAlert
 * @return boolean
 */
export declare function addBeaconProximityAlert(...args: any[]): any;
/**
 * Start monitoring the specified beacon regions.
 * @param proximityAlerts
 * @return boolean
 */
export declare function addBeaconProximityAlerts(...args: any[]): any;
/**
 * Retrieve a collection for the beacon regions that are currently being monitored.
 * @return any
 */
export declare function getBeaconProximityAlerts(...args: any[]): any;
/**
 * Removes the beacon region being monitored.
 * @param proximityAlertRegionId
 * @return any
 */
export declare function removeBeaconProximityAlert(...args: any[]): any;
/**
 * Removes all the beacon regions being monitored.
 * @return any
 */
export declare function clearBeaconProximityAlerts(...args: any[]): any;
/**
 * Retrieve the cached state of the specified region.
 * @param regionId
 * @return any
 */
export declare function getBeaconRegionState(...args: any[]): any;
/**
 * Starts the delivery of notifications for beacons in the specified region.
 * @param beaconRegion
 * @return boolean
 */
export declare function startRangingBeaconRegion(...args: any[]): any;
/**
 * Retrieve a collection for the beacon regions that are currently providing ranging.
 * @return any
 */
export declare function getRangedBeaconRegions(...args: any[]): any;
/**
 * Stops the delivery of notifications for the specified beacon region.
 * @param regionId
 * @return any
 */
export declare function stopRangingBeaconRegion(...args: any[]): any;
/**
 * Retrieve a collection for the beacons (sorted by proximity) currently in range for the given region.
 * @param regionId
 * @return any
 */
export declare function getBeaconsInRange(...args: any[]): any;
/**
 * Advertises the current device as a beacon.
 * @param beaconInfo
 * @return boolean
 */
export declare function startAsBeacon(...args: any[]): any;
/**
 * Stops advertising the current device as a beacon.
 * @return boolean
 */
export declare function stopAsBeacon(...args: any[]): any;
/**
 * Opens the give URL in the InApp Browser
 * @param url
 * @return any
 */
export declare function webBrowserOpen(...args: any[]): any;
/**
 * Closes the InApp Browser
 * @return any
 */
export declare function close(...args: any[]): any;
/**
 * Returns True if the API can be used in the current device, False otherwise
 * @param method
 * @return boolean
 */
export declare function isAvailable(...args: any[]): any;
/**
 * Performs the authentication step, using the method that corresponds for the current device.
 * @param method
 * @param title
 * @param usageDescription
 * @return boolean
 */
export declare function authenticate(...args: any[]): any;
/**
 * @return any
 */
export declare function scanCard(...args: any[]): any;
