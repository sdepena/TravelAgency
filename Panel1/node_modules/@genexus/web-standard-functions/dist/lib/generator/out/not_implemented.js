"use strict";
/* AUTOGENERATED CODE BELOW */
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanCard = exports.authenticate = exports.isAvailable = exports.close = exports.webBrowserOpen = exports.stopAsBeacon = exports.startAsBeacon = exports.getBeaconsInRange = exports.stopRangingBeaconRegion = exports.getRangedBeaconRegions = exports.startRangingBeaconRegion = exports.getBeaconRegionState = exports.clearBeaconProximityAlerts = exports.removeBeaconProximityAlert = exports.getBeaconProximityAlerts = exports.addBeaconProximityAlerts = exports.addBeaconProximityAlert = exports.GeneXusSDNetwork = exports.iOSSetSelectedTabIndex = exports.setBadgeNumber = exports.iOSSetBadgeNumber = exports.clearCache = exports.sendSMS = exports.sendEmailAdvanced = exports.playAudio = exports.playVideo = exports.sendMessage = exports.getAllContacts = exports.viewContact = exports.removeContact = exports.addContact = exports.takeApplicationScreenshot = exports.deleteAction = exports.cancel = exports.save = exports.returnTo = exports.goHome = exports.logout = exports.loginExternal = exports.login = exports.stop = exports.start = exports.iOSDismissFullScreenPlayer = exports.iOSDisplayFullScreenPlayer = exports.iOSSetShowsMiniPlayer = exports.setPlayerSettings = exports.setQueueCurrentIndex = exports.setQueueCurrentItem = exports.pauseQueue = exports.playQueue = exports.setQueue = exports.getQueueState = exports.getQueue = exports.isPlaying = exports.audioStop = exports.playBackground = exports.play = exports.chooseImages = exports.chooseVideo = exports.chooseImage = exports.saveVideo = exports.savePhoto = exports.removeAllAlerts = exports.removeAlerts = exports.listAlerts = exports.createAlerts = exports.setConfiguration = exports.send = exports.remoteNotificationAdd = exports.openSession = exports.callAction = exports.iOSResetBadge = exports.iOSSetBadge = exports.call = exports.setParameter = exports.restorePurchases = exports.consumeProduct = exports.getPurchases = exports.purchaseProduct = exports.getProducts = exports.requestRemoteNotificationsPermission = exports.requestLocationPermissionAlways = exports.requestLocationPermissionWhenInUse = exports.requestUserNotificationsPermission = exports.notifyClientText = exports.broadcast = exports.notifyClient = exports.notify = exports.shareImage = exports.follow = exports.tweet = exports.shareVideo = exports.fbShareImage = exports.shareLink = exports.postToWall = exports.secureSet = exports.GeneXusClientClientInformation = exports.calculateDirections = exports.invalidateCache = exports.GeneXusCommonGeolocation = exports.setAnalyticsUserId = exports.trackPurchase = exports.trackEvent = exports.trackView = exports.getText = exports.setText = exports.hasValue = exports.getValue = exports.hide = exports.showWithTitleAndDescription = exports.showWithTitle = exports.show = exports.eof = exports.next = exports.first = exports.sdtItemToFormattedString = exports.setNull = exports.sdtIsNull = exports.fromJsonFile = exports.fromJson = exports.toJson = exports.clone = exports.fromXmlFile = exports.fromXml = exports.toXml = exports.getMetadata = exports.setValue = exports.bcGetValue = exports.createCollection = exports.createBC = exports.bcClone = exports.getMessages = exports.fail = exports.success = exports.insertOrUpdate = exports.insert = exports.bcUpdate = exports.bcFromJsonFile = exports.bcFromJson = exports.bcToJson = exports.bcFromXmlFile = exports.bcFromXml = exports.bcToXml = exports.bcSave = exports.mode = exports.load = exports.bcDelete = exports.check = exports.getDirectory = exports.downloadPrivate = exports.download = exports.upload = exports.get = exports.uploadPrivate = exports.getPrivate = exports.clear = exports.remove = exports.contains = exports.cacheGet = exports.cacheSet = exports.clearAllCaches = exports.getCache = exports.geopolygonIsNullOrEmpty = exports.geopolygonSetEmpty = exports.geopolygonIsEmpty = exports.geopolygonSetNull = exports.geopolygonIsNull = exports.geopolygonToWkt = exports.geopolygonToGeoJson = exports.geopolygonToString = exports.geopolygonToGeography = exports.geolineIsNullOrEmpty = exports.geolineSetEmpty = exports.geolineIsEmpty = exports.geolineSetNull = exports.geolineIsNull = exports.geolineToWkt = exports.geolineToGeoJson = exports.geolineToString = exports.geolineToGeography = exports.newGeopoint = exports.geopointIsNullOrEmpty = exports.geopointSetEmpty = exports.geopointIsEmpty = exports.geopointSetNull = exports.geopointIsNull = exports.toWKT = exports.geopointToGeoJson = exports.geopointToString = exports.geopointToGeography = exports.geographyIsNullOrEmpty = exports.geographySetEmpty = exports.geographyIsEmpty = exports.geographySetNull = exports.geographyIsNull = exports.toGeoPolygon = exports.toGeoLine = exports.toGeoPoint = exports.geographyToWkt = exports.geographyToGeoJson = exports.geographyToString = exports.compute = exports.binaryFileFromURL = exports.fromURL = exports.videoFromURL = exports.windowOpen = exports.hTMLPreview = exports.reindexAll = exports.checkSpell = exports.buildDictionary = exports.textSearchdelete = exports.textSearchupdate = exports.textSearchadd = exports.textSearchfind = exports.getLastErrDescription = exports.getLastErrCode = exports.evaluate = exports.propFromJson = exports.propToJson = exports.propClear = exports.propRemove = exports.propGet = exports.propSet = exports.item = exports.getDirectories = exports.getFiles = exports.getAbsoluteName = exports.getName = exports.rename = exports.dirExists = exports.dirDelete = exports.create = exports.fileCollectionItem = exports.fromBase64String = exports.fileHtmlClean = exports.xSLTApply = exports.fileCreate = exports.appendAllLines = exports.appendAllText = exports.writeAllLines = exports.writeAllText = exports.writeLine = exports.readAllLines = exports.readAllText = exports.readLine = exports.fileClose = exports.openRead = exports.openWrite = exports.fileOpen = exports.getPath = exports.getLastModified = exports.getLength = exports.getURI = exports.fileGetAbsoluteName = exports.fileGetName = exports.copy = exports.fileRename = exports.fileExists = exports.fileDelete = exports.removeByKey = exports.getByKey = exports.bcCollectionDelete = exports.bcCollectionInsertOrUpdate = exports.bcCollectionInsert = exports.bcCollectionUpdate = exports.bcCollectionRemoveByKey = exports.bcCollectionGetByKey = exports.sort = exports.collectionClone = exports.collectionFromJsonFile = exports.collectionFromJson = exports.collectionToJson = exports.collectionFromXmlFile = exports.collectionFromXml = exports.collectionToXml = exports.indexOf = exports.collectionRemove = exports.collectionItem = exports.collectionClear = exports.collectionAdd = exports.searchResultCollectionItem = exports.items = exports.getResponse = exports.websessionSet = exports.websessionRemove = exports.websessionGet = exports.destroy = exports.websessionClear = exports.strCollectionItem = exports.strCollectionAdd = exports.strCollectionClear = exports.getVariable = exports.getHeader = exports.toFile = exports.httpRequestToString = exports.httpResponseSetCookie = exports.addFile = exports.addString = exports.addHeader = exports.httpClientToString = exports.httpClientToFile = exports.httpClientGetHeader = exports.execute = exports.addVariable = exports.httpClientAddString = exports.httpClientAddHeader = exports.httpClientAddFile = exports.addProxyAuthentication = exports.addAuthentication = exports.binaryFromBase64String = exports.toBase64String = exports.vHtmlClean = exports.dtSet = exports.lHtmlClean = exports.cHtmlClean = exports.search = exports.calculate = exports.workfilelines = exports.update = exports.subtract = exports.submit = exports.refMsg = exports.error = exports.equal = exports.defaultmode = exports.allowNulls = exports.add = exports.accept = exports.previous = exports.old = exports.modified = exports.level = exports.order = exports.outputfile = exports.errorhandler = exports.setEnvProperty = exports.deleteFile = exports.cursor = exports.confirmed = exports.set = exports.xToD = exports.wrkSt = exports.writeRegKey = exports.userID = exports.userCls = exports.toFormattedString = exports.sysTime = exports.sysDate = exports.sleep = exports.shell = exports.setWrkSt = exports.setUserId = exports.setTheme = exports.serverTime = exports.serverNow = exports.serverDate = exports.rSeed = exports.rows = exports.rGB = exports.returnOnClick = exports.remoteAddr = exports.readRegKey = exports.random = exports.printDocument = exports.pathToUrl = exports.openDocument = exports.loadBitmap = exports.link = exports.urlEncode = exports.hTMLClean = exports.gXMLines = exports.gXGetMLi = exports.getTheme = exports.getSOAPErrMsg = exports.getSOAPErr = exports.getLocation = exports.getEncryptionKey = exports.getDataStore = exports.fileExist = exports.exists = exports.encrypt64 = exports.dFWPTxt = exports.dFWPNum = exports.dFWPDate = exports.dFWOpen = exports.dFWNext = exports.dFWClose = exports.dFROpen = exports.dFRNext = exports.dFRGTxt = exports.dFRGNum = exports.dFRGDate = exports.dFRClose = exports.decrypt64 = exports.cols = exports.byteCount = exports.ask = void 0;
function notImplemented(fnName) {
    console.log("Not yet implemented: " + fnName);
}
// Type: Core
/**
 * @param message
 * @return any
 */
function ask() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("ask");
    return null;
}
exports.ask = ask;
/**
 * @param characterExpression
 * @param encoding
 * @return number
 */
function byteCount() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("byteCount");
    return null;
}
exports.byteCount = byteCount;
/**
 * @param array
 * @return any
 */
function cols() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cols");
    return null;
}
exports.cols = cols;
/**
 * @param str
 * @param key
 * @return any
 */
function decrypt64() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("decrypt64");
    return null;
}
exports.decrypt64 = decrypt64;
/**
 * @return number
 */
function dFRClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRClose");
    return null;
}
exports.dFRClose = dFRClose;
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
function dFRGDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGDate");
    return null;
}
exports.dFRGDate = dFRGDate;
/**
 * @param value
 * @return number
 */
function dFRGNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGNum");
    return null;
}
exports.dFRGNum = dFRGNum;
/**
 * @param value
 * @param length
 * @return number
 */
function dFRGTxt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRGTxt");
    return null;
}
exports.dFRGTxt = dFRGTxt;
/**
 * @return number
 */
function dFRNext() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFRNext");
    return null;
}
exports.dFRNext = dFRNext;
/**
 * @param fileName
 * @param regLength
 * @param fieldDelimiter
 * @param strDelimiter
 * @param encoding
 * @return number
 */
function dFROpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFROpen");
    return null;
}
exports.dFROpen = dFROpen;
/**
 * @return number
 */
function dFWClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWClose");
    return null;
}
exports.dFWClose = dFWClose;
/**
 * @return number
 */
function dFWNext() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWNext");
    return null;
}
exports.dFWNext = dFWNext;
/**
 * @param fileName
 * @param fieldDelimiter
 * @param strDelimiter
 * @param append
 * @param encoding
 * @return number
 */
function dFWOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWOpen");
    return null;
}
exports.dFWOpen = dFWOpen;
/**
 * @param value
 * @param format
 * @param separator
 * @return number
 */
function dFWPDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPDate");
    return null;
}
exports.dFWPDate = dFWPDate;
/**
 * @param value
 * @param decimals
 * @return number
 */
function dFWPNum() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPNum");
    return null;
}
exports.dFWPNum = dFWPNum;
/**
 * @param value
 * @param length
 * @return number
 */
function dFWPTxt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dFWPTxt");
    return null;
}
exports.dFWPTxt = dFWPTxt;
/**
 * @param str
 * @param key
 * @return any
 */
function encrypt64() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("encrypt64");
    return null;
}
exports.encrypt64 = encrypt64;
/**
 * @param attribute
 * @return number
 */
function exists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("exists");
    return null;
}
exports.exists = exists;
/**
 * @param fileName
 * @return number
 */
function fileExist() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileExist");
    return null;
}
exports.fileExist = fileExist;
/**
 * @param name
 * @return any
 */
function getDataStore() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDataStore");
    return null;
}
exports.getDataStore = getDataStore;
/**
 * @return any
 */
function getEncryptionKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getEncryptionKey");
    return null;
}
exports.getEncryptionKey = getEncryptionKey;
/**
 * @param name
 * @return any
 */
function getLocation() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLocation");
    return null;
}
exports.getLocation = getLocation;
/**
 * @return number
 */
function getSOAPErr() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getSOAPErr");
    return null;
}
exports.getSOAPErr = getSOAPErr;
/**
 * @return any
 */
function getSOAPErrMsg() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getSOAPErrMsg");
    return null;
}
exports.getSOAPErrMsg = getSOAPErrMsg;
/**
 * @return any
 */
function getTheme() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getTheme");
    return null;
}
exports.getTheme = getTheme;
/**
 * @param value
 * @param line
 * @param lineLenght
 * @return any
 */
function gXGetMLi() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("gXGetMLi");
    return null;
}
exports.gXGetMLi = gXGetMLi;
/**
 * @param value
 * @param lineLength
 * @return number
 */
function gXMLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("gXMLines");
    return null;
}
exports.gXMLines = gXMLines;
/**
 * @param hTMLString
 * @return any
 */
function hTMLClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hTMLClean");
    return null;
}
exports.hTMLClean = hTMLClean;
/**
 * @param urlString
 * @return any
 */
function urlEncode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("urlEncode");
    return null;
}
exports.urlEncode = urlEncode;
/**
 * @param objectURL
 * @param parameter
 * @return any
 */
function link() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("link");
    return null;
}
exports.link = link;
/**
 * @param fileName
 * @return any
 */
function loadBitmap() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("loadBitmap");
    return null;
}
exports.loadBitmap = loadBitmap;
/**
 * @param document
 * @return number
 */
function openDocument() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openDocument");
    return null;
}
exports.openDocument = openDocument;
/**
 * @param blob
 * @return any
 */
function pathToUrl() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("pathToUrl");
    return null;
}
exports.pathToUrl = pathToUrl;
/**
 * @param document
 * @return number
 */
function printDocument() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("printDocument");
    return null;
}
exports.printDocument = printDocument;
/**
 * @return number
 */
function random() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("random");
    return null;
}
exports.random = random;
/**
 * @param path
 * @return any
 */
function readRegKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readRegKey");
    return null;
}
exports.readRegKey = readRegKey;
/**
 * @return any
 */
function remoteAddr() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remoteAddr");
    return null;
}
exports.remoteAddr = remoteAddr;
/**
 * @return any
 */
function returnOnClick() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("returnOnClick");
    return null;
}
exports.returnOnClick = returnOnClick;
/**
 * @param red
 * @param green
 * @param blue
 * @return any
 */
function rGB() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rGB");
    return null;
}
exports.rGB = rGB;
/**
 * @param array
 * @return any
 */
function rows() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rows");
    return null;
}
exports.rows = rows;
/**
 * @param seed
 * @return number
 */
function rSeed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rSeed");
    return null;
}
exports.rSeed = rSeed;
/**
 * @return Date
 */
function serverDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverDate");
    return null;
}
exports.serverDate = serverDate;
/**
 * @return any
 */
function serverNow() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverNow");
    return null;
}
exports.serverNow = serverNow;
/**
 * @return any
 */
function serverTime() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("serverTime");
    return null;
}
exports.serverTime = serverTime;
/**
 * @param str
 * @return number
 */
function setTheme() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setTheme");
    return null;
}
exports.setTheme = setTheme;
/**
 * @param userId
 * @return number
 */
function setUserId() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setUserId");
    return null;
}
exports.setUserId = setUserId;
/**
 * @param workstation
 * @return number
 */
function setWrkSt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setWrkSt");
    return null;
}
exports.setWrkSt = setWrkSt;
/**
 * @param fileName
 * @param modal
 * @return number
 */
function shell() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shell");
    return null;
}
exports.shell = shell;
/**
 * @param seconds
 * @return number
 */
function sleep() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sleep");
    return null;
}
exports.sleep = sleep;
/**
 * @return Date
 */
function sysDate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sysDate");
    return null;
}
exports.sysDate = sysDate;
/**
 * @return any
 */
function sysTime() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sysTime");
    return null;
}
exports.sysTime = sysTime;
/**
 * @param name
 * @return any
 */
function toFormattedString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toFormattedString");
    return null;
}
exports.toFormattedString = toFormattedString;
/**
 * @return any
 */
function userCls() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("userCls");
    return null;
}
exports.userCls = userCls;
/**
 * @param server
 * @return any
 */
function userID() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("userID");
    return null;
}
exports.userID = userID;
/**
 * @param path
 * @param value
 * @return number
 */
function writeRegKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeRegKey");
    return null;
}
exports.writeRegKey = writeRegKey;
/**
 * @return any
 */
function wrkSt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("wrkSt");
    return null;
}
exports.wrkSt = wrkSt;
/**
 * @param param1
 * @param param2
 * @param param3
 * @return any
 */
function xToD() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("xToD");
    return null;
}
exports.xToD = xToD;
/**
 * @param attribute
 * @param condition
 * @param defaultValue
 * @return any
 */
function set() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("set");
    return null;
}
exports.set = set;
/**
 * @return any
 */
function confirmed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("confirmed");
    return null;
}
exports.confirmed = confirmed;
/**
 * @param name
 * @return any
 */
function cursor() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cursor");
    return null;
}
exports.cursor = cursor;
/**
 * @param fileName
 * @return any
 */
function deleteFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("deleteFile");
    return null;
}
exports.deleteFile = deleteFile;
/**
 * @param propertyName
 * @param propertyValue
 * @return any
 */
function setEnvProperty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setEnvProperty");
    return null;
}
exports.setEnvProperty = setEnvProperty;
/**
 * @param subroutineName
 * @return any
 */
function errorhandler() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("errorhandler");
    return null;
}
exports.errorhandler = errorhandler;
/**
 * @param fileName
 * @param type
 * @return any
 */
function outputfile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("outputfile");
    return null;
}
exports.outputfile = outputfile;
/**
 * @param attribute
 * @return any
 */
function order() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("order");
    return null;
}
exports.order = order;
/**
 * @param attribute
 * @return number
 */
function level() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("level");
    return null;
}
exports.level = level;
/**
 * @return boolean
 */
function modified() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("modified");
    return null;
}
exports.modified = modified;
/**
 * @param name
 * @return any
 */
function old() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("old");
    return null;
}
exports.old = old;
/**
 * @param name
 * @return any
 */
function previous() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("previous");
    return null;
}
exports.previous = previous;
/**
 * @param name
 * @param level
 * @return any
 */
function accept() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("accept");
    return null;
}
exports.accept = accept;
/**
 * @param value
 * @param attribute
 * @return any
 */
function add() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("add");
    return null;
}
exports.add = add;
/**
 * @param attribute
 * @return any
 */
function allowNulls() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("allowNulls");
    return null;
}
exports.allowNulls = allowNulls;
/**
 * @param action
 * @param level
 * @return any
 */
function defaultmode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("defaultmode");
    return null;
}
exports.defaultmode = defaultmode;
/**
 * @param name
 * @param value
 * @return any
 */
function equal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("equal");
    return null;
}
exports.equal = equal;
/**
 * @param message
 * @param exceptionName
 * @return any
 */
function error() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("error");
    return null;
}
exports.error = error;
/**
 * @param message
 * @param attribute
 * @return any
 */
function refMsg() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("refMsg");
    return null;
}
exports.refMsg = refMsg;
/**
 * @param userProgram
 * @param submitParms
 * @param parameter
 * @return any
 */
function submit() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("submit");
    return null;
}
exports.submit = submit;
/**
 * @param value
 * @param attribute
 * @return any
 */
function subtract() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("subtract");
    return null;
}
exports.subtract = subtract;
/**
 * @param attribute
 * @return any
 */
function update() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("update");
    return null;
}
exports.update = update;
/**
 * @param linesCount
 * @return any
 */
function workfilelines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("workfilelines");
    return null;
}
exports.workfilelines = workfilelines;
/**
 * @param expressionToEvaluate
 * @param variablesList
 * @param resultError
 * @param errorMessage
 * @return any
 */
function calculate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("calculate");
    return null;
}
exports.calculate = calculate;
/**
 * @param condition
 * @return any
 */
function search() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("search");
    return null;
}
exports.search = search;
// end Type
// Type: Numeric
// end Type
// Type: Character
/**
 * @return any
 */
function cHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cHtmlClean");
    return null;
}
exports.cHtmlClean = cHtmlClean;
// end Type
// Type: Date
// end Type
// Type: Image
// end Type
// Type: LongVarchar
/**
 * @return any
 */
function lHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("lHtmlClean");
    return null;
}
exports.lHtmlClean = lHtmlClean;
// end Type
// Type: DateTime
/**
 * @param pYear
 * @param pMonth
 * @param pDay
 * @param pHour
 * @param pMin
 * @param pSec
 * @return any
 */
function dtSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dtSet");
    return null;
}
exports.dtSet = dtSet;
// end Type
// Type: Varchar
/**
 * @return any
 */
function vHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("vHtmlClean");
    return null;
}
exports.vHtmlClean = vHtmlClean;
// end Type
// Type: Binary
/**
 * @return any
 */
function toBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toBase64String");
    return null;
}
exports.toBase64String = toBase64String;
/**
 * @param content
 * @return any
 */
function binaryFromBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("binaryFromBase64String");
    return null;
}
exports.binaryFromBase64String = binaryFromBase64String;
// end Type
// Type: Boolean
// end Type
// Type: HttpClient
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
function addAuthentication() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addAuthentication");
    return null;
}
exports.addAuthentication = addAuthentication;
/**
 * @param authType
 * @param realm
 * @param user
 * @param password
 * @return any
 */
function addProxyAuthentication() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addProxyAuthentication");
    return null;
}
exports.addProxyAuthentication = addProxyAuthentication;
/**
 * @param fileName
 * @param name
 * @return any
 */
function httpClientAddFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddFile");
    return null;
}
exports.httpClientAddFile = httpClientAddFile;
/**
 * @param name
 * @param value
 * @return any
 */
function httpClientAddHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddHeader");
    return null;
}
exports.httpClientAddHeader = httpClientAddHeader;
/**
 * @param value
 * @return any
 */
function httpClientAddString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientAddString");
    return null;
}
exports.httpClientAddString = httpClientAddString;
/**
 * @param name
 * @param value
 * @return any
 */
function addVariable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addVariable");
    return null;
}
exports.addVariable = addVariable;
/**
 * @param method
 * @param url
 * @return any
 */
function execute() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("execute");
    return null;
}
exports.execute = execute;
/**
 * @param name
 * @return any
 */
function httpClientGetHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientGetHeader");
    return null;
}
exports.httpClientGetHeader = httpClientGetHeader;
/**
 * @param name
 * @return any
 */
function httpClientToFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientToFile");
    return null;
}
exports.httpClientToFile = httpClientToFile;
/**
 * @return any
 */
function httpClientToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpClientToString");
    return null;
}
exports.httpClientToString = httpClientToString;
// end Type
// Type: HttpResponse
/**
 * @param name
 * @param value
 * @return any
 */
function addHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addHeader");
    return null;
}
exports.addHeader = addHeader;
/**
 * @param value
 * @return any
 */
function addString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addString");
    return null;
}
exports.addString = addString;
/**
 * @param name
 * @return any
 */
function addFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addFile");
    return null;
}
exports.addFile = addFile;
/**
 * @param cookie
 * @return number
 */
function httpResponseSetCookie() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpResponseSetCookie");
    return null;
}
exports.httpResponseSetCookie = httpResponseSetCookie;
// end Type
// Type: HttpRequest
/**
 * @return any
 */
function httpRequestToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("httpRequestToString");
    return null;
}
exports.httpRequestToString = httpRequestToString;
/**
 * @param name
 * @return any
 */
function toFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toFile");
    return null;
}
exports.toFile = toFile;
/**
 * @param name
 * @return any
 */
function getHeader() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getHeader");
    return null;
}
exports.getHeader = getHeader;
/**
 * @param name
 * @return any
 */
function getVariable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getVariable");
    return null;
}
exports.getVariable = getVariable;
// end Type
// Type: StringCollection
/**
 * @return any
 */
function strCollectionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionClear");
    return null;
}
exports.strCollectionClear = strCollectionClear;
/**
 * @param element
 * @return any
 */
function strCollectionAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionAdd");
    return null;
}
exports.strCollectionAdd = strCollectionAdd;
/**
 * @param index
 * @return any
 */
function strCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("strCollectionItem");
    return null;
}
exports.strCollectionItem = strCollectionItem;
// end Type
// Type: WebSession
/**
 * @return any
 */
function websessionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionClear");
    return null;
}
exports.websessionClear = websessionClear;
/**
 * @return any
 */
function destroy() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("destroy");
    return null;
}
exports.destroy = destroy;
/**
 * @param key
 * @return any
 */
function websessionGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionGet");
    return null;
}
exports.websessionGet = websessionGet;
/**
 * @param key
 * @return any
 */
function websessionRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionRemove");
    return null;
}
exports.websessionRemove = websessionRemove;
/**
 * @param key
 * @param value
 * @return any
 */
function websessionSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("websessionSet");
    return null;
}
exports.websessionSet = websessionSet;
// end Type
// Type: WebWrapper
/**
 * @return any
 */
function getResponse() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getResponse");
    return null;
}
exports.getResponse = getResponse;
// end Type
// Type: Variant
// end Type
// Type: Location
// end Type
// Type: RegExMatch
// end Type
// Type: RegExMatchCollection
// end Type
// Type: ContentInfo
// end Type
// Type: Blob
// end Type
// Type: SearchResult
/**
 * @return any
 */
function items() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("items");
    return null;
}
exports.items = items;
// end Type
// Type: SearchResultCollection
/**
 * @param index
 * @return any
 */
function searchResultCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("searchResultCollectionItem");
    return null;
}
exports.searchResultCollectionItem = searchResultCollectionItem;
// end Type
// Type: SearchResultItem
// end Type
// Type: Collection
/**
 * @param item
 * @param index
 * @return any
 */
function collectionAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionAdd");
    return null;
}
exports.collectionAdd = collectionAdd;
/**
 * @return any
 */
function collectionClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionClear");
    return null;
}
exports.collectionClear = collectionClear;
/**
 * @param index
 * @return any
 */
function collectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionItem");
    return null;
}
exports.collectionItem = collectionItem;
/**
 * @param index
 * @return any
 */
function collectionRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionRemove");
    return null;
}
exports.collectionRemove = collectionRemove;
/**
 * @param item
 * @return number
 */
function indexOf() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("indexOf");
    return null;
}
exports.indexOf = indexOf;
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
function collectionToXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionToXml");
    return null;
}
exports.collectionToXml = collectionToXml;
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
function collectionFromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromXml");
    return null;
}
exports.collectionFromXml = collectionFromXml;
/**
 * @param name
 * @param outMessages
 * @return boolean
 */
function collectionFromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromXmlFile");
    return null;
}
exports.collectionFromXmlFile = collectionFromXmlFile;
/**
 * @param includeState
 * @return any
 */
function collectionToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionToJson");
    return null;
}
exports.collectionToJson = collectionToJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function collectionFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromJson");
    return null;
}
exports.collectionFromJson = collectionFromJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function collectionFromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionFromJsonFile");
    return null;
}
exports.collectionFromJsonFile = collectionFromJsonFile;
/**
 * @return any
 */
function collectionClone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("collectionClone");
    return null;
}
exports.collectionClone = collectionClone;
/**
 * @param columnListString
 * @return any
 */
function sort() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sort");
    return null;
}
exports.sort = sort;
// end Type
// Type: BusinessComponentCollection
/**
 * @param primaryKeyAtt
 * @return any
 */
function bcCollectionGetByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionGetByKey");
    return null;
}
exports.bcCollectionGetByKey = bcCollectionGetByKey;
/**
 * @param primaryKeyAtt
 * @return boolean
 */
function bcCollectionRemoveByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionRemoveByKey");
    return null;
}
exports.bcCollectionRemoveByKey = bcCollectionRemoveByKey;
/**
 * @return boolean
 */
function bcCollectionUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionUpdate");
    return null;
}
exports.bcCollectionUpdate = bcCollectionUpdate;
/**
 * @return boolean
 */
function bcCollectionInsert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionInsert");
    return null;
}
exports.bcCollectionInsert = bcCollectionInsert;
/**
 * @return boolean
 */
function bcCollectionInsertOrUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionInsertOrUpdate");
    return null;
}
exports.bcCollectionInsertOrUpdate = bcCollectionInsertOrUpdate;
/**
 * @return boolean
 */
function bcCollectionDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcCollectionDelete");
    return null;
}
exports.bcCollectionDelete = bcCollectionDelete;
// end Type
// Type: BusinessComponentLinesCollection
/**
 * @param primaryKeyAtt
 * @return any
 */
function getByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getByKey");
    return null;
}
exports.getByKey = getByKey;
/**
 * @param primaryKeyAtt
 * @return boolean
 */
function removeByKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeByKey");
    return null;
}
exports.removeByKey = removeByKey;
// end Type
// Type: HTMLBODY
// end Type
// Type: File
/**
 * @return any
 */
function fileDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileDelete");
    return null;
}
exports.fileDelete = fileDelete;
/**
 * @return boolean
 */
function fileExists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileExists");
    return null;
}
exports.fileExists = fileExists;
/**
 * @param name
 * @return any
 */
function fileRename() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileRename");
    return null;
}
exports.fileRename = fileRename;
/**
 * @param name
 * @return any
 */
function copy() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("copy");
    return null;
}
exports.copy = copy;
/**
 * @return any
 */
function fileGetName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileGetName");
    return null;
}
exports.fileGetName = fileGetName;
/**
 * @return any
 */
function fileGetAbsoluteName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileGetAbsoluteName");
    return null;
}
exports.fileGetAbsoluteName = fileGetAbsoluteName;
/**
 * @return any
 */
function getURI() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getURI");
    return null;
}
exports.getURI = getURI;
/**
 * @return number
 */
function getLength() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLength");
    return null;
}
exports.getLength = getLength;
/**
 * @return Date
 */
function getLastModified() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastModified");
    return null;
}
exports.getLastModified = getLastModified;
/**
 * @return any
 */
function getPath() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPath");
    return null;
}
exports.getPath = getPath;
/**
 * @param encoding
 * @return any
 */
function fileOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileOpen");
    return null;
}
exports.fileOpen = fileOpen;
/**
 * @param encoding
 * @return any
 */
function openWrite() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openWrite");
    return null;
}
exports.openWrite = openWrite;
/**
 * @param encoding
 * @return any
 */
function openRead() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openRead");
    return null;
}
exports.openRead = openRead;
/**
 * @return any
 */
function fileClose() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileClose");
    return null;
}
exports.fileClose = fileClose;
/**
 * @return any
 */
function readLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readLine");
    return null;
}
exports.readLine = readLine;
/**
 * @param encoding
 * @return any
 */
function readAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readAllText");
    return null;
}
exports.readAllText = readAllText;
/**
 * @param encoding
 * @return any
 */
function readAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("readAllLines");
    return null;
}
exports.readAllLines = readAllLines;
/**
 * @param value
 * @return any
 */
function writeLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeLine");
    return null;
}
exports.writeLine = writeLine;
/**
 * @param value
 * @param encoding
 * @return any
 */
function writeAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeAllText");
    return null;
}
exports.writeAllText = writeAllText;
/**
 * @param value
 * @param encoding
 * @return any
 */
function writeAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("writeAllLines");
    return null;
}
exports.writeAllLines = writeAllLines;
/**
 * @param value
 * @param encoding
 * @return any
 */
function appendAllText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("appendAllText");
    return null;
}
exports.appendAllText = appendAllText;
/**
 * @param vale
 * @param encoding
 * @return any
 */
function appendAllLines() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("appendAllLines");
    return null;
}
exports.appendAllLines = appendAllLines;
/**
 * @return any
 */
function fileCreate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileCreate");
    return null;
}
exports.fileCreate = fileCreate;
/**
 * @param xSLTFile
 * @return any
 */
function xSLTApply() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("xSLTApply");
    return null;
}
exports.xSLTApply = xSLTApply;
/**
 * @return any
 */
function fileHtmlClean() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileHtmlClean");
    return null;
}
exports.fileHtmlClean = fileHtmlClean;
/**
 * @param base64String
 * @return boolean
 */
function fromBase64String() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromBase64String");
    return null;
}
exports.fromBase64String = fromBase64String;
// end Type
// Type: FileCollection
/**
 * @param i
 * @return any
 */
function fileCollectionItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fileCollectionItem");
    return null;
}
exports.fileCollectionItem = fileCollectionItem;
// end Type
// Type: Directory
/**
 * @return any
 */
function create() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("create");
    return null;
}
exports.create = create;
/**
 * @return any
 */
function dirDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dirDelete");
    return null;
}
exports.dirDelete = dirDelete;
/**
 * @return boolean
 */
function dirExists() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("dirExists");
    return null;
}
exports.dirExists = dirExists;
/**
 * @param name
 * @return any
 */
function rename() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("rename");
    return null;
}
exports.rename = rename;
/**
 * @return any
 */
function getName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getName");
    return null;
}
exports.getName = getName;
/**
 * @return any
 */
function getAbsoluteName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getAbsoluteName");
    return null;
}
exports.getAbsoluteName = getAbsoluteName;
/**
 * @param filter
 * @return any
 */
function getFiles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getFiles");
    return null;
}
exports.getFiles = getFiles;
/**
 * @return any
 */
function getDirectories() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDirectories");
    return null;
}
exports.getDirectories = getDirectories;
// end Type
// Type: DirectoryCollection
/**
 * @param i
 * @return any
 */
function item() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("item");
    return null;
}
exports.item = item;
// end Type
// Type: Properties
/**
 * @param attributeName
 * @param attributeValue
 * @return any
 */
function propSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propSet");
    return null;
}
exports.propSet = propSet;
/**
 * @param attributeName
 * @return any
 */
function propGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propGet");
    return null;
}
exports.propGet = propGet;
/**
 * @param attributeName
 * @return any
 */
function propRemove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propRemove");
    return null;
}
exports.propRemove = propRemove;
/**
 * @return any
 */
function propClear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propClear");
    return null;
}
exports.propClear = propClear;
/**
 * @return any
 */
function propToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propToJson");
    return null;
}
exports.propToJson = propToJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function propFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("propFromJson");
    return null;
}
exports.propFromJson = propFromJson;
// end Type
// Type: Property
// end Type
// Type: Expression
/**
 * @return number
 */
function evaluate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("evaluate");
    return null;
}
exports.evaluate = evaluate;
// end Type
// Type: RegEx
/**
 * @return number
 */
function getLastErrCode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastErrCode");
    return null;
}
exports.getLastErrCode = getLastErrCode;
/**
 * @return any
 */
function getLastErrDescription() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getLastErrDescription");
    return null;
}
exports.getLastErrDescription = getLastErrDescription;
// end Type
// Type: TextSearch
/**
 * @param content
 * @param itemsPerPage
 * @param pageNumber
 * @return any
 */
function textSearchfind() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchfind");
    return null;
}
exports.textSearchfind = textSearchfind;
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
function textSearchadd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchadd");
    return null;
}
exports.textSearchadd = textSearchadd;
/**
 * @param variableBCorText
 * @param info
 * @return boolean
 */
function textSearchupdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchupdate");
    return null;
}
exports.textSearchupdate = textSearchupdate;
/**
 * @param variable
 * @return boolean
 */
function textSearchdelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("textSearchdelete");
    return null;
}
exports.textSearchdelete = textSearchdelete;
/**
 * @return boolean
 */
function buildDictionary() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("buildDictionary");
    return null;
}
exports.buildDictionary = buildDictionary;
/**
 * @param text
 * @return any
 */
function checkSpell() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("checkSpell");
    return null;
}
exports.checkSpell = checkSpell;
/**
 * @return number
 */
function reindexAll() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("reindexAll");
    return null;
}
exports.reindexAll = reindexAll;
/**
 * @param variableBCorText
 * @param query
 * @param textType
 * @param preTag
 * @param postTag
 * @param fragmentSize
 * @param maxNumFragments
 * @return any
 */
function hTMLPreview() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hTMLPreview");
    return null;
}
exports.hTMLPreview = hTMLPreview;
// end Type
// Type: Window
/**
 * @return any
 */
function windowOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("windowOpen");
    return null;
}
exports.windowOpen = windowOpen;
// end Type
// Type: Video
/**
 * @param videoURL
 * @return any
 */
function videoFromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("videoFromURL");
    return null;
}
exports.videoFromURL = videoFromURL;
// end Type
// Type: Audio
/**
 * @param videoURL
 * @return any
 */
function fromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromURL");
    return null;
}
exports.fromURL = fromURL;
// end Type
// Type: BinaryFile
/**
 * @param fileURL
 * @return any
 */
function binaryFileFromURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("binaryFileFromURL");
    return null;
}
exports.binaryFileFromURL = binaryFileFromURL;
// end Type
// Type: CallOptions
// end Type
// Type: CryptoHash
/**
 * @param text
 * @param key
 * @return any
 */
function compute() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("compute");
    return null;
}
exports.compute = compute;
// end Type
// Type: Geography
/**
 * @return any
 */
function geographyToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToString");
    return null;
}
exports.geographyToString = geographyToString;
/**
 * @return any
 */
function geographyToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToGeoJson");
    return null;
}
exports.geographyToGeoJson = geographyToGeoJson;
/**
 * @return any
 */
function geographyToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyToWkt");
    return null;
}
exports.geographyToWkt = geographyToWkt;
/**
 * @return any
 */
function toGeoPoint() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoPoint");
    return null;
}
exports.toGeoPoint = toGeoPoint;
/**
 * @return any
 */
function toGeoLine() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoLine");
    return null;
}
exports.toGeoLine = toGeoLine;
/**
 * @return any
 */
function toGeoPolygon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toGeoPolygon");
    return null;
}
exports.toGeoPolygon = toGeoPolygon;
/**
 * @return boolean
 */
function geographyIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsNull");
    return null;
}
exports.geographyIsNull = geographyIsNull;
/**
 * @return any
 */
function geographySetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographySetNull");
    return null;
}
exports.geographySetNull = geographySetNull;
/**
 * @return boolean
 */
function geographyIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsEmpty");
    return null;
}
exports.geographyIsEmpty = geographyIsEmpty;
/**
 * @return any
 */
function geographySetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographySetEmpty");
    return null;
}
exports.geographySetEmpty = geographySetEmpty;
/**
 * @return boolean
 */
function geographyIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geographyIsNullOrEmpty");
    return null;
}
exports.geographyIsNullOrEmpty = geographyIsNullOrEmpty;
// end Type
// Type: GeoPoint
/**
 * @return any
 */
function geopointToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToGeography");
    return null;
}
exports.geopointToGeography = geopointToGeography;
/**
 * @return any
 */
function geopointToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToString");
    return null;
}
exports.geopointToString = geopointToString;
/**
 * @return any
 */
function geopointToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointToGeoJson");
    return null;
}
exports.geopointToGeoJson = geopointToGeoJson;
/**
 * @return any
 */
function toWKT() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toWKT");
    return null;
}
exports.toWKT = toWKT;
/**
 * @return boolean
 */
function geopointIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsNull");
    return null;
}
exports.geopointIsNull = geopointIsNull;
/**
 * @return any
 */
function geopointSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointSetNull");
    return null;
}
exports.geopointSetNull = geopointSetNull;
/**
 * @return boolean
 */
function geopointIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsEmpty");
    return null;
}
exports.geopointIsEmpty = geopointIsEmpty;
/**
 * @return any
 */
function geopointSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointSetEmpty");
    return null;
}
exports.geopointSetEmpty = geopointSetEmpty;
/**
 * @return boolean
 */
function geopointIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopointIsNullOrEmpty");
    return null;
}
exports.geopointIsNullOrEmpty = geopointIsNullOrEmpty;
/**
 * @param latitude
 * @param longitude
 * @return any
 */
function newGeopoint() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("newGeopoint");
    return null;
}
exports.newGeopoint = newGeopoint;
// end Type
// Type: GeoLine
/**
 * @return any
 */
function geolineToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToGeography");
    return null;
}
exports.geolineToGeography = geolineToGeography;
/**
 * @return any
 */
function geolineToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToString");
    return null;
}
exports.geolineToString = geolineToString;
/**
 * @return any
 */
function geolineToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToGeoJson");
    return null;
}
exports.geolineToGeoJson = geolineToGeoJson;
/**
 * @return any
 */
function geolineToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineToWkt");
    return null;
}
exports.geolineToWkt = geolineToWkt;
/**
 * @return boolean
 */
function geolineIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsNull");
    return null;
}
exports.geolineIsNull = geolineIsNull;
/**
 * @return any
 */
function geolineSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineSetNull");
    return null;
}
exports.geolineSetNull = geolineSetNull;
/**
 * @return boolean
 */
function geolineIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsEmpty");
    return null;
}
exports.geolineIsEmpty = geolineIsEmpty;
/**
 * @return any
 */
function geolineSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineSetEmpty");
    return null;
}
exports.geolineSetEmpty = geolineSetEmpty;
/**
 * @return boolean
 */
function geolineIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geolineIsNullOrEmpty");
    return null;
}
exports.geolineIsNullOrEmpty = geolineIsNullOrEmpty;
// end Type
// Type: GeoPolygon
/**
 * @return any
 */
function geopolygonToGeography() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToGeography");
    return null;
}
exports.geopolygonToGeography = geopolygonToGeography;
/**
 * @return any
 */
function geopolygonToString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToString");
    return null;
}
exports.geopolygonToString = geopolygonToString;
/**
 * @return any
 */
function geopolygonToGeoJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToGeoJson");
    return null;
}
exports.geopolygonToGeoJson = geopolygonToGeoJson;
/**
 * @return any
 */
function geopolygonToWkt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonToWkt");
    return null;
}
exports.geopolygonToWkt = geopolygonToWkt;
/**
 * @return boolean
 */
function geopolygonIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsNull");
    return null;
}
exports.geopolygonIsNull = geopolygonIsNull;
/**
 * @return any
 */
function geopolygonSetNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonSetNull");
    return null;
}
exports.geopolygonSetNull = geopolygonSetNull;
/**
 * @return boolean
 */
function geopolygonIsEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsEmpty");
    return null;
}
exports.geopolygonIsEmpty = geopolygonIsEmpty;
/**
 * @return any
 */
function geopolygonSetEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonSetEmpty");
    return null;
}
exports.geopolygonSetEmpty = geopolygonSetEmpty;
/**
 * @return boolean
 */
function geopolygonIsNullOrEmpty() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("geopolygonIsNullOrEmpty");
    return null;
}
exports.geopolygonIsNullOrEmpty = geopolygonIsNullOrEmpty;
// end Type
// Type: WSAddressing
// end Type
// Type: WSAddressingEndPoint
// end Type
// Type: WSSecurity
// end Type
// Type: WSSignature
// end Type
// Type: WSEncryption
// end Type
// Type: WSSecurityKeyStore
// end Type
// Type: Cache
/**
 * @param name
 * @return any
 */
function getCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getCache");
    return null;
}
exports.getCache = getCache;
/**
 * @return any
 */
function clearAllCaches() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearAllCaches");
    return null;
}
exports.clearAllCaches = clearAllCaches;
/**
 * @param key
 * @param value
 * @param durationMinutes
 * @return any
 */
function cacheSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cacheSet");
    return null;
}
exports.cacheSet = cacheSet;
/**
 * @param key
 * @return any
 */
function cacheGet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cacheGet");
    return null;
}
exports.cacheGet = cacheGet;
/**
 * @param key
 * @return boolean
 */
function contains() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("contains");
    return null;
}
exports.contains = contains;
/**
 * @param key
 * @return any
 */
function remove() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remove");
    return null;
}
exports.remove = remove;
/**
 * @return any
 */
function clear() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clear");
    return null;
}
exports.clear = clear;
// end Type
// Type: StorageProvider
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param expirationMinutes
 * @param outMessages
 * @return boolean
 */
function getPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPrivate");
    return null;
}
exports.getPrivate = getPrivate;
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
function uploadPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("uploadPrivate");
    return null;
}
exports.uploadPrivate = uploadPrivate;
/**
 * @param storageObjectFullName
 * @param outExternalFile
 * @param outMessages
 * @return boolean
 */
function get() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("get");
    return null;
}
exports.get = get;
/**
 * @param fileFullPath
 * @param storageObjectFullName
 * @param outUploadedFile
 * @param outMessages
 * @return boolean
 */
function upload() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("upload");
    return null;
}
exports.upload = upload;
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
function download() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("download");
    return null;
}
exports.download = download;
/**
 * @param storageObjectFullName
 * @param outLocalFile
 * @param outMessages
 * @return boolean
 */
function downloadPrivate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("downloadPrivate");
    return null;
}
exports.downloadPrivate = downloadPrivate;
/**
 * @param storageDirectoryFullName
 * @param outExternalDirectory
 * @param outMessages
 * @return boolean
 */
function getDirectory() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getDirectory");
    return null;
}
exports.getDirectory = getDirectory;
// end Type
// Type: ArrayPEM
// end Type
// Type: BusinessComponentLevel
// end Type
// Type: BusinessComponent
/**
 * @return any
 */
function check() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("check");
    return null;
}
exports.check = check;
/**
 * @return any
 */
function bcDelete() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcDelete");
    return null;
}
exports.bcDelete = bcDelete;
/**
 * @param primaryKeyAtt
 * @return any
 */
function load() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("load");
    return null;
}
exports.load = load;
/**
 * @return any
 */
function mode() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("mode");
    return null;
}
exports.mode = mode;
/**
 * @return any
 */
function bcSave() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcSave");
    return null;
}
exports.bcSave = bcSave;
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
function bcToXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcToXml");
    return null;
}
exports.bcToXml = bcToXml;
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
function bcFromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromXml");
    return null;
}
exports.bcFromXml = bcFromXml;
/**
 * @param xml
 * @param outMessages
 * @return boolean
 */
function bcFromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromXmlFile");
    return null;
}
exports.bcFromXmlFile = bcFromXmlFile;
/**
 * @param includeState
 * @return any
 */
function bcToJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcToJson");
    return null;
}
exports.bcToJson = bcToJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function bcFromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromJson");
    return null;
}
exports.bcFromJson = bcFromJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function bcFromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcFromJsonFile");
    return null;
}
exports.bcFromJsonFile = bcFromJsonFile;
/**
 * @return boolean
 */
function bcUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcUpdate");
    return null;
}
exports.bcUpdate = bcUpdate;
/**
 * @return boolean
 */
function insert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("insert");
    return null;
}
exports.insert = insert;
/**
 * @return boolean
 */
function insertOrUpdate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("insertOrUpdate");
    return null;
}
exports.insertOrUpdate = insertOrUpdate;
/**
 * @return boolean
 */
function success() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("success");
    return null;
}
exports.success = success;
/**
 * @return boolean
 */
function fail() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fail");
    return null;
}
exports.fail = fail;
/**
 * @return any
 */
function getMessages() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getMessages");
    return null;
}
exports.getMessages = getMessages;
/**
 * @return any
 */
function bcClone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcClone");
    return null;
}
exports.bcClone = bcClone;
/**
 * @param name
 * @return any
 */
function createBC() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createBC");
    return null;
}
exports.createBC = createBC;
/**
 * @param name
 * @return any
 */
function createCollection() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createCollection");
    return null;
}
exports.createCollection = createCollection;
/**
 * @param name
 * @return any
 */
function bcGetValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("bcGetValue");
    return null;
}
exports.bcGetValue = bcGetValue;
/**
 * @param name
 * @param value
 * @return any
 */
function setValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setValue");
    return null;
}
exports.setValue = setValue;
/**
 * @return any
 */
function getMetadata() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getMetadata");
    return null;
}
exports.getMetadata = getMetadata;
// end Type
// Type: SDT
/**
 * @param includeHeader
 * @param includeState
 * @return any
 */
function toXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toXml");
    return null;
}
exports.toXml = toXml;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function fromXml() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromXml");
    return null;
}
exports.fromXml = fromXml;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function fromXmlFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromXmlFile");
    return null;
}
exports.fromXmlFile = fromXmlFile;
/**
 * @return any
 */
function clone() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clone");
    return null;
}
exports.clone = clone;
/**
 * @param includeState
 * @return any
 */
function toJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("toJson");
    return null;
}
exports.toJson = toJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function fromJson() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromJson");
    return null;
}
exports.fromJson = fromJson;
/**
 * @param source
 * @param outMessages
 * @return boolean
 */
function fromJsonFile() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fromJsonFile");
    return null;
}
exports.fromJsonFile = fromJsonFile;
/**
 * @return boolean
 */
function sdtIsNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sdtIsNull");
    return null;
}
exports.sdtIsNull = sdtIsNull;
/**
 * @return any
 */
function setNull() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setNull");
    return null;
}
exports.setNull = setNull;
// end Type
// Type: SDTItem
/**
 * @return any
 */
function sdtItemToFormattedString() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sdtItemToFormattedString");
    return null;
}
exports.sdtItemToFormattedString = sdtItemToFormattedString;
// end Type
// Type: Iterator
/**
 * @return any
 */
function first() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("first");
    return null;
}
exports.first = first;
/**
 * @return any
 */
function next() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("next");
    return null;
}
exports.next = next;
/**
 * @return boolean
 */
function eof() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("eof");
    return null;
}
exports.eof = eof;
// end Type
// Type: 
// end Type
// Type: Void
// end Type
// Type: Timezones
// end Type
// Type: Short
// end Type
// Type: Object
// end Type
// Type: Messages
// end Type
// Type: Int
// end Type
// Type: GxControlFrame
// end Type
// Type: CallEffect
// end Type
// Type: CallType
// end Type
// Type: TargetSize
// end Type
// Type: DipOrPercentage
// end Type
// Type: GeneXusCommonUIProgress
/**
 * @return any
 */
function show() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("show");
    return null;
}
exports.show = show;
/**
 * @param title
 * @return any
 */
function showWithTitle() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("showWithTitle");
    return null;
}
exports.showWithTitle = showWithTitle;
/**
 * @param title
 * @param description
 * @return any
 */
function showWithTitleAndDescription() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("showWithTitleAndDescription");
    return null;
}
exports.showWithTitleAndDescription = showWithTitleAndDescription;
/**
 * @return any
 */
function hide() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hide");
    return null;
}
exports.hide = hide;
// end Type
// Type: GeneXusCommonUINavigation
// end Type
// Type: GeneXusCommonConfigurationConfigurationManager
/**
 * @param propName
 * @param fileName
 * @return any
 */
function getValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getValue");
    return null;
}
exports.getValue = getValue;
/**
 * @param propName
 * @param fileName
 * @return boolean
 */
function hasValue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("hasValue");
    return null;
}
exports.hasValue = hasValue;
// end Type
// Type: GeneXusCommonClipboard
/**
 * @param data
 * @return any
 */
function setText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setText");
    return null;
}
exports.setText = setText;
/**
 * @return any
 */
function getText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getText");
    return null;
}
exports.getText = getText;
// end Type
// Type: GeneXusCommonAnalytics
/**
 * @param viewName
 * @return any
 */
function trackView() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackView");
    return null;
}
exports.trackView = trackView;
/**
 * @param category
 * @param action
 * @param label
 * @param value
 * @return any
 */
function trackEvent() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackEvent");
    return null;
}
exports.trackEvent = trackEvent;
/**
 * @param purchaseInfo
 * @return any
 */
function trackPurchase() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("trackPurchase");
    return null;
}
exports.trackPurchase = trackPurchase;
/**
 * @param userId
 * @return any
 */
function setAnalyticsUserId() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setAnalyticsUserId");
    return null;
}
exports.setAnalyticsUserId = setAnalyticsUserId;
// end Type
var GeneXusCommonGeolocation = /** @class */ (function () {
    function GeneXusCommonGeolocation() {
    }
    /**
     * Indicates wether the application has been given permission to use location services
     * @return boolean
     */
    GeneXusCommonGeolocation.authorized = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("authorized");
        return null;
    };
    /**
     * Indicates wether location services are enable in the device
     * @return boolean
     */
    GeneXusCommonGeolocation.serviceEnabled = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("serviceEnabled");
        return null;
    };
    /**
     * Starts generating tracking information
     * @param changesInterval
     * @param distance
     * @param action
     * @param actionTimeInterval
     * @param accuracy
     * @return any
     */
    GeneXusCommonGeolocation.startTracking = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("startTracking");
        return null;
    };
    /**
     * Stops the generation of tracking information
     * @return any
     */
    GeneXusCommonGeolocation.endTracking = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("endTracking");
        return null;
    };
    /**
     * Returns a collection of location information generated by the tracking methods
     * @param startTime
     * @return any
     */
    GeneXusCommonGeolocation.getLocationHistory = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLocationHistory");
        return null;
    };
    /**
     * Removes all previous location information generated by the tracking methods
     * @return any
     */
    GeneXusCommonGeolocation.clearLocationHistory = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("clearLocationHistory");
        return null;
    };
    /**
     * Returns the latitude of the given location
     * @param location
     * @return number
     */
    GeneXusCommonGeolocation.getLatitude = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLatitude");
        return null;
    };
    /**
     * Returns the longitude of the given location
     * @param location
     * @return number
     */
    GeneXusCommonGeolocation.getLongitude = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getLongitude");
        return null;
    };
    /**
     * Returns the distance between the two locations given
     * @param fromLocation
     * @param toLocation
     * @return number
     */
    GeneXusCommonGeolocation.getDistance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getDistance");
        return null;
    };
    /**
     * Returns a collection of addresses for the given location
     * @param location
     * @return any
     */
    GeneXusCommonGeolocation.getAddress = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getAddress");
        return null;
    };
    /**
     * @param proximityAlerts
     * @return boolean
     */
    GeneXusCommonGeolocation.setProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("setProximityAlerts");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.getProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getProximityAlerts");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.getCurrentProximityAlert = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("getCurrentProximityAlert");
        return null;
    };
    /**
     * @return any
     */
    GeneXusCommonGeolocation.clearProximityAlerts = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("clearProximityAlerts");
        return null;
    };
    /**
     * @param geoLocationPickerParameters
     * @return any
     */
    GeneXusCommonGeolocation.pickLocation = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("pickLocation");
        return null;
    };
    Object.defineProperty(GeneXusCommonGeolocation, "authorizationStatus", {
        get: function () {
            return this.mauthorizationStatus;
        },
        enumerable: false,
        configurable: true
    });
    return GeneXusCommonGeolocation;
}());
exports.GeneXusCommonGeolocation = GeneXusCommonGeolocation;
// Type: GeneXusCommonServer
/**
 * @return any
 */
function invalidateCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("invalidateCache");
    return null;
}
exports.invalidateCache = invalidateCache;
// end Type
// Type: GeneXusCommonRuntime
// end Type
// Type: GeneXusCommonMaps
/**
 * @param sourceLocation
 * @param destinationLocation
 * @param transportType
 * @param requestAlternateRoutes
 * @return any
 */
function calculateDirections() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("calculateDirections");
    return null;
}
exports.calculateDirections = calculateDirections;
// end Type
var GeneXusClientClientInformation = /** @class */ (function () {
    function GeneXusClientClientInformation() {
    }
    return GeneXusClientClientInformation;
}());
exports.GeneXusClientClientInformation = GeneXusClientClientInformation;
// Type: GeneXusClientClientStorage
/**
 * @param key
 * @param value
 * @return any
 */
function secureSet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("secureSet");
    return null;
}
exports.secureSet = secureSet;
// end Type
// Type: GeneXusSocialFacebook
/**
 * @param name
 * @param caption
 * @param description
 * @param link
 * @param picture
 * @return any
 */
function postToWall() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("postToWall");
    return null;
}
exports.postToWall = postToWall;
/**
 * @param link
 * @return any
 */
function shareLink() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareLink");
    return null;
}
exports.shareLink = shareLink;
/**
 * @param image
 * @return any
 */
function fbShareImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("fbShareImage");
    return null;
}
exports.fbShareImage = fbShareImage;
/**
 * @param video
 * @return any
 */
function shareVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareVideo");
    return null;
}
exports.shareVideo = shareVideo;
// end Type
// Type: GeneXusSocialTwitter
/**
 * @param text
 * @param image
 * @return any
 */
function tweet() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("tweet");
    return null;
}
exports.tweet = tweet;
/**
 * @param userName
 * @return any
 */
function follow() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("follow");
    return null;
}
exports.follow = follow;
// end Type
// Type: GeneXusSocialShare
/**
 * @param image
 * @param text
 * @param url
 * @param title
 * @return any
 */
function shareImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("shareImage");
    return null;
}
exports.shareImage = shareImage;
// end Type
// Type: GeneXusServerSocket
/**
 * @param sdtNotification
 * @return number
 */
function notify() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notify");
    return null;
}
exports.notify = notify;
/**
 * @param clientId
 * @param sdtNotification
 * @return number
 */
function notifyClient() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notifyClient");
    return null;
}
exports.notifyClient = notifyClient;
/**
 * @param sdtNotification
 * @return any
 */
function broadcast() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("broadcast");
    return null;
}
exports.broadcast = broadcast;
/**
 * @param clientId
 * @param message
 * @return number
 */
function notifyClientText() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("notifyClientText");
    return null;
}
exports.notifyClientText = notifyClientText;
// end Type
// Type: GeneXusSDSynchronizationSynchronization
// end Type
// Type: GeneXusSDiOSPermissions
/**
 * Requests permission to alert the user. Typically, you make this request if your app uses local or push notifications to alert the user to new information involving your app.
 * @return any
 */
function requestUserNotificationsPermission() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestUserNotificationsPermission");
    return null;
}
exports.requestUserNotificationsPermission = requestUserNotificationsPermission;
/**
 * Requests permission to use location services while the app is in the foreground.
 * @return any
 */
function requestLocationPermissionWhenInUse() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestLocationPermissionWhenInUse");
    return null;
}
exports.requestLocationPermissionWhenInUse = requestLocationPermissionWhenInUse;
/**
 * Requests permission to use location services whenever the app is running.
 * @return any
 */
function requestLocationPermissionAlways() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestLocationPermissionAlways");
    return null;
}
exports.requestLocationPermissionAlways = requestLocationPermissionAlways;
/**
 * Deprecated. Use RequestUserNotificationsPermission instead.
 * @return any
 */
function requestRemoteNotificationsPermission() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("requestRemoteNotificationsPermission");
    return null;
}
exports.requestRemoteNotificationsPermission = requestRemoteNotificationsPermission;
// end Type
// Type: GeneXusSDStoreStoreManager
/**
 * @param productIdentifiers
 * @return any
 */
function getProducts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getProducts");
    return null;
}
exports.getProducts = getProducts;
/**
 * @param productIdentifier
 * @param quantity
 * @return any
 */
function purchaseProduct() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("purchaseProduct");
    return null;
}
exports.purchaseProduct = purchaseProduct;
/**
 * @return any
 */
function getPurchases() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getPurchases");
    return null;
}
exports.getPurchases = getPurchases;
/**
 * @param productIdentifier
 * @return boolean
 */
function consumeProduct() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("consumeProduct");
    return null;
}
exports.consumeProduct = consumeProduct;
/**
 * Restore transactions (iOS only)
 * @return any
 */
function restorePurchases() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("restorePurchases");
    return null;
}
exports.restorePurchases = restorePurchases;
// end Type
// Type: GeneXusSDNotificationsNotificationsConfiguration
// end Type
// Type: GeneXusSDNotificationsRemoteNotificationResult
// end Type
// Type: GeneXusSDNotificationsNotificationParameters
/**
 * @param name
 * @param value
 * @return any
 */
function setParameter() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setParameter");
    return null;
}
exports.setParameter = setParameter;
// end Type
// Type: GeneXusSDNotificationsRemoteNotifications
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @return number
 */
function call() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("call");
    return null;
}
exports.call = call;
/**
 * @param applicationId
 * @param deviceToken
 * @param badgeNumber
 * @param sound
 * @return number
 */
function iOSSetBadge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetBadge");
    return null;
}
exports.iOSSetBadge = iOSSetBadge;
/**
 * @param applicationId
 * @param deviceToken
 * @return number
 */
function iOSResetBadge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSResetBadge");
    return null;
}
exports.iOSResetBadge = iOSResetBadge;
/**
 * @param applicationId
 * @param deviceType
 * @param deviceToken
 * @param alertMessage
 * @param actionName
 * @param parameters
 * @return any
 */
function callAction() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("callAction");
    return null;
}
exports.callAction = callAction;
/**
 * @param applicationId
 * @return number
 */
function openSession() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("openSession");
    return null;
}
exports.openSession = openSession;
/**
 * @param remoteNotification
 * @return any
 */
function remoteNotificationAdd() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("remoteNotificationAdd");
    return null;
}
exports.remoteNotificationAdd = remoteNotificationAdd;
/**
 * @return any
 */
function send() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("send");
    return null;
}
exports.send = send;
/**
 * @param applicationId
 * @param configuration
 * @return any
 */
function setConfiguration() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setConfiguration");
    return null;
}
exports.setConfiguration = setConfiguration;
// end Type
// Type: GeneXusSDNotificationsLocalNotifications
/**
 * @param alerts
 * @return number
 */
function createAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("createAlerts");
    return null;
}
exports.createAlerts = createAlerts;
/**
 * @return any
 */
function listAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("listAlerts");
    return null;
}
exports.listAlerts = listAlerts;
/**
 * @param alerts
 * @return number
 */
function removeAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeAlerts");
    return null;
}
exports.removeAlerts = removeAlerts;
/**
 * @return number
 */
function removeAllAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeAllAlerts");
    return null;
}
exports.removeAllAlerts = removeAllAlerts;
// end Type
// Type: GeneXusSDMediaCamera
// end Type
// Type: GeneXusSDMediaPhotoLibrary
/**
 * @param image
 * @return any
 */
function savePhoto() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("savePhoto");
    return null;
}
exports.savePhoto = savePhoto;
/**
 * @param video
 * @return any
 */
function saveVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("saveVideo");
    return null;
}
exports.saveVideo = saveVideo;
/**
 * @return any
 */
function chooseImage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseImage");
    return null;
}
exports.chooseImage = chooseImage;
/**
 * @return any
 */
function chooseVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseVideo");
    return null;
}
exports.chooseVideo = chooseVideo;
/**
 * @return any
 */
function chooseImages() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("chooseImages");
    return null;
}
exports.chooseImages = chooseImages;
// end Type
// Type: GeneXusSDMediaAudio
/**
 * Plays the given audio with the specified category
 * @param audio
 * @param category
 * @return any
 */
function play() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("play");
    return null;
}
exports.play = play;
/**
 * Plays the given audio in background, keeps playing while the application is in background
 * @param audio
 * @param description
 * @return any
 */
function playBackground() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playBackground");
    return null;
}
exports.playBackground = playBackground;
/**
 * Stops the audio playing in all categories
 * @param category
 * @return any
 */
function audioStop() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("audioStop");
    return null;
}
exports.audioStop = audioStop;
/**
 * Returns whether there is audio playing in any category
 * @param category
 * @return boolean
 */
function isPlaying() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("isPlaying");
    return null;
}
exports.isPlaying = isPlaying;
/**
 * Returns the current audio queue.
 * @return any
 */
function getQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getQueue");
    return null;
}
exports.getQueue = getQueue;
/**
 * Returns the state of the current audio queue (including the position in the queue and inside the current playing item, if any).
 * @return any
 */
function getQueueState() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getQueueState");
    return null;
}
exports.getQueueState = getQueueState;
/**
 * Sets the current audio queue. Stops current background playback, if any.
 * @param queue
 * @return any
 */
function setQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueue");
    return null;
}
exports.setQueue = setQueue;
/**
 * Starts or resumes playback of the current audio queue.
 * @return any
 */
function playQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playQueue");
    return null;
}
exports.playQueue = playQueue;
/**
 * Pauses playback of the current audio queue.
 * @return any
 */
function pauseQueue() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("pauseQueue");
    return null;
}
exports.pauseQueue = pauseQueue;
/**
 * Sets the current item in the media queue, given its media id.
 * @param mediaId
 * @return any
 */
function setQueueCurrentItem() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueueCurrentItem");
    return null;
}
exports.setQueueCurrentItem = setQueueCurrentItem;
/**
 * Sets the current item in the media queue, given its index.
 * @param index
 * @return any
 */
function setQueueCurrentIndex() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setQueueCurrentIndex");
    return null;
}
exports.setQueueCurrentIndex = setQueueCurrentIndex;
/**
 * Allows configuring the audio player UI settings
 * @param settings
 * @return any
 */
function setPlayerSettings() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setPlayerSettings");
    return null;
}
exports.setPlayerSettings = setPlayerSettings;
/**
 * @param show
 * @return any
 */
function iOSSetShowsMiniPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetShowsMiniPlayer");
    return null;
}
exports.iOSSetShowsMiniPlayer = iOSSetShowsMiniPlayer;
/**
 * @return any
 */
function iOSDisplayFullScreenPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSDisplayFullScreenPlayer");
    return null;
}
exports.iOSDisplayFullScreenPlayer = iOSDisplayFullScreenPlayer;
/**
 * @return any
 */
function iOSDismissFullScreenPlayer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSDismissFullScreenPlayer");
    return null;
}
exports.iOSDismissFullScreenPlayer = iOSDismissFullScreenPlayer;
// end Type
// Type: GeneXusSDMediaAudioRecorder
/**
 * Starts a recording session. Returns True if the operation was successful, False otherwise
 * @return boolean
 */
function start() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("start");
    return null;
}
exports.start = start;
/**
 * Stops the recording session and returns the URL of the recorder file.
 * @return any
 */
function stop() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stop");
    return null;
}
exports.stop = stop;
// end Type
// Type: GeneXusSDActions
/**
 * Call this action to execute the standard batch login against the OAuth server.
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
function login() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("login");
    return null;
}
exports.login = login;
/**
 * Call this action to execute the batch login against the OAuth server for a External login type.
 * @param type
 * @param user
 * @param password
 * @param additionalParameters
 * @return boolean
 */
function loginExternal() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("loginExternal");
    return null;
}
exports.loginExternal = loginExternal;
/**
 * Call this action to execute the standard logout against the OAuth server.
 * @return any
 */
function logout() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("logout");
    return null;
}
exports.logout = logout;
/**
 * Returns to the main object of the application, clearing the current call stack.
 * @return any
 */
function goHome() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("goHome");
    return null;
}
exports.goHome = goHome;
/**
 * Returns to the object specified in the parameter. If it is present more than once in the call stack, it will return to the most recent instance.
 * @param objectName
 * @return any
 */
function returnTo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("returnTo");
    return null;
}
exports.returnTo = returnTo;
/**
 * Call this action to execute the standard save in the edit form in the device.
 * @return any
 */
function save() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("save");
    return null;
}
exports.save = save;
/**
 * Call this action to execute the standard cancel in the edit form in the device.
 * @return any
 */
function cancel() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("cancel");
    return null;
}
exports.cancel = cancel;
/**
 * Call this action to execute the standard delete in the edit form in the device.
 * @return any
 */
function deleteAction() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("deleteAction");
    return null;
}
exports.deleteAction = deleteAction;
/**
 * Takes an application screenshot for further use like sharing, save in library, etc.
 * @return any
 */
function takeApplicationScreenshot() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("takeApplicationScreenshot");
    return null;
}
exports.takeApplicationScreenshot = takeApplicationScreenshot;
// end Type
// Type: GeneXusSDContacts
/**
 * Adds a contact to the device&#x27;s Address Book
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param companyName
 * @param photo
 * @param message
 * @return boolean
 */
function addContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addContact");
    return null;
}
exports.addContact = addContact;
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @param message
 * @return boolean
 */
function removeContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeContact");
    return null;
}
exports.removeContact = removeContact;
/**
 * @param firstName
 * @param lastName
 * @param eMail
 * @param phone
 * @return any
 */
function viewContact() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("viewContact");
    return null;
}
exports.viewContact = viewContact;
/**
 * Returns a collection of all the contacts in the device&#x27;s Address Book
 * @return any
 */
function getAllContacts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getAllContacts");
    return null;
}
exports.getAllContacts = getAllContacts;
// end Type
// Type: GeneXusSDCalendar
// end Type
// Type: GeneXusSDInterop
/**
 * @param message
 * @param to
 * @return any
 */
function sendMessage() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendMessage");
    return null;
}
exports.sendMessage = sendMessage;
/**
 * @param video
 * @return any
 */
function playVideo() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playVideo");
    return null;
}
exports.playVideo = playVideo;
/**
 * @param audio
 * @return any
 */
function playAudio() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("playAudio");
    return null;
}
exports.playAudio = playAudio;
/**
 * @param to
 * @param cc
 * @param bcc
 * @param subject
 * @param message
 * @return any
 */
function sendEmailAdvanced() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendEmailAdvanced");
    return null;
}
exports.sendEmailAdvanced = sendEmailAdvanced;
/**
 * @param to
 * @param message
 * @return any
 */
function sendSMS() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("sendSMS");
    return null;
}
exports.sendSMS = sendSMS;
/**
 * @return any
 */
function clearCache() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearCache");
    return null;
}
exports.clearCache = clearCache;
/**
 * Deprecated: use Interop.SetBadgeNumber instead
 * @param num
 * @return any
 */
function iOSSetBadgeNumber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetBadgeNumber");
    return null;
}
exports.iOSSetBadgeNumber = iOSSetBadgeNumber;
/**
 * @param num
 * @return any
 */
function setBadgeNumber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("setBadgeNumber");
    return null;
}
exports.setBadgeNumber = setBadgeNumber;
/**
 * @param tabIndex
 * @return any
 */
function iOSSetSelectedTabIndex() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("iOSSetSelectedTabIndex");
    return null;
}
exports.iOSSetSelectedTabIndex = iOSSetSelectedTabIndex;
// end Type
// Type: GeneXusSDScanner
// end Type
var GeneXusSDNetwork = /** @class */ (function () {
    function GeneXusSDNetwork() {
    }
    /**
     * @param url
     * @return boolean
     */
    GeneXusSDNetwork.isServerAvailable = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("isServerAvailable");
        return null;
    };
    /**
     * @param url
     * @return any
     */
    GeneXusSDNetwork.type = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("type");
        return null;
    };
    /**
     * @param url
     * @return boolean
     */
    GeneXusSDNetwork.trafficBasedCost = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("trafficBasedCost");
        return null;
    };
    /**
     * If the property Dynamic Services URL is set to True, changes the URL at runtime.
     * @param url
     * @return any
     */
    GeneXusSDNetwork.setApplicationServerURL = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        notImplemented("setApplicationServerURL");
        return null;
    };
    return GeneXusSDNetwork;
}());
exports.GeneXusSDNetwork = GeneXusSDNetwork;
// Type: GeneXusSDBeacons
/**
 * Start monitoring the specified beacon region.
 * @param proximityAlert
 * @return boolean
 */
function addBeaconProximityAlert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addBeaconProximityAlert");
    return null;
}
exports.addBeaconProximityAlert = addBeaconProximityAlert;
/**
 * Start monitoring the specified beacon regions.
 * @param proximityAlerts
 * @return boolean
 */
function addBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("addBeaconProximityAlerts");
    return null;
}
exports.addBeaconProximityAlerts = addBeaconProximityAlerts;
/**
 * Retrieve a collection for the beacon regions that are currently being monitored.
 * @return any
 */
function getBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconProximityAlerts");
    return null;
}
exports.getBeaconProximityAlerts = getBeaconProximityAlerts;
/**
 * Removes the beacon region being monitored.
 * @param proximityAlertRegionId
 * @return any
 */
function removeBeaconProximityAlert() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("removeBeaconProximityAlert");
    return null;
}
exports.removeBeaconProximityAlert = removeBeaconProximityAlert;
/**
 * Removes all the beacon regions being monitored.
 * @return any
 */
function clearBeaconProximityAlerts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("clearBeaconProximityAlerts");
    return null;
}
exports.clearBeaconProximityAlerts = clearBeaconProximityAlerts;
/**
 * Retrieve the cached state of the specified region.
 * @param regionId
 * @return any
 */
function getBeaconRegionState() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconRegionState");
    return null;
}
exports.getBeaconRegionState = getBeaconRegionState;
/**
 * Starts the delivery of notifications for beacons in the specified region.
 * @param beaconRegion
 * @return boolean
 */
function startRangingBeaconRegion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("startRangingBeaconRegion");
    return null;
}
exports.startRangingBeaconRegion = startRangingBeaconRegion;
/**
 * Retrieve a collection for the beacon regions that are currently providing ranging.
 * @return any
 */
function getRangedBeaconRegions() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getRangedBeaconRegions");
    return null;
}
exports.getRangedBeaconRegions = getRangedBeaconRegions;
/**
 * Stops the delivery of notifications for the specified beacon region.
 * @param regionId
 * @return any
 */
function stopRangingBeaconRegion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stopRangingBeaconRegion");
    return null;
}
exports.stopRangingBeaconRegion = stopRangingBeaconRegion;
/**
 * Retrieve a collection for the beacons (sorted by proximity) currently in range for the given region.
 * @param regionId
 * @return any
 */
function getBeaconsInRange() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("getBeaconsInRange");
    return null;
}
exports.getBeaconsInRange = getBeaconsInRange;
/**
 * Advertises the current device as a beacon.
 * @param beaconInfo
 * @return boolean
 */
function startAsBeacon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("startAsBeacon");
    return null;
}
exports.startAsBeacon = startAsBeacon;
/**
 * Stops advertising the current device as a beacon.
 * @return boolean
 */
function stopAsBeacon() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("stopAsBeacon");
    return null;
}
exports.stopAsBeacon = stopAsBeacon;
// end Type
// Type: GeneXusSDSearch
// end Type
// Type: GeneXusSDDeepLink
// end Type
// Type: GeneXusSDWebBrowser
/**
 * Opens the give URL in the InApp Browser
 * @param url
 * @return any
 */
function webBrowserOpen() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("webBrowserOpen");
    return null;
}
exports.webBrowserOpen = webBrowserOpen;
/**
 * Closes the InApp Browser
 * @return any
 */
function close() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("close");
    return null;
}
exports.close = close;
// end Type
// Type: GeneXusSDDeviceAuthentication
/**
 * Returns True if the API can be used in the current device, False otherwise
 * @param method
 * @return boolean
 */
function isAvailable() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("isAvailable");
    return null;
}
exports.isAvailable = isAvailable;
/**
 * Performs the authentication step, using the method that corresponds for the current device.
 * @param method
 * @param title
 * @param usageDescription
 * @return boolean
 */
function authenticate() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("authenticate");
    return null;
}
exports.authenticate = authenticate;
// end Type
// Type: GeneXusSDAppLifecycle
// end Type
// Type: GeneXusSDCardScanner
/**
 * @return any
 */
function scanCard() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    notImplemented("scanCard");
    return null;
}
exports.scanCard = scanCard;
// end Type
// Type: BlobFile
// end Type
//# sourceMappingURL=not_implemented.js.map