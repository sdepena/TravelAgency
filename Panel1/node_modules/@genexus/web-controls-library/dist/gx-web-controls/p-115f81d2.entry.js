import{h as t,r as s,c as e,g as i}from"./p-b4b65ebe.js";let h=0;class n{constructor(t){this.component=t,this.options=[],this.selectId||this.component.readonly||(this.selectId=this.component.element.id?this.component.element.id+"__select":"gx-select-auto-id-"+h++)}updateOptions(t){this.options=t}getNativeInputId(){return this.component.readonly?null:this.selectId}getCssClasses(){const t=[];return t.push(this.component.readonly?"form-control-plaintext":"custom-select"),this.component.cssClass&&t.push(this.component.cssClass),t.join(" ")}getReadonlyTextContent(){const t=this.options.filter(t=>t.value===this.component.value);return t.length>0?t[0].innerText:""}getValueFromEvent(t){return t.target&&t.target.value}handleChange(t){this.component.value=this.getValueFromEvent(t),this.component.input.emit(t)}render(){if(this.component.readonly)return t("span",{class:this.getCssClasses()},this.getReadonlyTextContent());{let s;const e={"aria-disabled":this.component.disabled?"true":void 0,class:this.getCssClasses(),disabled:this.component.disabled,id:this.selectId,onChange:this.handleChange.bind(this),ref:t=>{t.value=this.component.value}};return this.component.suggest&&(s=this.selectId+"__datalist"),this.component.suggest?[t("gx-bootstrap",null),t("input",{list:s,disabled:this.component.disabled,placeholder:this.component.placeholder,value:this.component.value,onChange:this.handleChange.bind(this)}),t("datalist",{id:s},this.options.map(({innerText:s,selected:e,value:i,disabled:h})=>t("option",{disabled:h,selected:e,value:i},s)))]:[t("gx-bootstrap",null),t("select",Object.assign({},e),this.options.map(({innerText:s,selected:e,value:i,disabled:h})=>t("option",{disabled:h,selected:e,value:i},s)))]}}}const l=class{constructor(t){s(this,t),this.input=e(this,"input",7),this.options=[],this.invisibleMode="collapse",this.disabled=!1,this.renderer=new n(this)}getChildOptions(){return Array.from(this.element.querySelectorAll("gx-select-option")).map(t=>({disabled:t.disabled,innerText:t.innerText,selected:t.selected,value:t.value}))}updateOptions(t){this.options=t,this.renderer.updateOptions(t)}valueChanged(){const t=Array.from(this.element.querySelectorAll("gx-select-option"));t.forEach(t=>{t.selected=t.value===this.value}),this.updateOptions(t.map(t=>({disabled:t.disabled,innerText:t.innerText,selected:t.selected,value:t.value}))),this.didLoad&&this.input.emit({value:this.value})}onSelectOptionDidLoad(t){const s=t.target;this.value?s.selected=this.value===s.value:s.selected&&(this.value=s.value),this.updateOptions(this.getChildOptions())}onSelectOptionDidUnload(){this.updateOptions(this.getChildOptions())}onSelectOptionDisable(){this.updateOptions(this.getChildOptions())}onSelectOptionChange(){this.updateOptions(this.getChildOptions())}onSelectOptionSelect(t){this.options.forEach(s=>{s===t.target?s.value!==this.value&&(this.value=s.value):s.selected=!1})}async getNativeInputId(){return this.renderer.getNativeInputId()}componentDidLoad(){this.didLoad=!0}render(){return this.renderer.render()}get element(){return i(this)}static get watchers(){return{value:["valueChanged"]}}};export{l as gx_select}