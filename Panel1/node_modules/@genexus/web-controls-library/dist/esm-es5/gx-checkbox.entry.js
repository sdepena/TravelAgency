var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-10623738.js';
var autoCheckBoxId = 0;
var CheckBoxRender = /** @class */ (function () {
    function CheckBoxRender(component, handlers) {
        this.component = component;
        this.handleChange = handlers.handleChange;
    }
    CheckBoxRender.prototype.getNativeInputId = function () {
        return this.getNativeInput().id;
    };
    CheckBoxRender.prototype.getNativeInput = function () {
        return this.component.element.querySelector("[data-native-element]");
    };
    CheckBoxRender.prototype.getCssClasses = function () {
        var checkbox = this.component;
        var classList = [];
        classList.push("custom-control-input");
        if (checkbox.cssClass) {
            classList.push(checkbox.cssClass);
        }
        if (!checkbox.caption) {
            classList.push("position-static");
        }
        return classList.join(" ");
    };
    CheckBoxRender.prototype.getValueFromEvent = function (event) {
        return event.target && event.target.checked;
    };
    /**
     * Update the native input element when the value changes
     */
    CheckBoxRender.prototype.checkedChanged = function () {
        var inputEl = this.getNativeInput();
        if (inputEl && inputEl.checked !== this.component.checked) {
            inputEl.checked = this.component.checked;
        }
    };
    CheckBoxRender.prototype.render = function () {
        var checkbox = this.component;
        if (!this.inputId) {
            this.inputId = checkbox.element.id
                ? checkbox.element.id + "__checkbox"
                : "gx-checkbox-auto-id-" + autoCheckBoxId++;
        }
        var attris = {
            "aria-disabled": checkbox.disabled ? "true" : undefined,
            class: this.getCssClasses(),
            "data-native-element": "",
            disabled: checkbox.disabled,
            id: this.inputId,
            onInput: this.handleChange
        };
        var forAttris = {
            for: attris.id
        };
        return [
            h("gx-bootstrap", null),
            h("div", { class: "custom-control custom-checkbox" }, h("input", Object.assign({}, attris, { type: "checkbox", checked: checkbox.checked, value: checkbox.checked ? checkbox.checkedValue : checkbox.unCheckedValue })), h("label", Object.assign({ class: "custom-control-label" }, forAttris, { "aria-hidden": (!checkbox.caption).toString() }), checkbox.caption))
        ];
    };
    return CheckBoxRender;
}());
var checkboxCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-checkbox{display:-ms-flexbox;display:flex}gx-checkbox[hidden]{display:none !important}gx-checkbox[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}";
var CheckBox = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new CheckBoxRender(this, {
            handleChange: this.handleChange.bind(this)
        });
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    class_1.prototype.getNativeInputId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.renderer.getNativeInputId()];
            });
        });
    };
    class_1.prototype.checkedChanged = function () {
        this.renderer.checkedChanged();
    };
    class_1.prototype.componentWillLoad = function () {
        this.checked = this.value === this.checkedValue;
    };
    class_1.prototype.valueChanged = function () {
        this.checked = this.value === this.checkedValue;
    };
    class_1.prototype.handleChange = function (event) {
        event.stopPropagation();
        this.checked = this.renderer.getValueFromEvent(event);
        this.updateValue();
        this.input.emit(event);
    };
    class_1.prototype.updateValue = function () {
        this.value = this.checked ? this.checkedValue : this.unCheckedValue;
    };
    class_1.prototype.render = function () {
        return h(Host, null, this.renderer.render());
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "checked": ["checkedChanged"],
                "value": ["valueChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
CheckBox.style = checkboxCss;
export { CheckBox as gx_checkbox };
