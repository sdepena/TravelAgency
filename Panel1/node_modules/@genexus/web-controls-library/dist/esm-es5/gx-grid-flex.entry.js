var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';
import './highlightable-49b186e7.js';
import { G as GridBaseHelper } from './grid-base-bdf1a676.js';
var gridFlexCss = "@charset \"UTF-8\";.gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}.gx-grid-base{-ms-flex:1;flex:1}.gx-grid-base>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base>*>.scrollable-content{-ms-flex:1;flex:1}.gx-grid-base>.grid-empty-placeholder,.gx-grid-base>[slot=grid-empty-loading-placeholder]{display:none}.gx-grid-base>.grid-empty-placeholder[hidden],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base>.grid-empty-placeholder[hidden][invisible-mode=keep-space],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base>.grid-empty-placeholder>[slot=grid-content-empty]{-ms-flex:1;flex:1}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child{display:none}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;height:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base.gx-grid-empty>*>.scrollable-content,.gx-grid-base.gx-grid-empty .gx-grid-paging{display:none}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden]{display:none !important}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading>:first-child{display:none}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder]{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-align:center}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-row{position:relative}gx-grid-flex{--gx-grid-flex-wrap:nowrap;--gx-grid-flex-justify-content:flex-start;--gx-grid-flex-align-items:stretch;--gx-grid-flex-align-content:normal;display:-ms-flexbox;display:flex}gx-grid-flex[hidden]{display:none !important}gx-grid-flex[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>div{-ms-flex:1;flex:1}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller),gx-grid-flex>*>.scrollable-content{display:-ms-flexbox;display:flex;-ms-flex-direction:var(--gx-grid-flex-direction);flex-direction:var(--gx-grid-flex-direction);-ms-flex-wrap:var(--gx-grid-flex-wrap);flex-wrap:var(--gx-grid-flex-wrap);-ms-flex-pack:var(--gx-grid-flex-justify-content);justify-content:var(--gx-grid-flex-justify-content);-ms-flex-align:var(--gx-grid-flex-align-items);align-items:var(--gx-grid-flex-align-items);-ms-flex-line-pack:var(--gx-grid-flex-align-content);align-content:var(--gx-grid-flex-align-content)}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden],gx-grid-flex>*>.scrollable-content[hidden]{display:none !important}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],gx-grid-flex>*>.scrollable-content[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size]{min-width:calc( var(--gx-grid-css-viewport-width) * var(--gx-grid-item-relative-size) )}gx-grid-flex gx-grid-smart-cell{display:-ms-flexbox;display:flex}gx-grid-flex gx-grid-smart-cell[hidden]{display:none !important}gx-grid-flex gx-grid-smart-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex gx-grid-smart-cell>*{-ms-flex:1;flex:1}";
var GridFlex = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.gxInfiniteThresholdReached = createEvent(this, "gxInfiniteThresholdReached", 3);
        /**
         * This attribute defines if the control size will grow automatically,
         * to adjust to its content size.
         * If set to `false`, it won't grow automatically and it will show scrollbars
         * if the content overflows.
         */
        this.autoGrow = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
           Flexbox is (aside from optional wrapping) a single-direction layout concept.
          Think of flex items as primarily laying out either in horizontal rows or vertical columns.
         *
         * | Value        | Details                                                                                        |
         * | ------------ | ---------------------------------------------------------------------------------------------- |
         * | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                |
         * | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |
         */
        this.flexDirection = "row";
        /**
         * The threshold distance from the bottom
         * of the content to call the `infinite` output event when scrolled.
         * The threshold value can be either a percent, or
         * in pixels. For example, use the value of `10%` for the `infinite`
         * output event to get called when the user has scrolled 10%
         * from the bottom of the page. Use the value `100px` when the
         * scroll is within 100 pixels from the bottom of the page.
         */
        this.threshold = "150px";
    }
    /*
     * This method must be called after new grid data was fetched by the infinite scroller.
     */
    class_1.prototype.complete = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.element
                    .querySelector(':scope > [slot="grid-content"] gx-grid-infinite-scroll"')["complete"]();
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.ensureViewPort = function () {
        var elementStyle = this.element.style;
        elementStyle.setProperty("--gx-grid-css-viewport-width", this.element.parentElement.offsetWidth + "px");
        elementStyle.setProperty("--gx-grid-css-viewport-height", this.element.parentElement.offsetHeight + "px");
    };
    class_1.prototype.render = function () {
        this.ensureViewPort();
        return (h(Host, Object.assign({}, GridBaseHelper.hostData(this)), [
            h("slot", { name: "grid-content" }),
            h("slot", { name: "grid-empty-loading-placeholder" }),
            h("div", { class: "grid-empty-placeholder" }, h("slot", { name: "grid-content-empty" }))
        ]));
    };
    class_1.prototype.handleGxInfinite = function () {
        if (this.loadingState !== "loading") {
            this.gxInfiniteThresholdReached.emit();
        }
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
GridFlex.style = gridFlexCss;
export { GridFlex as gx_grid_flex };
