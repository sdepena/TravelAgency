var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { h, r as registerInstance, c as createEvent, g as getElement } from './index-10623738.js';
var PasswordEditRender = /** @class */ (function () {
    function PasswordEditRender(component) {
        this.component = component;
        this.handleChange = this.handleChange.bind(this);
        this.handleInput = this.handleInput.bind(this);
    }
    PasswordEditRender.prototype.getNativeInputId = function () {
        return this.innerEdit.getNativeInputId();
    };
    PasswordEditRender.prototype.getValueFromEvent = function (event) {
        return event.target && event.target.value;
    };
    PasswordEditRender.prototype.handleChange = function (event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.change.emit(event);
    };
    PasswordEditRender.prototype.handleInput = function (event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.input.emit(event);
    };
    /**
     * Update the native input element when the value changes
     */
    PasswordEditRender.prototype.valueChanged = function () {
        var innerEdit = this.innerEdit;
        if (innerEdit && innerEdit.value !== this.component.value) {
            innerEdit.value = this.component.value;
        }
    };
    PasswordEditRender.prototype.componentDidUnload = function () {
        this.innerEdit = null;
    };
    PasswordEditRender.prototype.render = function () {
        var _this = this;
        var passwordEdit = this.component;
        return (h("gx-edit", { ref: function (input) { return (_this.innerEdit = input); }, "css-class": passwordEdit.cssClass, disabled: passwordEdit.disabled, id: "gx-password-edit-" + passwordEdit.element.id, placeholder: passwordEdit.placeholder, readonly: passwordEdit.readonly, "show-trigger": !passwordEdit.readonly && passwordEdit.showRevealButton, "trigger-class": passwordEdit.revealed ? "active" : "", "trigger-text": passwordEdit.revealed
                ? passwordEdit.revealButtonTextOff
                : passwordEdit.revealButtonTextOn, type: passwordEdit.revealed ? "text" : "password", value: passwordEdit.value, onChange: this.handleChange, onInput: this.handleInput }, h("i", { class: "icon icon-eye" + (passwordEdit.revealed ? "-slash" : ""), slot: "trigger-content" })));
    };
    return PasswordEditRender;
}());
var passwordEditCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-password-edit{display:block;-ms-flex:1;flex:1}gx-password-edit[hidden]{display:none !important}gx-password-edit[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-password-edit .icon{display:inline-block;height:1em;width:1em;margin-bottom:-3px;-webkit-filter:opacity(0.7);filter:opacity(0.7);background-repeat:no-repeat;background-size:contain}gx-password-edit button:hover .icon{-webkit-filter:invert(1);filter:invert(1)}gx-password-edit .icon-eye{background-image:url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M288 144a110.94 110.94 0 0 0-31.24 5 55.4 55.4 0 0 1 7.24 27 56 56 0 0 1-56 56 55.4 55.4 0 0 1-27-7.24A111.71 111.71 0 1 0 288 144zm284.52 97.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400c-98.65 0-189.09-55-237.93-144C98.91 167 189.34 112 288 112s189.09 55 237.93 144C477.1 345 386.66 400 288 400z\"/></svg>')}gx-password-edit .icon-eye-slash{background-image:url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M634 471L36 3.51A16 16 0 0 0 13.51 6l-10 12.49A16 16 0 0 0 6 41l598 467.49a16 16 0 0 0 22.49-2.49l10-12.49A16 16 0 0 0 634 471zM296.79 146.47l134.79 105.38C429.36 191.91 380.48 144 320 144a112.26 112.26 0 0 0-23.21 2.47zm46.42 219.07L208.42 260.16C210.65 320.09 259.53 368 320 368a113 113 0 0 0 23.21-2.46zM320 112c98.65 0 189.09 55 237.93 144a285.53 285.53 0 0 1-44 60.2l37.74 29.5a333.7 333.7 0 0 0 52.9-75.11 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64c-36.7 0-71.71 7-104.63 18.81l46.41 36.29c18.94-4.3 38.34-7.1 58.22-7.1zm0 288c-98.65 0-189.08-55-237.93-144a285.47 285.47 0 0 1 44.05-60.19l-37.74-29.5a333.6 333.6 0 0 0-52.89 75.1 32.35 32.35 0 0 0 0 29.19C89.72 376.41 197.08 448 320 448c36.7 0 71.71-7.05 104.63-18.81l-46.41-36.28C359.28 397.2 339.89 400 320 400z\"/></svg>')}gx-password-edit gx-edit{height:100%}";
var PasswordEdit = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.change = createEvent(this, "change", 7);
        this.input = createEvent(this, "input", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * Indicates if the value is revealed or masked.
         */
        this.revealed = false;
        this.renderer = new PasswordEditRender(this);
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    class_1.prototype.getNativeInputId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.renderer.getNativeInputId()];
            });
        });
    };
    class_1.prototype.valueChanged = function () {
        this.renderer.valueChanged();
    };
    class_1.prototype.handleTriggerClick = function () {
        this.revealed = !this.revealed;
    };
    class_1.prototype.render = function () {
        return this.renderer.render();
    };
    class_1.prototype.componentDidUnload = function () {
        this.renderer.componentDidUnload();
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "value": ["valueChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
PasswordEdit.style = passwordEditCss;
export { PasswordEdit as gx_password_edit };
