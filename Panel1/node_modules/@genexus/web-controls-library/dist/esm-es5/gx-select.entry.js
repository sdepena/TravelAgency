var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { h, r as registerInstance, c as createEvent, g as getElement } from './index-10623738.js';
var autoSelectId = 0;
var SelectRender = /** @class */ (function () {
    function SelectRender(component) {
        this.component = component;
        this.options = [];
        if (!this.selectId && !this.component.readonly) {
            this.selectId = this.component.element.id
                ? this.component.element.id + "__select"
                : "gx-select-auto-id-" + autoSelectId++;
        }
    }
    SelectRender.prototype.updateOptions = function (options) {
        this.options = options;
    };
    SelectRender.prototype.getNativeInputId = function () {
        return !this.component.readonly ? this.selectId : null;
    };
    SelectRender.prototype.getCssClasses = function () {
        var classList = [];
        if (this.component.readonly) {
            classList.push("form-control-plaintext");
        }
        else {
            classList.push("custom-select");
        }
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        return classList.join(" ");
    };
    SelectRender.prototype.getReadonlyTextContent = function () {
        var _this = this;
        var matchingOpts = this.options.filter(function (o) { return o.value === _this.component.value; });
        if (matchingOpts.length > 0) {
            return matchingOpts[0].innerText;
        }
        return "";
    };
    SelectRender.prototype.getValueFromEvent = function (event) {
        return event.target && event.target.value;
    };
    SelectRender.prototype.handleChange = function (event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.input.emit(event);
    };
    SelectRender.prototype.render = function () {
        var _this = this;
        if (this.component.readonly) {
            return (h("span", { class: this.getCssClasses() }, this.getReadonlyTextContent()));
        }
        else {
            var datalistId = void 0;
            var attris = {
                "aria-disabled": this.component.disabled ? "true" : undefined,
                class: this.getCssClasses(),
                disabled: this.component.disabled,
                id: this.selectId,
                onChange: this.handleChange.bind(this),
                ref: function (select) {
                    select.value = _this.component.value;
                }
            };
            if (this.component.suggest) {
                datalistId = this.selectId + "__datalist";
            }
            return this.component.suggest
                ? [
                    h("gx-bootstrap", null),
                    h("input", { list: datalistId, disabled: this.component.disabled, placeholder: this.component.placeholder, value: this.component.value, onChange: this.handleChange.bind(this) }),
                    h("datalist", { id: datalistId }, this.options.map(function (_a) {
                        var innerText = _a.innerText, selected = _a.selected, value = _a.value, disabled = _a.disabled;
                        return (h("option", { disabled: disabled, selected: selected, value: value }, innerText));
                    }))
                ]
                : [
                    h("gx-bootstrap", null),
                    h("select", Object.assign({}, attris), this.options.map(function (_a) {
                        var innerText = _a.innerText, selected = _a.selected, value = _a.value, disabled = _a.disabled;
                        return (h("option", { disabled: disabled, selected: selected, value: value }, innerText));
                    }))
                ];
        }
    };
    return SelectRender;
}());
var Select = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        this.options = [];
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new SelectRender(this);
    }
    class_1.prototype.getChildOptions = function () {
        return Array.from(this.element.querySelectorAll("gx-select-option")).map(function (option) {
            return {
                disabled: option.disabled,
                innerText: option.innerText,
                selected: option.selected,
                value: option.value
            };
        });
    };
    class_1.prototype.updateOptions = function (options) {
        this.options = options;
        this.renderer.updateOptions(options);
    };
    class_1.prototype.valueChanged = function () {
        var _this = this;
        // the select value just changed
        var optionsElement = Array.from(this.element.querySelectorAll("gx-select-option"));
        // let's set the new check state to all options
        // regardless if it is checked or not
        optionsElement.forEach(function (option) {
            if (option.value === _this.value) {
                // the option value matches with the new select value
                // let's check this option
                option.selected = true;
            }
            else {
                // the option value doesn't match
                // with the new select value
                // let's uncheck this option
                option.selected = false;
            }
            // if the new select value doesn't
            // match with any option, all options
            // will be unchecked
        });
        // after set the new check state to all options
        // let's update the options list
        this.updateOptions(optionsElement.map(function (option) {
            return {
                disabled: option.disabled,
                innerText: option.innerText,
                selected: option.selected,
                value: option.value
            };
        }));
        if (this.didLoad) {
            // emit the new value
            this.input.emit({ value: this.value });
        }
    };
    class_1.prototype.onSelectOptionDidLoad = function (ev) {
        var option = ev.target;
        if (this.value) {
            // check if the select has a setted value
            if (this.value === option.value) {
                // this select has a value and this
                // option equals the correct select value
                // so let's set this option as checked
                option.selected = true;
            }
            else {
                // if the option value does not match
                // with the select value,
                // the option will be unchecked
                // regardless if the option was
                // initialized as checked
                option.selected = false;
            }
        }
        else {
            // if the select does not have a value
            // let's look for options initialized as checked
            if (option.selected) {
                // this option was initialized as checked,
                // so let's set the select's value
                // equals to the checked option value
                this.value = option.value;
            }
            // If there is no option checked
            // and no value was set in the select,
            // it will keep undefined until any
            // change or checked option
        }
        this.updateOptions(this.getChildOptions());
    };
    class_1.prototype.onSelectOptionDidUnload = function () {
        this.updateOptions(this.getChildOptions());
    };
    class_1.prototype.onSelectOptionDisable = function () {
        this.updateOptions(this.getChildOptions());
    };
    class_1.prototype.onSelectOptionChange = function () {
        this.updateOptions(this.getChildOptions());
    };
    class_1.prototype.onSelectOptionSelect = function (ev) {
        var _this = this;
        this.options.forEach(function (option) {
            if (option === ev.target) {
                if (option.value !== _this.value) {
                    _this.value = option.value;
                }
            }
            else {
                option.selected = false;
            }
        });
    };
    /**
     * Returns the id of the inner `input` element (if set).
     */
    class_1.prototype.getNativeInputId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.renderer.getNativeInputId()];
            });
        });
    };
    class_1.prototype.componentDidLoad = function () {
        this.didLoad = true;
    };
    class_1.prototype.render = function () {
        return this.renderer.render();
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "value": ["valueChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
export { Select as gx_select };
