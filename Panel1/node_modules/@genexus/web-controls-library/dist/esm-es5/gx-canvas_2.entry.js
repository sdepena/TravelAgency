import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';
import { m as makeSwipeable } from './swipeable-71a0e453.js';
var canvasCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-canvas{display:block;position:relative}gx-canvas[hidden]{display:none !important}gx-canvas[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}";
var Canvas = /** @class */ (function () {
    function Canvas(hostRef) {
        registerInstance(this, hostRef);
        this.gxClick = createEvent(this, "gxClick", 7);
        this.swipe = createEvent(this, "swipe", 7);
        this.swipeUp = createEvent(this, "swipeUp", 7);
        this.swipeRight = createEvent(this, "swipeRight", 7);
        this.swipeDown = createEvent(this, "swipeDown", 7);
        this.swipeLeft = createEvent(this, "swipeLeft", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.width = null;
        this.height = null;
        this.handleClick = this.handleClick.bind(this);
    }
    Canvas.prototype.handleClick = function (event) {
        if (this.disabled) {
            return;
        }
        this.gxClick.emit(event);
    };
    Canvas.prototype.componentDidLoad = function () {
        var _this = this;
        makeSwipeable(this);
        this.watchForItemsObserver = new MutationObserver(function (mutationsList) {
            var shouldUpdateDimensions = mutationsList.some(function (mutation) { return mutation.type === "attributes" || mutation.type === "childList"; });
            if (shouldUpdateDimensions) {
                _this.calculateDimensions();
            }
        });
        this.watchForItemsObserver.observe(this.element, { childList: true });
        this.calculateDimensions();
    };
    Canvas.prototype.disconnectedCallback = function () {
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    };
    Canvas.prototype.calculateDimensions = function () {
        var dimensions = Array.from(this.element.childNodes)
            .filter(function (node) { return node instanceof HTMLElement; })
            .map(function (element) { return [
            element.clientWidth + element.offsetLeft,
            element.clientHeight + element.offsetTop
        ]; });
        this.width = Math.max.apply(Math, dimensions.map(function (tuple) { return tuple[0]; }));
        this.height = Math.max.apply(Math, dimensions.map(function (tuple) { return tuple[1]; }));
    };
    Canvas.prototype.render = function () {
        this.element.addEventListener("click", this.handleClick);
        return (h(Host, { style: {
                width: this.width !== null ? this.width + "px" : undefined,
                height: this.height !== null ? this.height + "px" : undefined
            } }, h("slot", null)));
    };
    Object.defineProperty(Canvas.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return Canvas;
}());
Canvas.style = canvasCss;
var canvasCellCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-canvas-cell{position:absolute;display:-ms-flexbox;display:flex}gx-canvas-cell[hidden]{display:none !important}gx-canvas-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-canvas-cell[overflow-mode=clip]{overflow:hidden}gx-canvas-cell[overflow-mode=scroll]{overflow:auto}gx-canvas-cell:not([align])>*,gx-canvas-cell[align=left]>*{-ms-flex:1;flex:1}gx-canvas-cell[align=center]{-ms-flex-pack:center;justify-content:center}gx-canvas-cell[align=right]{-ms-flex-pack:end;justify-content:flex-end}gx-canvas-cell[valign=middle]{-ms-flex-align:center;align-items:center}gx-canvas-cell[valign=bottom]{-ms-flex-align:end;align-items:flex-end}";
var CanvasCell = /** @class */ (function () {
    function CanvasCell(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Defines the horizontal aligmnent of the content of the cell.
         */
        this.align = "left";
        /**
         * Defines the vertical aligmnent of the content of the cell.
         */
        this.valign = "top";
    }
    CanvasCell.prototype.render = function () {
        return h("slot", null);
    };
    Object.defineProperty(CanvasCell.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return CanvasCell;
}());
CanvasCell.style = canvasCellCss;
export { Canvas as gx_canvas, CanvasCell as gx_canvas_cell };
