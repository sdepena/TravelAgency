import { r as registerInstance, c as createEvent, h, g as getElement } from './index-10623738.js';
var videoCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-video{--gx-video-height:100%;--gx-video-width:100%;display:-ms-flexbox;display:flex;width:100%}gx-video[hidden]{display:none !important}gx-video[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-video>div{height:var(--gx-video-height);width:var(--gx-video-width);display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}gx-video>div iframe{-ms-flex:1;flex:1;border:none}";
var Video = /** @class */ (function () {
    function Video(hostRef) {
        registerInstance(this, hostRef);
        this.gxClick = createEvent(this, "gxClick", 7);
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        this.handleClick = this.handleClick.bind(this);
    }
    Video.prototype.handleClick = function (event) {
        this.gxClick.emit(event);
        event.preventDefault();
    };
    Video.prototype.parseYoutubeSrc = function (src) {
        var domainIdArray = src.split("watch?v=");
        return domainIdArray[0] + "embed/" + domainIdArray[1];
    };
    Video.prototype.render = function () {
        var handleClick = !this.disabled ? this.handleClick : null;
        return (h("div", { class: "gxVideoContainer", onClick: handleClick }, h("iframe", { src: this.parseYoutubeSrc(this.src) })));
    };
    Object.defineProperty(Video.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return Video;
}());
Video.style = videoCss;
export { Video as gx_video };
