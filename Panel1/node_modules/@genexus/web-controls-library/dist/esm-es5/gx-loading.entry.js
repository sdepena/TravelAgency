import { r as registerInstance, h, g as getElement } from './index-10623738.js';
var loadingCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-loading{display:block;position:fixed;top:0;right:0;bottom:0;left:0;z-index:10000}gx-loading[hidden]{display:none !important}gx-loading[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-loading .gx-lottie-test{display:none !important}gx-loading .box{position:fixed;padding:30px 20px;border-radius:3px;overflow:hidden;left:50%;top:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);background-color:rgba(200, 200, 200, 0.8);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;max-width:30%;min-width:200px;z-index:10001}gx-loading .title{font-size:16px;font-weight:bold;text-align:center}gx-loading .description{padding-top:5px;font-size:14px;text-align:center}gx-loading .loader{height:4px;width:100%;position:absolute;top:0;left:0;overflow:hidden}gx-loading .loader .loader-inner{display:block;position:absolute;width:0;height:4px;background-color:#2980b9}gx-loading .loader.determinate .loader-inner{-webkit-transition:width linear 0.2s;transition:width linear 0.2s}gx-loading .loader.indeterminate .loader-inner{content:\"\";left:-100%;width:10%;-webkit-animation:gx-loading-animation 1.4s linear infinite;animation:gx-loading-animation 1.4s linear infinite}@-webkit-keyframes gx-loading-animation{from{left:-100%;width:30%}50%{width:30%}70%{width:70%}80%{left:50%}95%{left:120%}to{left:100%}}@keyframes gx-loading-animation{from{left:-100%;width:30%}50%{width:30%}70%{width:70%}80%{left:50%}95%{left:120%}to{left:100%}}";
var Loading = /** @class */ (function () {
    function Loading(hostRef) {
        registerInstance(this, hostRef);
        this.lottiePath = "";
        /**
         * Sets if the loading dialog is presented.
         */
        this.presented = false;
        /**
         * Sets the value when type is determinate. Must be a value between 0 and 1.
         *
         */
        this.value = 0;
    }
    Loading.prototype.valueWatchHandler = function (newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        if (this.lottiePath) {
            var gxLottie = this.element.querySelector("gx-lottie");
            if (gxLottie !== null) {
                var from = oldValue > newValue ? 0 : oldValue;
                gxLottie.play(from, newValue);
            }
        }
    };
    Loading.prototype.presentedWatchHandler = function (newValue, oldValue) {
        if (oldValue === void 0) { oldValue = false; }
        if (newValue === oldValue) {
            return;
        }
        if (newValue) {
            this.present();
        }
        else {
            this.dismiss();
        }
    };
    Loading.prototype.present = function () {
        var rawLottiePath = window
            .getComputedStyle(this.element.querySelector(".gx-lottie-test"))
            .getPropertyValue("--gx-lottie-file-path");
        if (rawLottiePath) {
            this.lottiePath = rawLottiePath
                .trim()
                .replace(/^"/, "")
                .replace(/"$/, "");
        }
        this.element.style.display = "block";
    };
    Loading.prototype.dismiss = function () {
        this.element.style.display = "none";
    };
    Loading.prototype.render = function () {
        var _a;
        this.element.style.display = this.presented ? "block" : "none";
        return (h("div", { class: "box", role: "dialog" }, h("div", { class: "gx-lottie-test" }), this.lottiePath ? (h("gx-lottie", { path: this.lottiePath, loop: this.type === "indeterminate", autoPlay: this.type === "indeterminate" })) : (h("div", { class: (_a = {},
                _a[this.type] = true,
                _a.loader = true,
                _a) }, h("div", { class: "loader-inner", style: {
                width: this.value * 100 + "%"
            } }))), h("div", { class: "title" }, this.caption), h("div", { class: "description" }, this.description)));
    };
    Object.defineProperty(Loading.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Loading, "watchers", {
        get: function () {
            return {
                "value": ["valueWatchHandler"],
                "presented": ["presentedWatchHandler"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return Loading;
}());
Loading.style = loadingCss;
export { Loading as gx_loading };
