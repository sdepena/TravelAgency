import { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-10623738.js';
var autoRadioId = 0;
var RadioOptionRender = /** @class */ (function () {
    function RadioOptionRender(component) {
        this.component = component;
    }
    RadioOptionRender.prototype.getNativeInputId = function () {
        return this.getNativeInput().id;
    };
    RadioOptionRender.prototype.getNativeInput = function () {
        return this.component.element.querySelector("[data-native-element]");
    };
    RadioOptionRender.prototype.getCssClasses = function () {
        var classList = [];
        classList.push("custom-control-input");
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        if (!this.component.caption) {
            classList.push("position-static");
        }
        return classList.join(" ");
    };
    RadioOptionRender.prototype.getInnerControlContainerClass = function () {
        var classList = ["custom-control", "custom-radio"];
        if (this.component.disabled) {
            classList.push("disabled");
        }
        return classList.join(" ");
    };
    RadioOptionRender.prototype.handleClick = function () {
        this.checkedChanged(true);
    };
    RadioOptionRender.prototype.handleChange = function (event) {
        this.component.checked = true;
        var nativeInput = this.getNativeInput();
        nativeInput.focus();
        this.component.change.emit(event);
    };
    RadioOptionRender.prototype.checkedChanged = function (isChecked) {
        var _this = this;
        var nativeInput = this.getNativeInput();
        var inputEl = nativeInput;
        if (inputEl && inputEl.checked !== isChecked) {
            inputEl.checked = isChecked;
        }
        clearTimeout(this.checkedTmr);
        this.checkedTmr = setTimeout(function () {
            // only emit onSelect when checked is true
            if (_this.didLoad && isChecked) {
                _this.component.gxSelect.emit({
                    checked: isChecked,
                    value: _this.component.value
                });
            }
        });
    };
    RadioOptionRender.prototype.disabledChanged = function (isDisabled) {
        var nativeInput = this.getNativeInput();
        nativeInput.disabled = isDisabled;
    };
    RadioOptionRender.prototype.componentDidLoad = function () {
        this.didLoad = true;
    };
    RadioOptionRender.prototype.render = function () {
        var radioOption = this.component;
        if (!this.inputId) {
            this.inputId = radioOption.element.id
                ? radioOption.element.id + "__radio-option"
                : "gx-radio-auto-id-" + autoRadioId++;
        }
        var attris = {
            "aria-disabled": radioOption.disabled ? "true" : undefined,
            class: this.getCssClasses(),
            "data-native-element": "",
            disabled: radioOption.disabled,
            id: this.inputId,
            name: radioOption.name,
            onChange: this.handleChange.bind(this),
            onClick: this.handleClick.bind(this),
            value: radioOption.value
        };
        var forAttris = {
            for: attris.id
        };
        return [
            h("gx-bootstrap", null),
            h("div", { class: this.getInnerControlContainerClass() }, h("input", Object.assign({}, attris, { type: "radio", checked: radioOption.checked })), h("label", Object.assign({ class: "custom-control-label" }, forAttris), radioOption.caption))
        ];
    };
    return RadioOptionRender;
}());
var radioOptionCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-radio-option{display:block}gx-radio-option[hidden]{display:none !important}gx-radio-option[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}";
var RadioOption = /** @class */ (function () {
    function RadioOption(hostRef) {
        registerInstance(this, hostRef);
        this.change = createEvent(this, "change", 7);
        this.gxSelect = createEvent(this, "gxSelect", 7);
        this.gxRadioDidLoad = createEvent(this, "gxRadioDidLoad", 7);
        this.gxRadioDidUnload = createEvent(this, "gxRadioDidUnload", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new RadioOptionRender(this);
    }
    RadioOption.prototype.checkedChanged = function (isChecked) {
        this.renderer.checkedChanged(isChecked);
    };
    RadioOption.prototype.disabledChanged = function (isDisabled) {
        this.renderer.disabledChanged(isDisabled);
    };
    RadioOption.prototype.componentDidLoad = function () {
        this.gxRadioDidLoad.emit({ radio: this });
        this.renderer.componentDidLoad();
    };
    RadioOption.prototype.componentDidUnload = function () {
        this.gxRadioDidUnload.emit({ radio: this });
    };
    RadioOption.prototype.render = function () {
        return h(Host, null, this.renderer.render());
    };
    Object.defineProperty(RadioOption.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadioOption, "watchers", {
        get: function () {
            return {
                "checked": ["checkedChanged"],
                "disabled": ["disabledChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return RadioOption;
}());
RadioOption.style = radioOptionCss;
export { RadioOption as gx_radio_option };
