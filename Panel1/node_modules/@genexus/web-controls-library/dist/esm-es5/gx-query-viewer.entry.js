var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h, H as Host, g as getElement } from './index-10623738.js';
var queryViewerCss = "gx-query-viewer{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}gx-query-viewer iframe{-ms-flex:1;flex:1;border:0}";
var QueryViewer = /** @class */ (function () {
    function QueryViewer(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.mapServices = {
            net: "gxqueryviewerforsd.aspx",
            java: "qviewer.services.gxqueryviewerforsd"
        };
        this.propsNotToPost = [
            "baseUrl",
            "env",
            "mapServices",
            "object",
            "objectCall",
            "propsNotToPost",
            "parameters",
            "elements",
            "dataVersionId"
        ];
        this.configurationObserver = new MutationObserver(function () {
            _this.configurationChangedHandler();
        });
    }
    QueryViewer.prototype.parameterValueChangedHandler = function (eventInfo) {
        eventInfo.stopPropagation();
        this.getParameters();
    };
    QueryViewer.prototype.elementChangedHandler = function (eventInfo) {
        eventInfo.stopPropagation();
        this.getElements();
    };
    QueryViewer.prototype.configurationChangedHandler = function () {
        this.getParameters();
        this.getElements();
    };
    QueryViewer.prototype.componentWillLoad = function () {
        this.getParameters();
        this.getElements();
    };
    QueryViewer.prototype.componentDidLoad = function () {
        this.configurationObserver.observe(this.element, {
            childList: true,
            subtree: true
        });
    };
    QueryViewer.prototype.componentDidRender = function () {
        var form = this.element.querySelector("form");
        form.submit();
    };
    QueryViewer.prototype.disconnectedCallback = function () {
        this.configurationObserver.disconnect();
    };
    QueryViewer.prototype.parseObjectToObjectcall = function () {
        try {
            this.objectCall = JSON.parse(this.object);
        }
        catch (e) {
            this.objectCall = null;
        }
    };
    QueryViewer.prototype.hasObjectCall = function () {
        return Array.isArray(this.objectCall) && this.objectCall.length >= 2;
    };
    QueryViewer.prototype.loadObjectNameFromObjectCall = function () {
        if (this.hasObjectCall()) {
            this.objectName = this.objectCall[1];
        }
    };
    QueryViewer.prototype.postData = function () {
        var _this = this;
        this.parseObjectToObjectcall();
        this.loadObjectNameFromObjectCall();
        return __spreadArrays(Object.keys(QueryViewer.prototype)
            .filter(function (key) { return !_this.propsNotToPost.includes(key); })
            .map(function (key) { return h("input", { type: "hidden", name: key, value: _this[key] }); }), [
            h("input", { type: "hidden", name: "Elements", value: this.elements }),
            h("input", { type: "hidden", name: "Parameters", value: this.parameters })
        ]);
    };
    QueryViewer.prototype.getParameters = function () {
        var parametersValue = [];
        if (this.hasObjectCall()) {
            this.objectCall.slice(2).forEach(function (value) {
                var parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(value);
                parameterObject["Name"] = "";
                parametersValue.push(parameterObject);
            });
        }
        else {
            var parameters = Array.from(document.getElementsByTagName("gx-query-viewer-parameter"));
            parameters.forEach(function (parameter) {
                var parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(parameter.Value);
                parameterObject["Name"] = parameter.Name;
                parametersValue.push(parameterObject);
            });
        }
        this.parameters = JSON.stringify(parametersValue);
    };
    QueryViewer.prototype.getElements = function () {
        var _this = this;
        var elementsValue = [];
        var elements = Array.from(document.getElementsByTagName("gx-query-viewer-element"));
        elements.forEach(function (ax) {
            var elementObjectValue = {};
            elementObjectValue["Name"] = ax.name;
            elementObjectValue["Title"] = ax.elementTitle;
            elementObjectValue["Visible"] = ax.visible;
            elementObjectValue["Type"] = ax.type;
            elementObjectValue["Axis"] = ax.axis;
            elementObjectValue["Aggregation"] = ax.aggregation;
            elementObjectValue["DataField"] = ax.dataField;
            if (ax.axisOrderType) {
                elementObjectValue["AxisOrder"] = { Type: ax.axisOrderType };
                if (ax.axisOrderValues) {
                    elementObjectValue["AxisOrder"]["Values"] = ax.axisOrderValues;
                }
            }
            if (ax.filterType) {
                elementObjectValue["Filter"] = { Type: ax.filterType };
                if (ax.axisOrderValues) {
                    elementObjectValue["Filter"]["Values"] = ax.filterValues;
                }
            }
            if (ax.expandCollapseType) {
                elementObjectValue["ExpandCollapse"] = { Type: ax.expandCollapseType };
                if (ax.axisOrderValues) {
                    elementObjectValue["ExpandCollapse"]["Values"] =
                        ax.expandCollapseValues;
                }
            }
            var grouping = _this.getGrouping(ax);
            if (Object.keys(grouping).length > 0) {
                elementObjectValue["Grouping"] = grouping;
            }
            if (ax.raiseItemClick) {
                var action = { RaiseItemClick: ax.raiseItemClick };
                elementObjectValue["Action"] = action;
            }
            var formats = Array.from(ax.getElementsByTagName("gx-query-viewer-element-format"));
            formats.forEach(function (format) {
                var formatObject = {};
                formatObject["Picture"] = format.picture;
                formatObject["Subtotals"] = format.subtotals;
                formatObject["CanDragToPages"] = format.canDragToPages;
                formatObject["Style"] = format.formatStyle;
                formatObject["TargetValue"] = format.targetValue;
                formatObject["MaximumValue"] = format.maximumValue;
                var styles = Array.from(ax.getElementsByTagName("gx-query-viewer-format-style"));
                var valuesStyles = [];
                var conditionalStyles = [];
                styles.forEach(function (style) {
                    if (style.type === "Values") {
                        var valueStyle = {
                            Value: style.value,
                            ApplyToRowOrColumn: style.applyToRowOrColumn,
                            StyleOrClass: style.styleOrClass
                        };
                        valuesStyles.push(valueStyle);
                    }
                    else {
                        var conditionalStyle = {
                            Value1: style.value1,
                            Value2: style.value2,
                            Operator: style.operator,
                            StyleOrClass: style.styleOrClass
                        };
                        conditionalStyles.push(conditionalStyle);
                    }
                });
                if (valuesStyles.length > 0) {
                    formatObject["ValuesStyle"] = valuesStyles;
                }
                if (conditionalStyles.length > 0) {
                    formatObject["ConditionalStyles"] = conditionalStyles;
                }
                elementObjectValue["Format"] = formatObject;
            });
            elementsValue.push(elementObjectValue);
        });
        this.elements = JSON.stringify(elementsValue);
    };
    QueryViewer.prototype.getGrouping = function (ax) {
        var grouping = function () { return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (ax.groupingGroupByYear && { GroupByYear: ax.groupingGroupByYear })), (ax.groupingYearTitle && {
            YearTitle: ax.groupingYearTitle
        })), (ax.groupingGroupBySemester && {
            GroupBySemester: ax.groupingGroupBySemester
        })), (ax.groupingSemesterTitle && {
            SemesterTitle: ax.groupingSemesterTitle
        })), (ax.groupingGroupByQuarter && {
            GroupByQuarter: ax.groupingGroupByQuarter
        })), (ax.groupingQuarterTitle && { QuarterTitle: ax.groupingQuarterTitle })), (ax.groupingGroupByMonth && { GroupByMonth: ax.groupingGroupByMonth })), (ax.groupingMonthTitle && { MonthTitle: ax.groupingMonthTitle })), (ax.groupingGroupByDayOfWeek && {
            GroupByDayOfWeek: ax.groupingGroupByDayOfWeek
        })), (ax.groupingDayOfWeekTitle && {
            DayOfWeekTitle: ax.groupingDayOfWeekTitle
        })), (ax.groupingHideValue && { HideValue: ax.groupingHideValue }))); };
        return grouping;
    };
    QueryViewer.prototype.render = function () {
        return (h(Host, null, h("iframe", { name: "query_viewer", "data-version-id": this.dataVersionId }), h("form", { hidden: true, target: "query_viewer", action: this.baseUrl + this.mapServices[this.env], method: "POST" }, this.postData())));
    };
    Object.defineProperty(QueryViewer.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return QueryViewer;
}());
QueryViewer.style = queryViewerCss;
export { QueryViewer as gx_query_viewer };
