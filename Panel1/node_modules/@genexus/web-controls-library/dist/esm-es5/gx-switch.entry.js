var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-10623738.js';
var autoCheckBoxId = 0;
var SwitchRender = /** @class */ (function () {
    function SwitchRender(component) {
        this.component = component;
    }
    SwitchRender.prototype.getNativeInputId = function () {
        return this.getNativeInput().id;
    };
    SwitchRender.prototype.getNativeInput = function () {
        return this.component.element.querySelector("[data-native-element]");
    };
    SwitchRender.prototype.getValueFromEvent = function (event) {
        return event.target && event.target.checked;
    };
    SwitchRender.prototype.handleChange = function (event) {
        this.component.checked = this.getValueFromEvent(event);
        this.component.input.emit(event);
    };
    /**
     * Update the native input element when the value changes
     */
    SwitchRender.prototype.checkedChanged = function () {
        var inputEl = this.getNativeInput();
        if (inputEl && inputEl.checked !== this.component.checked) {
            inputEl.checked = this.component.checked;
        }
    };
    SwitchRender.prototype.render = function () {
        var switchCmp = this.component;
        if (!this.inputId) {
            this.inputId = switchCmp.element.id
                ? switchCmp.element.id + "_checkbox"
                : "gx-checkbox-auto-id-" + autoCheckBoxId++;
        }
        var inputAttrs = {
            "aria-checked": switchCmp.checked ? "true" : "false",
            "aria-disabled": switchCmp.disabled ? "true" : "false",
            checked: switchCmp.checked,
            class: "switch",
            "data-native-element": "",
            disabled: switchCmp.disabled,
            id: this.inputId,
            onChange: this.handleChange.bind(this),
            type: "checkbox"
        };
        return [
            h("gx-bootstrap", null),
            h("span", { class: "switch switch-sm" }, h("input", Object.assign({}, inputAttrs)), h("label", { htmlFor: this.inputId }, switchCmp.caption))
        ];
    };
    return SwitchRender;
}());
var switchCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-switch{display:block}gx-switch[hidden]{display:none !important}gx-switch[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-switch .switch{font-size:1rem;position:relative}gx-switch .switch input{position:absolute;height:1px;width:1px;background:none;border:0;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;padding:0}gx-switch .switch input+label{position:relative;min-width:calc(calc(2.375rem * 0.8) * 2);border-radius:calc(2.375rem * 0.8);height:calc(2.375rem * 0.8);line-height:calc(2.375rem * 0.8);display:inline-block;cursor:pointer;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:middle;text-indent:calc(calc(calc(2.375rem * 0.8) * 2) + 0.5rem)}gx-switch .switch input+label::before,gx-switch .switch input+label::after{content:\"\";position:absolute;top:0;left:0;width:calc(calc(2.375rem * 0.8) * 2);bottom:0;display:block}gx-switch .switch input+label::before{right:0;background-color:#dee2e6;border-radius:calc(2.375rem * 0.8);-webkit-transition:0.2s all;transition:0.2s all}gx-switch .switch input+label::after{top:2px;left:2px;width:calc(calc(2.375rem * 0.8) - calc(2px * 2));height:calc(calc(2.375rem * 0.8) - calc(2px * 2));border-radius:50%;background-color:white;-webkit-transition:0.2s all;transition:0.2s all}gx-switch .switch input:checked+label::before{background-color:#08d}gx-switch .switch input:checked+label::after{margin-left:calc(2.375rem * 0.8)}gx-switch .switch input:focus+label::before{outline:none;-webkit-box-shadow:0 0 0 0.2rem rgba(0, 136, 221, 0.25);box-shadow:0 0 0 0.2rem rgba(0, 136, 221, 0.25)}gx-switch .switch input:disabled+label{color:#868e96;cursor:not-allowed}gx-switch .switch input:disabled+label::before{background-color:#e9ecef}gx-switch .switch.switch-sm{font-size:0.875rem}gx-switch .switch.switch-sm input+label{min-width:calc(calc(1.9375rem * 0.8) * 2);height:calc(1.9375rem * 0.8);line-height:calc(1.9375rem * 0.8);text-indent:calc(calc(calc(1.9375rem * 0.8) * 2) + 0.5rem)}gx-switch .switch.switch-sm input+label::before{width:calc(calc(1.9375rem * 0.8) * 2)}gx-switch .switch.switch-sm input+label::after{width:calc(calc(1.9375rem * 0.8) - calc(2px * 2));height:calc(calc(1.9375rem * 0.8) - calc(2px * 2))}gx-switch .switch.switch-sm input:checked+label::after{margin-left:calc(1.9375rem * 0.8)}";
var Switch = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        /**
         * This attribute allows you specify if the element is disabled.
         * If disabled, it will not trigger any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        this.renderer = new SwitchRender(this);
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    class_1.prototype.getNativeInputId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.renderer.getNativeInputId()];
            });
        });
    };
    class_1.prototype.checkedChanged = function () {
        this.renderer.checkedChanged();
    };
    class_1.prototype.render = function () {
        return h(Host, { role: "switch" }, this.renderer.render());
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "checked": ["checkedChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
Switch.style = switchCss;
export { Switch as gx_switch };
