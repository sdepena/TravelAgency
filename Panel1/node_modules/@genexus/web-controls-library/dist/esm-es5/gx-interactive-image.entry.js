import { r as registerInstance, h, g as getElement } from './index-10623738.js';
var interactiveImageCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-interactive-image{height:auto;width:auto;display:-ms-flexbox;display:flex;overflow:hidden}gx-interactive-image[hidden]{display:none !important}gx-interactive-image[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-interactive-image img{height:100%;width:100%}";
var InteractiveImage = /** @class */ (function () {
    function InteractiveImage(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /**
         * True/False. If this property is true, the user can zoom in/out on the image.
         */
        this.enableZoom = false;
        /**
         * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
         */
        this.zoom = 100;
        /**
         * Lets you specify the image URL. *Requiered*
         */
        this.src = "";
        this.mouseOver = false;
        this.handleMouseMove = function (ev) {
            ev.preventDefault();
            _this.mouseOver = true;
            _this.zoomedPositionX = _this.calculateZoomedPosition(ev.offsetX, ev.target.offsetWidth);
            _this.zoomedPositionY = _this.calculateZoomedPosition(ev.offsetY, ev.target.offsetHeight);
        };
        this.handleTouchMove = function (ev) {
            ev.preventDefault();
            _this.mouseOver = true;
            var imgSize = {
                height: ev.target.offsetHeight,
                width: ev.target.offsetWidth
            };
            var touch = {
                X: ev.changedTouches[0].clientX - ev.target.x,
                Y: ev.changedTouches[0].clientY -
                    ev.target.parentNode.getBoundingClientRect().top
            };
            if (touch.X <= 0) {
                touch.X = 0;
            }
            else if (touch.X >= imgSize.width) {
                touch.X = imgSize.width;
            }
            if (touch.Y <= 0) {
                touch.Y = 0;
            }
            else if (touch.Y >= imgSize.height) {
                touch.Y = imgSize.height;
            }
            var moveImgPostion = {
                X: _this.calculateZoomTouch(_this.calculateZoomedPosition(touch.X, ev.target.offsetWidth), _this.zoom),
                Y: _this.calculateZoomTouch(_this.calculateZoomedPosition(touch.Y, imgSize.height), _this.zoom)
            };
            _this.zoomedPositionX = moveImgPostion.X;
            _this.zoomedPositionY = moveImgPostion.Y;
        };
        this.handleOverEnd = function () {
            _this.mouseOver = false;
        };
    }
    InteractiveImage.prototype.calculateZoomedPosition = function (overPosition, elementSize) {
        var SCALE = this.zoom / 100;
        var HALF_SIZE_PERCENTAGE = 50;
        var HALF_SIZE_PIXELS = (elementSize * HALF_SIZE_PERCENTAGE) / 100;
        return -(overPosition - HALF_SIZE_PIXELS) * (SCALE - 1);
    };
    InteractiveImage.prototype.calculateZoomTouch = function (preCalculateValue, zoom) {
        var SCALE = zoom / 100;
        return preCalculateValue / SCALE;
    };
    InteractiveImage.prototype.checkZoomFeature = function () {
        if (this.enableZoom) {
            var img = this.element.querySelector("img");
            img.addEventListener("mousemove", this.handleMouseMove);
            img.addEventListener("touchmove", this.handleTouchMove);
            img.addEventListener("mouseout", this.handleOverEnd);
            img.addEventListener("touchend", this.handleOverEnd);
        }
        else {
            var img = this.element.querySelector("img");
            img.removeEventListener("mousemove", this.handleMouseMove);
            img.removeEventListener("touchmove", this.handleTouchMove);
            img.removeEventListener("mouseout", this.handleOverEnd);
            img.removeEventListener("touchend", this.handleOverEnd);
        }
    };
    InteractiveImage.prototype.fixZoomValue = function () {
        if (this.zoom < 100) {
            console.warn("Zoom value cannot be lower than 100");
            this.zoom = 100;
        }
    };
    InteractiveImage.prototype.componentWillLoad = function () {
        this.fixZoomValue();
    };
    InteractiveImage.prototype.componentDidLoad = function () {
        this.checkZoomFeature();
    };
    InteractiveImage.prototype.componentDidUpdate = function () {
        this.checkZoomFeature();
    };
    InteractiveImage.prototype.render = function () {
        this.fixZoomValue();
        return (h("img", { style: this.mouseOver
                ? {
                    "object-position": this.zoomedPositionX + "px " + this.zoomedPositionY + "px",
                    transform: "scale(" + this.zoom / 100 + ")"
                }
                : {}, src: this.src }));
    };
    Object.defineProperty(InteractiveImage.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    return InteractiveImage;
}());
InteractiveImage.style = interactiveImageCss;
export { InteractiveImage as gx_interactive_image };
