var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-10623738.js';
var TimerState;
(function (TimerState) {
    TimerState["Running"] = "running";
    TimerState["Stopped"] = "stopped";
    TimerState["Reset"] = "reset";
})(TimerState || (TimerState = {}));
var chronometerCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-chronometer{display:inline}gx-chronometer[hidden]{display:none !important}gx-chronometer[hidden][invisible-mode=keep-space]{display:inline !important;visibility:hidden}";
var Chronometer = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        this.change = createEvent(this, "change", 7);
        this.end = createEvent(this, "end", 7);
        this.tick = createEvent(this, "tick", 7);
        this.startedTime = 0;
        this.started = false;
        this.elapsedTime = 0;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * When the chronometer reaches this value,
         * MaxValueText will be shown instead of the Chronometer value.
         */
        this.maxValue = 0;
        /**
         * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
         */
        this.unit = "s";
        /**
         * Defines the interval that the function onTick will be called.
         */
        this.interval = 1;
        /**
         * State of the Chronometer.
         */
        this.state = TimerState.Stopped;
        /**
         * The value of the control.
         */
        this.value = 0;
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    class_1.prototype.getNativeInputId = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.element];
            });
        });
    };
    class_1.prototype.componentWillLoad = function () {
        this.elapsedTime = this.value * this.getUnit();
    };
    class_1.prototype.componentDidUnload = function () {
        this.stop();
    };
    /**
     * Starts the Chronometer
     */
    class_1.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.started) {
                    return [2 /*return*/];
                }
                this.started = true;
                this.startedTime = Date.now() - this.elapsedTime;
                this.updateElapsedTime();
                this.timer = window.setInterval(function () {
                    _this.updateElapsedTime();
                    if (_this.maxValue > 0 &&
                        _this.elapsedTime >= _this.maxValue * _this.getUnit()) {
                        _this.end.emit();
                        _this.stop();
                    }
                }, 1000);
                if (this.interval > 0) {
                    this.eventTimer = window.setInterval(function () {
                        _this.tickHandler();
                    }, this.interval * this.getUnit());
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Stops the Chronometer
     */
    class_1.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                window.clearInterval(this.eventTimer);
                window.clearInterval(this.timer);
                this.started = false;
                this.startedTime = 0;
                return [2 /*return*/];
            });
        });
    };
    /**
     * Stops and set to 0 the Chronometer.
     */
    class_1.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.stop();
                this.value = 0;
                this.startedTime = 0;
                this.elapsedTime = 0;
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.handleChange = function () {
        this.input.emit();
        this.change.emit();
    };
    class_1.prototype.tickHandler = function () {
        this.tick.emit();
    };
    class_1.prototype.stateChanged = function (newState, oldState) {
        if (oldState === newState) {
            return;
        }
        switch (newState) {
            case TimerState.Running:
                this.start();
                break;
            case TimerState.Stopped:
                this.stop();
                break;
            case TimerState.Reset:
                this.reset();
                break;
        }
    };
    class_1.prototype.getUnit = function () {
        return this.unit === "s" ? 1000 : 1;
    };
    class_1.prototype.updateElapsedTime = function () {
        this.elapsedTime = Date.now() - this.startedTime;
        this.value = Math.floor(this.elapsedTime / this.getUnit());
    };
    class_1.prototype.render = function () {
        var time = Math.floor(this.elapsedTime / 1000);
        var maxVal = this.maxValue * this.getUnit();
        var maxValueReached = this.elapsedTime > maxVal && maxVal !== 0;
        return h("span", null, maxValueReached ? this.maxValueText : time);
    };
    Object.defineProperty(class_1.prototype, "element", {
        get: function () { return getElement(this); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "value": ["handleChange"],
                "state": ["stateChanged"]
            };
        },
        enumerable: false,
        configurable: true
    });
    return class_1;
}());
Chronometer.style = chronometerCss;
export { Chronometer as gx_chronometer };
