import { Component, Element, Prop, h, Host } from "@stencil/core";
export class TableCell {
    constructor() {
        /**
         * Defines the horizontal aligmnent of the content of the cell.
         */
        this.align = "left";
        /**
         * True to add a fading overlay on the right and bottom area of the cell to signify
         * that the content is longer than the space allows.
         */
        this.showContentFade = false;
        /**
         * Defines the vertical aligmnent of the content of the cell.
         */
        this.valign = "top";
    }
    componentDidRender() {
        this.setMinHeight(this.element.firstElementChild);
        this.setMaxHeight();
    }
    componentDidLoad() {
        this.setupObserver(this.element.firstElementChild);
    }
    setupObserver(childElement) {
        if (childElement && childElement.invisibleMode === "collapse") {
            this.observer = new MutationObserver((mutationsList) => {
                for (const mutation of mutationsList) {
                    if (mutation.type === "attributes" &&
                        mutation.attributeName === "hidden") {
                        this.setMinHeight(childElement);
                    }
                }
            });
            this.observer.observe(childElement, {
                attributes: true,
                childList: false,
                subtree: false
            });
        }
    }
    setMinHeight(childElement) {
        if (childElement) {
            this.element.style.minHeight =
                childElement.invisibleMode === "collapse" && childElement.hidden
                    ? "0"
                    : this.minHeight;
        }
    }
    setMaxHeight() {
        this.element.style.maxHeight = this.maxHeight;
    }
    disconnectedCallback() {
        if (this.observer !== undefined) {
            this.observer.disconnect();
        }
    }
    render() {
        if (this.area) {
            this.element.style["gridArea"] = this.area;
        }
        return (h(Host, { class: {
                "gx-long-content-fade": this.showContentFade
            } },
            h("slot", null)));
    }
    static get is() { return "gx-table-cell"; }
    static get originalStyleUrls() { return {
        "$": ["table-cell.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["table-cell.css"]
    }; }
    static get properties() { return {
        "area": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Like the `grid-area` CSS property, this attribute gives a name to the item,\nso it can be used from the [areas-template attributes](../table/readme.md#areas-template)\nof the gx-table element."
            },
            "attribute": "area",
            "reflect": false
        },
        "align": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"left\" | \"right\" | \"center\"",
                "resolved": "\"center\" | \"left\" | \"right\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the horizontal aligmnent of the content of the cell."
            },
            "attribute": "align",
            "reflect": true,
            "defaultValue": "\"left\""
        },
        "overflowMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"scroll\" | \"clip\"",
                "resolved": "\"clip\" | \"scroll\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute defines how the control behaves when the content overflows.\n\n| Value    | Details                                                     |\n| -------- | ----------------------------------------------------------- |\n| `scroll` | The overflowin content is hidden, but scrollbars are shown  |\n| `clip`   | The overflowing content is hidden, without scrollbars       |"
            },
            "attribute": "overflow-mode",
            "reflect": false
        },
        "maxHeight": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute defines the maximum height of the cell."
            },
            "attribute": "max-height",
            "reflect": false
        },
        "minHeight": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute defines the minimum height of the cell when its contents are visible.\nIgnored if its content has `invisible-mode` = `collapse` and is hidden."
            },
            "attribute": "min-height",
            "reflect": false
        },
        "showContentFade": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to add a fading overlay on the right and bottom area of the cell to signify\nthat the content is longer than the space allows."
            },
            "attribute": "show-content-fade",
            "reflect": false,
            "defaultValue": "false"
        },
        "valign": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"top\" | \"bottom\" | \"medium\"",
                "resolved": "\"bottom\" | \"medium\" | \"top\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Defines the vertical aligmnent of the content of the cell."
            },
            "attribute": "valign",
            "reflect": true,
            "defaultValue": "\"top\""
        }
    }; }
    static get elementRef() { return "element"; }
}
