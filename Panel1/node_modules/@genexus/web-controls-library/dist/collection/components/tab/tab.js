import { Component, Element, Event, Host, Listen, Prop, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
const BASE_TABLIST_SELECTOR = ":scope > [role='tablist']";
export class Tab {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
    }
    tabClickHandler(event) {
        const targetElement = event.target;
        if (targetElement.closest("gx-tab") !== this.element) {
            return;
        }
        const oldSelectedTab = this.lastSelectedTab;
        this.setSelectedTab(targetElement);
        if (oldSelectedTab !== this.lastSelectedTab) {
            this.tabChange.emit(event);
        }
    }
    setSelectedTab(captionElement) {
        this.lastSelectedTab = captionElement;
        this.getCaptionSlots().forEach((slotElement, i) => {
            slotElement.selected = slotElement === captionElement;
            const nthChild = i + 1;
            const pageElement = this.element.querySelector(`:scope > gx-tab-page:nth-child(${nthChild}), 
        ${BASE_TABLIST_SELECTOR} > .gx-tab-content > gx-tab-page:nth-child(${nthChild})`);
            this.mapPageToCaptionSelection(slotElement, pageElement);
        });
    }
    getCaptionSlots() {
        return Array.from(this.element.querySelectorAll(`:scope > [slot='caption'], 
         ${BASE_TABLIST_SELECTOR} > .gx-nav-tabs > [slot='caption']`));
    }
    mapPageToCaptionSelection(captionElement, pageElement) {
        pageElement.classList.toggle("gx-tab-page--active", !!captionElement.selected);
    }
    componentDidLoad() {
        makeHighlightable(this);
        this.linkTabs(true);
    }
    componentDidUpdate() {
        this.linkTabs();
    }
    disconnectedCallback() {
        this.lastSelectedTab = null;
    }
    linkTabs(resolveSelected = false) {
        const captionSlots = this.getCaptionSlots();
        const pageSlots = this.getPageSlots();
        if (captionSlots.length === pageSlots.length) {
            captionSlots.forEach((captionElement, i) => {
                const pageElement = pageSlots[i];
                captionElement.setAttribute("aria-controls", pageElement.id);
                pageElement.setAttribute("aria-labelledby", captionElement.id);
                if (resolveSelected) {
                    this.mapPageToCaptionSelection(captionElement, pageElement);
                    if (captionElement.selected) {
                        this.lastSelectedTab = captionElement;
                    }
                }
            });
        }
    }
    render() {
        this.setCaptionSlotsClass();
        this.setPageSlotsClass();
        return (h(Host, null,
            h("div", { role: "tablist" },
                h("div", { class: "gx-nav-tabs" },
                    h("slot", { name: "caption" }),
                    h("div", { "aria-hidden": "true", class: "gx-nav-tabs-filler" })),
                h("div", { class: "gx-tab-content" },
                    h("slot", { name: "page" })))));
    }
    setCaptionSlotsClass() {
        this.getCaptionSlots().forEach(captionElement => {
            if (!captionElement.classList.contains("gx-nav-item")) {
                captionElement.classList.add("gx-nav-item");
            }
        });
    }
    setPageSlotsClass() {
        this.getPageSlots().forEach(pageElement => {
            if (!pageElement.classList.contains("gx-tab-page")) {
                pageElement.classList.add("gx-tab-page");
            }
        });
    }
    getPageSlots() {
        return Array.from(this.element.querySelectorAll(`:scope > [slot='page'], 
         ${BASE_TABLIST_SELECTOR} > .gx-tab-content > [slot='page']`));
    }
    static get is() { return "gx-tab"; }
    static get originalStyleUrls() { return {
        "$": ["tab.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["tab.css"]
    }; }
    static get properties() { return {
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "tabChange",
            "name": "tabChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the active tab is changed"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "tabSelect",
            "method": "tabClickHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
