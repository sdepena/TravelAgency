import { Component, Element, Event, Prop, h, State, Host } from "@stencil/core";
import { makeSwipeable } from "../common/swipeable";
export class Canvas {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.width = null;
        this.height = null;
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick(event) {
        if (this.disabled) {
            return;
        }
        this.gxClick.emit(event);
    }
    componentDidLoad() {
        makeSwipeable(this);
        this.watchForItemsObserver = new MutationObserver(mutationsList => {
            const shouldUpdateDimensions = mutationsList.some(mutation => mutation.type === "attributes" || mutation.type === "childList");
            if (shouldUpdateDimensions) {
                this.calculateDimensions();
            }
        });
        this.watchForItemsObserver.observe(this.element, { childList: true });
        this.calculateDimensions();
    }
    disconnectedCallback() {
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    }
    calculateDimensions() {
        const dimensions = Array.from(this.element.childNodes)
            .filter(node => node instanceof HTMLElement)
            .map((element) => [
            element.clientWidth + element.offsetLeft,
            element.clientHeight + element.offsetTop
        ]);
        this.width = Math.max(...dimensions.map(tuple => tuple[0]));
        this.height = Math.max(...dimensions.map(tuple => tuple[1]));
    }
    render() {
        this.element.addEventListener("click", this.handleClick);
        return (h(Host, { style: {
                width: this.width !== null ? `${this.width}px` : undefined,
                height: this.height !== null ? `${this.height}px` : undefined
            } },
            h("slot", null)));
    }
    static get is() { return "gx-canvas"; }
    static get originalStyleUrls() { return {
        "$": ["canvas.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["canvas.css"]
    }; }
    static get properties() { return {
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "width": {},
        "height": {}
    }; }
    static get events() { return [{
            "method": "gxClick",
            "name": "gxClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is clicked."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipe",
            "name": "swipe",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeUp",
            "name": "swipeUp",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped in upward direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeRight",
            "name": "swipeRight",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped right direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeDown",
            "name": "swipeDown",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped downward direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeLeft",
            "name": "swipeLeft",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped left direction.."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
}
