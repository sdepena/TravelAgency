import { h } from "@stencil/core";
import Bootstrap from "bootstrap.native/dist/bootstrap-native-v4";
const PRIMARY_ACTION_SLOT_NAME = "primary-action";
const SECONDARY_ACTION_SLOT_NAME = "secondary-action";
let autoId = 0;
export class ModalRender {
    constructor(component) {
        this.component = component;
    }
    componentDidLoad() {
        const modalElement = this.getModalElement();
        modalElement.addEventListener("show.bs.modal", () => {
            this.component.opened = true;
        });
        modalElement.addEventListener("hide.bs.modal", () => {
            this.component.opened = false;
        });
        this.bootstrapModal = new Bootstrap.Modal(modalElement, {
            show: this.component.opened
        });
        if (this.component.autoClose) {
            const actions = Array.from(this.component.element.querySelectorAll(`[slot='${PRIMARY_ACTION_SLOT_NAME}'], [slot='${SECONDARY_ACTION_SLOT_NAME}']`));
            actions.forEach(action => action.addEventListener("click", () => this.close()));
        }
    }
    render(slots) {
        const modal = this.component;
        const primaryActions = Array.from(modal.element.querySelectorAll(`[slot='${PRIMARY_ACTION_SLOT_NAME}']`));
        primaryActions.forEach(action => (action.cssClass = this.getActionCssClasses(action.cssClass, "btn-primary")));
        const secondaryActions = Array.from(modal.element.querySelectorAll(`[slot='${SECONDARY_ACTION_SLOT_NAME}']`));
        secondaryActions.forEach(action => (action.cssClass = this.getActionCssClasses(action.cssClass, "btn-secondary")));
        const hasFooterActions = primaryActions.length > 0 || secondaryActions.length > 0;
        if (!this.headerId) {
            this.headerId = modal.element.id
                ? `${modal.element.id}__modal`
                : `gx-modal-auto-id-${autoId++}`;
        }
        return [
            h("gx-bootstrap", null),
            h("div", { class: "modal fade", tabindex: "-1", role: "dialog", "aria-labelledby": this.headerId, "aria-hidden": "true" },
                h("div", { class: "modal-dialog modal-dialog-centered", role: "document" },
                    h("div", { class: "modal-content" },
                        modal.showHeader && (h("div", { class: "modal-header" },
                            h("h5", { class: "modal-title", id: this.headerId }, slots.header),
                            h("button", { type: "button", class: "close", "data-dismiss": "modal", "aria-label": modal.closeButtonLabel },
                                h("span", { "aria-hidden": "true" }, "\u00D7")))),
                        h("div", { class: "modal-body" }, slots.body),
                        hasFooterActions ? (h("div", { class: "modal-footer" },
                            slots.primaryAction,
                            slots.secondaryAction)) : null)))
        ];
    }
    open() {
        this.bootstrapModal.show();
    }
    close() {
        this.bootstrapModal.hide();
    }
    getModalElement() {
        return this.component.element.querySelector(".modal");
    }
    getActionCssClasses(currentCssClasses, ...newClasses) {
        return (currentCssClasses || "")
            .split(" ")
            .concat(...newClasses)
            .join(" ");
    }
}
