import { h } from "@stencil/core";
import Popper from "popper.js";
export class CardRender {
    constructor(component) {
        this.component = component;
        this.handleDropDownToggleClick = this.handleDropDownToggleClick.bind(this);
    }
    handleDropDownToggleClick(evt) {
        const dropDownMenu = this.component.element.querySelector(".dropdown-menu");
        dropDownMenu.classList.toggle("show");
        const toggleButton = evt.target;
        if (this.popper) {
            this.popper.destroy();
        }
        this.popper = new Popper(toggleButton, dropDownMenu, {
            placement: "bottom-start"
        });
        this.bodyClickHandler = bodyClickEvt => {
            const target = bodyClickEvt.target;
            if (target === toggleButton) {
                return;
            }
            dropDownMenu.classList.remove("show");
        };
        setTimeout(() => {
            document.body.addEventListener("click", this.bodyClickHandler, {
                once: true
            });
        }, 10);
    }
    componentDidUnload() {
        if (this.bodyClickHandler) {
            document.body.removeEventListener("click", this.bodyClickHandler);
        }
        if (this.popper) {
            this.popper.destroy();
        }
    }
    componentDidLoad() {
        this.toggleHeaderFooterVisibility();
    }
    componentDidUpdate() {
        this.toggleHeaderFooterVisibility();
    }
    toggleHeaderFooterVisibility() {
        const card = this.component;
        const cardHeader = card.element.querySelector(":scope > .card > .card-header");
        const cardFooter = card.element.querySelector(":scope > .card > .card-footer");
        const lowPriorityActions = cardFooter !== null
            ? Array.from(cardFooter.querySelectorAll("[slot='low-priority-action']"))
            : [];
        const highPriorityActions = cardHeader !== null
            ? Array.from(cardHeader.querySelectorAll("[slot='high-priority-action']"))
            : [];
        const normalPriorityActions = cardFooter !== null
            ? Array.from(cardFooter.querySelectorAll("[slot='normal-priority-action']"))
            : [];
        const buttonActions = [...highPriorityActions, ...normalPriorityActions];
        buttonActions.forEach((btn) => (btn.size = "small"));
        lowPriorityActions.forEach((action) => {
            if (action.cssClass && action.cssClass.indexOf("dropdown-item") >= 0) {
                return;
            }
            action.cssClass = (action.cssClass || "") + " dropdown-item";
        });
        const hasLowPriorityActions = lowPriorityActions.length > 0;
        const hasFooterActions = hasLowPriorityActions || normalPriorityActions.length > 0;
        const hasHeaderActions = highPriorityActions.length > 0;
        const renderHeader = hasHeaderActions ||
            (cardHeader !== null &&
                cardHeader.querySelector("[slot='header']") !== null);
        const renderFooter = hasFooterActions ||
            (cardFooter !== null &&
                cardFooter.querySelector("[slot='footer']") !== null);
        if (cardHeader !== null) {
            cardHeader.hidden = !(renderHeader && card.showHeader);
        }
        if (cardFooter !== null) {
            cardFooter.hidden = !(renderFooter && card.showFooter);
        }
    }
    render(slots) {
        const card = this.component;
        const lowPriorityActions = Array.from(card.element.querySelectorAll("[slot='low-priority-action']"));
        const highPriorityActions = Array.from(card.element.querySelectorAll("[slot='high-priority-action']"));
        const normalPriorityActions = Array.from(card.element.querySelectorAll("[slot='normal-priority-action']"));
        const buttonActions = [...highPriorityActions, ...normalPriorityActions];
        buttonActions.forEach((btn) => (btn.size = "small"));
        lowPriorityActions.forEach((action) => {
            if (action.cssClass && action.cssClass.indexOf("dropdown-item") >= 0) {
                return;
            }
            action.cssClass = (action.cssClass || "") + " dropdown-item";
        });
        const hasLowPriorityActions = lowPriorityActions.length > 0;
        const hasFooterActions = hasLowPriorityActions || normalPriorityActions.length > 0;
        const renderFooter = hasFooterActions ||
            card.element.querySelector("[slot='footer']") !== null;
        return [
            h("gx-bootstrap", null),
            h("div", { class: {
                    "border-0": !card.showBorder,
                    "rounded-0": !card.showBorder,
                    card: true
                } },
                h("div", { class: {
                        "border-0": !card.showBorder,
                        "card-header": true
                    } },
                    slots.header,
                    h("div", { class: "float-right" }, slots.highPriorityAction)),
                slots.body,
                slots.default,
                renderFooter && (h("div", { class: {
                        "border-0": !card.showBorder,
                        "card-footer": true
                    } },
                    slots.footer,
                    hasFooterActions && (h("div", { class: "float-right" },
                        slots.normalPriorityAction,
                        hasLowPriorityActions && (h("button", { class: "btn btn-sm gx-dropdown-toggle", type: "button", "aria-haspopup": "true", "aria-expanded": "false", "aria-label": "More actions", onClick: this.handleDropDownToggleClick })),
                        hasLowPriorityActions && (h("div", { class: "dropdown-menu" }, slots.lowPriorityAction)))))))
        ];
    }
}
