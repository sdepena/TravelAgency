import { h } from "@stencil/core";
let autoSelectId = 0;
export class SelectRender {
    constructor(component) {
        this.component = component;
        this.options = [];
        if (!this.selectId && !this.component.readonly) {
            this.selectId = this.component.element.id
                ? `${this.component.element.id}__select`
                : `gx-select-auto-id-${autoSelectId++}`;
        }
    }
    updateOptions(options) {
        this.options = options;
    }
    getNativeInputId() {
        return !this.component.readonly ? this.selectId : null;
    }
    getCssClasses() {
        const classList = [];
        if (this.component.readonly) {
            classList.push("form-control-plaintext");
        }
        else {
            classList.push("custom-select");
        }
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        return classList.join(" ");
    }
    getReadonlyTextContent() {
        const matchingOpts = this.options.filter(o => o.value === this.component.value);
        if (matchingOpts.length > 0) {
            return matchingOpts[0].innerText;
        }
        return "";
    }
    getValueFromEvent(event) {
        return event.target && event.target.value;
    }
    handleChange(event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.input.emit(event);
    }
    render() {
        if (this.component.readonly) {
            return (h("span", { class: this.getCssClasses() }, this.getReadonlyTextContent()));
        }
        else {
            let datalistId;
            const attris = {
                "aria-disabled": this.component.disabled ? "true" : undefined,
                class: this.getCssClasses(),
                disabled: this.component.disabled,
                id: this.selectId,
                onChange: this.handleChange.bind(this),
                ref: (select) => {
                    select.value = this.component.value;
                }
            };
            if (this.component.suggest) {
                datalistId = `${this.selectId}__datalist`;
            }
            return this.component.suggest
                ? [
                    h("gx-bootstrap", null),
                    h("input", { list: datalistId, disabled: this.component.disabled, placeholder: this.component.placeholder, value: this.component.value, onChange: this.handleChange.bind(this) }),
                    h("datalist", { id: datalistId }, this.options.map(({ innerText, selected, value, disabled }) => (h("option", { disabled: disabled, selected: selected, value: value }, innerText))))
                ]
                : [
                    h("gx-bootstrap", null),
                    h("select", Object.assign({}, attris), this.options.map(({ innerText, selected, value, disabled }) => (h("option", { disabled: disabled, selected: selected, value: value }, innerText))))
                ];
        }
    }
}
