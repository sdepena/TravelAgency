import { h } from "@stencil/core";
let autoFormFieldId = 0;
export class FormFieldRender {
    constructor(component) {
        this.component = component;
        this.LABEL_WIDTH_BY_POSITION = {
            bottom: "label-bottom",
            float: "",
            left: "label-left",
            none: "sr-only",
            right: "label-right",
            top: "label-top"
        };
        this.INNER_CONTROL_WIDTH_BY_LABEL_POSITION = {
            bottom: "field-label-bottom",
            float: "",
            left: "field-label-left",
            none: "field-label-top",
            right: "field-label-right",
            top: "field-label-top"
        };
    }
    getLabelCssClass() {
        const classList = [];
        classList.push(this.LABEL_WIDTH_BY_POSITION[this.component.labelPosition]);
        if (this.component.labelPosition !== "float") {
            classList.push("col-form-label");
        }
        return classList.join(" ");
    }
    getInnerControlContainerClass() {
        const className = this.INNER_CONTROL_WIDTH_BY_LABEL_POSITION[this.component.labelPosition];
        return {
            [className]: true,
            "d-flex": true
        };
    }
    shouldRenderLabelBefore() {
        const formField = this.component;
        return (!formField.labelPosition ||
            formField.labelPosition === "top" ||
            formField.labelPosition === "right" ||
            formField.labelPosition === "bottom" ||
            formField.labelPosition === "left" ||
            formField.labelPosition === "none");
    }
    async componentDidLoad() {
        const formField = this.component;
        const innerControl = formField.element.querySelector("[area='field']");
        if (innerControl && innerControl.getNativeInputId) {
            const nativeInputId = await innerControl.getNativeInputId();
            if (nativeInputId) {
                const nativeInput = formField.element.querySelector(`#${nativeInputId}`);
                if (nativeInput !== null) {
                    nativeInput.setAttribute("data-part", "field");
                }
                const innerLabel = formField.element.querySelector("label");
                if (nativeInputId && innerLabel) {
                    innerLabel.setAttribute("for", nativeInputId);
                }
            }
        }
    }
    renderForRadio(renderLabel, renderLabelBefore, slot) {
        const labelId = `${this.formFieldId}-label`;
        const label = (h("div", { class: this.getLabelCssClass(), id: labelId, "data-part": "label" },
            h("div", { class: "label-content" }, this.component.labelCaption)));
        const labelPositionClassName = `label-position-${this.component.labelPosition}`;
        const isValidLabelPosition = this.component.labelPosition === "top" ||
            this.component.labelPosition === "right" ||
            this.component.labelPosition === "bottom" ||
            this.component.labelPosition === "left";
        return (h("div", { class: "form-group mb-0", "aria-labelledby": labelId, role: "group" },
            h("div", { class: {
                    "radio-group": true,
                    "no-gutters": true,
                    [labelPositionClassName]: isValidLabelPosition
                } },
                renderLabel && renderLabelBefore ? label : null,
                h("div", { class: this.getInnerControlContainerClass() }, slot),
                renderLabel && !renderLabelBefore ? label : null)));
    }
    render(slots) {
        const formField = this.component;
        const isRadioGroup = formField.element.querySelector("gx-radio-group[area='field']") !== null;
        const renderLabelBefore = this.shouldRenderLabelBefore();
        const renderLabel = formField.labelPosition !== "none";
        if (!this.formFieldId) {
            this.formFieldId =
                formField.element.id || `gx-form-field-auto-id-${autoFormFieldId++}`;
        }
        if (isRadioGroup) {
            return this.renderForRadio(renderLabel, renderLabelBefore, slots.default);
        }
        else {
            const label = (h("label", { class: this.getLabelCssClass(), "data-part": "label" },
                h("div", { class: "label-content" }, formField.labelCaption)));
            const result = formField.labelPosition === "float" ? (h("div", null,
                slots.default,
                label)) : (h("div", { class: {
                    "form-group": true,
                    "no-gutters": true,
                    "mb-0": true,
                    "flex-column": formField.labelPosition === "top",
                    "flex-column-reverse": formField.labelPosition === "bottom",
                    "flex-row-reverse": formField.labelPosition === "right",
                    "flex-row": formField.labelPosition === "left"
                } },
                renderLabel && renderLabelBefore ? label : null,
                h("div", { class: this.getInnerControlContainerClass() }, slots.default),
                renderLabel && !renderLabelBefore ? label : null));
            return [h("gx-bootstrap", null), result];
        }
    }
}
