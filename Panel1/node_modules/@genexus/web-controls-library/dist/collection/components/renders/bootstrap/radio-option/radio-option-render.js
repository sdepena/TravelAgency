import { h } from "@stencil/core";
let autoRadioId = 0;
export class RadioOptionRender {
    constructor(component) {
        this.component = component;
    }
    getNativeInputId() {
        return this.getNativeInput().id;
    }
    getNativeInput() {
        return this.component.element.querySelector("[data-native-element]");
    }
    getCssClasses() {
        const classList = [];
        classList.push("custom-control-input");
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        if (!this.component.caption) {
            classList.push("position-static");
        }
        return classList.join(" ");
    }
    getInnerControlContainerClass() {
        const classList = ["custom-control", "custom-radio"];
        if (this.component.disabled) {
            classList.push("disabled");
        }
        return classList.join(" ");
    }
    handleClick() {
        this.checkedChanged(true);
    }
    handleChange(event) {
        this.component.checked = true;
        const nativeInput = this.getNativeInput();
        nativeInput.focus();
        this.component.change.emit(event);
    }
    checkedChanged(isChecked) {
        const nativeInput = this.getNativeInput();
        const inputEl = nativeInput;
        if (inputEl && inputEl.checked !== isChecked) {
            inputEl.checked = isChecked;
        }
        clearTimeout(this.checkedTmr);
        this.checkedTmr = setTimeout(() => {
            // only emit onSelect when checked is true
            if (this.didLoad && isChecked) {
                this.component.gxSelect.emit({
                    checked: isChecked,
                    value: this.component.value
                });
            }
        });
    }
    disabledChanged(isDisabled) {
        const nativeInput = this.getNativeInput();
        nativeInput.disabled = isDisabled;
    }
    componentDidLoad() {
        this.didLoad = true;
    }
    render() {
        const radioOption = this.component;
        if (!this.inputId) {
            this.inputId = radioOption.element.id
                ? `${radioOption.element.id}__radio-option`
                : `gx-radio-auto-id-${autoRadioId++}`;
        }
        const attris = {
            "aria-disabled": radioOption.disabled ? "true" : undefined,
            class: this.getCssClasses(),
            "data-native-element": "",
            disabled: radioOption.disabled,
            id: this.inputId,
            name: radioOption.name,
            onChange: this.handleChange.bind(this),
            onClick: this.handleClick.bind(this),
            value: radioOption.value
        };
        const forAttris = {
            for: attris.id
        };
        return [
            h("gx-bootstrap", null),
            h("div", { class: this.getInnerControlContainerClass() },
                h("input", Object.assign({}, attris, { type: "radio", checked: radioOption.checked })),
                h("label", Object.assign({ class: "custom-control-label" }, forAttris), radioOption.caption))
        ];
    }
}
