import { h } from "@stencil/core";
export class PasswordEditRender {
    constructor(component) {
        this.component = component;
        this.handleChange = this.handleChange.bind(this);
        this.handleInput = this.handleInput.bind(this);
    }
    getNativeInputId() {
        return this.innerEdit.getNativeInputId();
    }
    getValueFromEvent(event) {
        return event.target && event.target.value;
    }
    handleChange(event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.change.emit(event);
    }
    handleInput(event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.input.emit(event);
    }
    /**
     * Update the native input element when the value changes
     */
    valueChanged() {
        const innerEdit = this.innerEdit;
        if (innerEdit && innerEdit.value !== this.component.value) {
            innerEdit.value = this.component.value;
        }
    }
    componentDidUnload() {
        this.innerEdit = null;
    }
    render() {
        const passwordEdit = this.component;
        return (h("gx-edit", { ref: input => (this.innerEdit = input), "css-class": passwordEdit.cssClass, disabled: passwordEdit.disabled, id: `gx-password-edit-${passwordEdit.element.id}`, placeholder: passwordEdit.placeholder, readonly: passwordEdit.readonly, "show-trigger": !passwordEdit.readonly && passwordEdit.showRevealButton, "trigger-class": passwordEdit.revealed ? "active" : "", "trigger-text": passwordEdit.revealed
                ? passwordEdit.revealButtonTextOff
                : passwordEdit.revealButtonTextOn, type: passwordEdit.revealed ? "text" : "password", value: passwordEdit.value, onChange: this.handleChange, onInput: this.handleInput },
            h("i", { class: "icon icon-eye" + (passwordEdit.revealed ? "-slash" : ""), slot: "trigger-content" })));
    }
}
