import { Component, Element, Event, Prop, Watch, h, Host } from "@stencil/core";
import { ModalRender } from "../renders/bootstrap/modal/modal-render";
export class Modal {
    constructor() {
        /**
         * This attribute lets you specify if the modal dialog is opened or closed.
         */
        this.opened = false;
        /**
         * This attribute lets you specify if a header is renderd on top of the modal dialog.
         */
        this.showHeader = true;
        this.renderer = new ModalRender(this);
    }
    openedHandler(newValue, oldValue = false) {
        if (newValue === oldValue) {
            return;
        }
        if (newValue) {
            this.renderer.open();
            this.open.emit();
        }
        else {
            this.renderer.close();
            this.close.emit();
        }
    }
    componentDidLoad() {
        this.renderer.componentDidLoad();
    }
    render() {
        return (h(Host, null, this.renderer.render({
            body: h("slot", { name: "body" }),
            header: h("slot", { name: "header" }),
            primaryAction: h("slot", { name: "primary-action" }),
            secondaryAction: h("slot", { name: "secondary-action" })
        })));
    }
    static get is() { return "gx-modal"; }
    static get originalStyleUrls() { return {
        "$": ["modal.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["modal.css"]
    }; }
    static get properties() { return {
        "autoClose": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the modal dialog is automatically closed when an action is clicked."
            },
            "attribute": "auto-close",
            "reflect": false
        },
        "closeButtonLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the label for the close button. Important for accessibility."
            },
            "attribute": "close-button-label",
            "reflect": false
        },
        "opened": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the modal dialog is opened or closed."
            },
            "attribute": "opened",
            "reflect": false,
            "defaultValue": "false"
        },
        "showHeader": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if a header is renderd on top of the modal dialog."
            },
            "attribute": "show-header",
            "reflect": false,
            "defaultValue": "true"
        }
    }; }
    static get events() { return [{
            "method": "close",
            "name": "close",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the modal dialog is closed"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "open",
            "name": "open",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the modal dialog is opened"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "opened",
            "methodName": "openedHandler"
        }]; }
}
