import { Component, Element, Prop, h, Host, Event, State } from "@stencil/core";
import { watchForItems } from "../common/watch-items";
export class NavBar {
    constructor() {
        /**
         * This attribute lets you specify if one or two lines will be used to render the navigation bar.
         * Useful when there are links and also actions, to have links in the first line, and actions in the second
         */
        this.singleLine = true;
        this.showLowActions = false;
        this.hasHighPriorityActions = false;
        this.hasNormalPriorityActions = false;
        this.hasLowPriorityActions = false;
        this.handleToggleButtonClick = (e) => {
            this.toggleButtonClick.emit(e);
        };
        this.handleBackButtonClick = (e) => {
            this.backButtonClick.emit(e);
        };
        this.handleActionToggleButtonClick = () => {
            this.showLowActions = !this.showLowActions;
        };
        this.handleBodyClick = (e) => {
            if (this.showLowActions) {
                const navbarToggleBtn = this.element.querySelector(".gx-navbar-actions-toggle");
                if (e.composedPath().find(el => el === navbarToggleBtn) === undefined) {
                    this.showLowActions = false;
                }
            }
        };
    }
    componentDidLoad() {
        document.body.addEventListener("click", this.handleBodyClick);
        this.watchForItemsObserver = watchForItems(this.element, "gx-navbar-item", () => this.checkChildActions());
    }
    disconnectedCallback() {
        document.body.removeEventListener("click", this.handleBodyClick);
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    }
    checkChildActions() {
        this.hasHighPriorityActions = this.hasActionsByType("high");
        this.hasNormalPriorityActions = this.hasActionsByType("normal");
        this.hasLowPriorityActions = this.hasActionsByType("low");
    }
    render() {
        const navOnly = !this.showToggleButton && !this.hasActions();
        return (h(Host, { class: {
                "navbar-single-line": this.singleLine,
                "navbar-nav-only": navOnly
            } },
            h("nav", { class: "gx-navbar" },
                h("div", { class: "gx-navbar-line gx-navbar-line-1" },
                    this.showBackButton && this.singleLine && (h("button", { type: "button", class: "gx-navbar-back-button gx-navbar-icon-button", "aria-label": this.backButtonLabel, onClick: this.handleBackButtonClick },
                        h("gx-icon", { type: "arrow-left" }))),
                    this.showToggleButton && (h("button", { type: "button", class: "gx-navbar-target-toggle gx-navbar-icon-button", "aria-label": this.toggleButtonLabel, onClick: this.handleToggleButtonClick },
                        h("gx-icon", { type: "burger" }))),
                    h("a", { class: "gx-navbar-header", tabindex: "-1" },
                        h("slot", { name: "header" }),
                        this.caption),
                    h("div", { class: "gx-navbar-links" },
                        h("slot", { name: "navigation" })),
                    this.singleLine && this.renderActions()),
                !this.singleLine && (h("div", { class: "gx-navbar-line gx-navbar-line-2" },
                    this.showBackButton && (h("button", { type: "button", class: "gx-navbar-back-button", onClick: this.handleBackButtonClick },
                        h("gx-icon", { type: "arrow-left" }),
                        this.backButtonLabel)),
                    this.renderActions())))));
    }
    renderActions() {
        return [
            h("div", { class: "gx-navbar-actions" },
                h("div", { class: "gx-navbar-actions-high" },
                    h("slot", { name: "high-priority-action" })),
                h("div", { class: {
                        "gx-navbar-actions-normal": true,
                        "gx-navbar-actions-normal--separator": this.hasHighPriorityActions && this.hasNormalPriorityActions
                    } },
                    h("slot", { name: "normal-priority-action" })),
                h("div", { class: {
                        "gx-navbar-actions-low": true,
                        "gx-navbar-actions-low--active": this.showLowActions
                    } },
                    h("slot", { name: "low-priority-action" }))),
            this.hasLowPriorityActions && (h("button", { type: "button", "aria-label": this.actionToggleButtonLabel, class: {
                    "gx-navbar-icon-button": true,
                    "gx-navbar-actions-toggle": true,
                    "gx-navbar-actions-toggle--active": this.showLowActions
                }, onClick: this.handleActionToggleButtonClick },
                h("gx-icon", { type: "show-more" })))
        ];
    }
    hasActionsByType(type) {
        return (this.element.querySelector(`[slot='${type}-priority-action']`) !== null);
    }
    hasActions() {
        return (this.hasHighPriorityActions ||
            this.hasNormalPriorityActions ||
            this.hasLowPriorityActions);
    }
    static get is() { return "gx-navbar"; }
    static get originalStyleUrls() { return {
        "$": ["navbar.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["navbar.css"]
    }; }
    static get properties() { return {
        "actionToggleButtonLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the label for the low priority actions toggle button. Important for accessibility."
            },
            "attribute": "action-toggle-button-label",
            "reflect": false
        },
        "backButtonLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the label for the back button."
            },
            "attribute": "back-button-label",
            "reflect": false
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify an optional title for the navigation bar"
            },
            "attribute": "caption",
            "reflect": false
        },
        "singleLine": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if one or two lines will be used to render the navigation bar.\nUseful when there are links and also actions, to have links in the first line, and actions in the second"
            },
            "attribute": "single-line",
            "reflect": false,
            "defaultValue": "true"
        },
        "showBackButton": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to show the back button"
            },
            "attribute": "show-back-button",
            "reflect": false
        },
        "showToggleButton": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to show the left target toggle button (a burger icon)"
            },
            "attribute": "show-toggle-button",
            "reflect": false
        },
        "toggleButtonLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the label for the left target toggle button. Important for accessibility."
            },
            "attribute": "toggle-button-label",
            "reflect": false
        }
    }; }
    static get states() { return {
        "showLowActions": {},
        "hasHighPriorityActions": {},
        "hasNormalPriorityActions": {},
        "hasLowPriorityActions": {}
    }; }
    static get events() { return [{
            "method": "toggleButtonClick",
            "name": "toggleButtonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the toggle button is clicked"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "backButtonClick",
            "name": "backButtonClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the back button is clicked"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
}
