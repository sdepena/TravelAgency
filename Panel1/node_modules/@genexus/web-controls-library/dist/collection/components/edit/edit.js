import { Component, Element, Event, Host, Method, Prop, State, Watch, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { EditRender } from "../renders/bootstrap/edit/edit-render";
import { cssVariablesWatcher } from "../common/css-variables-watcher";
import { makeLinesClampable } from "../common/line-clamp";
export class Edit {
    constructor() {
        /**
         * Used to define the semantic of the element when readonly=true.
         *
         * Font categories are mapped to semantic HTML elements when rendered:
         *
         * * `"headline"`: `h1`
         * * `"subheadline"`: `h2`
         * * `"body"`: `p`
         * * `"footnote"`: `footer`
         * * `"caption1"`: `span`
         * * `"caption2"`: `span`
         */
        this.fontCategory = "body";
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * True to cut text when it overflows, showing an ellipsis (only applies when readonly)
         */
        this.lineClamp = false;
        /**
         * The type of control to render. A subset of the types supported by the `input` element is supported:
         *
         * * `"date"`
         * * `"datetime-local"`
         * * `"email"`
         * * `"file"`
         * * `"number"`
         * * `"password"`
         * * `"search"`
         * * `"tel"`
         * * `"text"`
         * * `"url"`
         */
        this.type = "text";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        this.maxLines = 0;
        this.maxHeight = 0;
        this.renderer = new EditRender(this, {
            handleChange: this.handleChange.bind(this),
            handleTriggerClick: this.handleTriggerClick.bind(this),
            handleValueChanging: this.handleValueChanging.bind(this)
        });
        cssVariablesWatcher(this, [
            {
                cssVariableName: "--font-category",
                propertyName: "fontCategory"
            }
        ]);
        makeLinesClampable(this, "[data-readonly]", ".line-measuring");
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    async getNativeInputId() {
        return this.renderer.getNativeInputId();
    }
    componentDidLoad() {
        this.toggleValueSetClass();
        if (this.readonly) {
            makeHighlightable(this);
        }
    }
    valueChanged() {
        this.renderer.valueChanged();
        this.toggleValueSetClass();
    }
    toggleValueSetClass() {
        if (this.value === "") {
            this.element.classList.remove("value-set");
        }
        else {
            this.element.classList.add("value-set");
        }
    }
    handleChange(event) {
        this.value = this.renderer.getValueFromEvent(event);
        this.change.emit(event);
    }
    handleValueChanging(event) {
        this.value = this.renderer.getValueFromEvent(event);
        this.input.emit(event);
    }
    handleTriggerClick(event) {
        if (!this.disabled) {
            event.stopPropagation();
        }
        this.gxTriggerClick.emit(event);
    }
    render() {
        return (h(Host, { class: {
                "gx-edit--single-line": this.type === "date" || this.type === "datetime-local"
            } }, this.renderer.render({
            triggerContent: h("slot", { name: "trigger-content" })
        })));
    }
    static get is() { return "gx-edit"; }
    static get originalStyleUrls() { return {
        "$": ["edit.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["edit.css"]
    }; }
    static get properties() { return {
        "area": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"field\"",
                "resolved": "\"field\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Allows to specify the role of the element when inside a `gx-form-field` element"
            },
            "attribute": "area",
            "reflect": true
        },
        "autocapitalize": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Specifies the auto-capitalization behavior. Same as [autocapitalize](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/Attributes.html#//apple_ref/doc/uid/TP40008058-autocapitalize)\nattribute for `input` elements. Only supported by Safari and Chrome."
            },
            "attribute": "autocapitalize",
            "reflect": false
        },
        "autocomplete": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"on\" | \"off\"",
                "resolved": "\"off\" | \"on\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute indicates whether the value of the control can be\nautomatically completed by the browser. Same as [autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocomplete)\nattribute for `input` elements."
            },
            "attribute": "autocomplete",
            "reflect": false
        },
        "autocorrect": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used to control whether autocorrection should be enabled when the user\nis entering/editing the text value. Sames as [autocorrect](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-autocorrect)\nattribute for `input` elements."
            },
            "attribute": "autocorrect",
            "reflect": false
        },
        "fontCategory": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "| \"headline\"\n    | \"subheadline\"\n    | \"body\"\n    | \"footnote\"\n    | \"caption1\"\n    | \"caption2\"",
                "resolved": "\"body\" | \"caption1\" | \"caption2\" | \"footnote\" | \"headline\" | \"subheadline\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Used to define the semantic of the element when readonly=true.\n\nFont categories are mapped to semantic HTML elements when rendered:\n\n* `\"headline\"`: `h1`\n* `\"subheadline\"`: `h2`\n* `\"body\"`: `p`\n* `\"footnote\"`: `footer`\n* `\"caption1\"`: `span`\n* `\"caption2\"`: `span`"
            },
            "attribute": "font-category",
            "reflect": false,
            "defaultValue": "\"body\""
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "lineClamp": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to cut text when it overflows, showing an ellipsis (only applies when readonly)"
            },
            "attribute": "line-clamp",
            "reflect": false,
            "defaultValue": "false"
        },
        "multiline": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Controls if the element accepts multiline text."
            },
            "attribute": "multiline",
            "reflect": false
        },
        "placeholder": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)\nattribute for `input` elements."
            },
            "attribute": "placeholder",
            "reflect": false
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute indicates that the user cannot modify the value of the control.\nSame as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\nattribute for `input` elements."
            },
            "attribute": "readonly",
            "reflect": false
        },
        "showTrigger": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If true, a trigger button is shown next to the edit field. The button can\nbe customized using `trigger-text` and `trigger-class` attributes,\nor adding a child element with `slot=\"trigger-content\"` attribute to\nspecify the content inside the trigger button."
            },
            "attribute": "show-trigger",
            "reflect": false
        },
        "triggerText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The text of the trigger button. If a text is specified and an image is\nspecified (through an element with `slot=\"trigger-content\"`), the content\nis ignored and the text is used instead."
            },
            "attribute": "trigger-text",
            "reflect": false
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"date\"\n    | \"datetime-local\"\n    | \"email\"\n    | \"file\"\n    | \"number\"\n    | \"password\"\n    | \"search\"\n    | \"tel\"\n    | \"text\"\n    | \"url\"",
                "resolved": "\"date\" | \"datetime-local\" | \"email\" | \"file\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"url\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The type of control to render. A subset of the types supported by the `input` element is supported:\n\n* `\"date\"`\n* `\"datetime-local\"`\n* `\"email\"`\n* `\"file\"`\n* `\"number\"`\n* `\"password\"`\n* `\"search\"`\n* `\"tel\"`\n* `\"text\"`\n* `\"url\"`"
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "\"text\""
        },
        "value": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The initial value of the control."
            },
            "attribute": "value",
            "reflect": false
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "maxLines": {},
        "maxHeight": {}
    }; }
    static get events() { return [{
            "method": "change",
            "name": "change",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The `change` event is emitted when a change to the element's value is\ncommitted by the user. Unlike the `input` event, the `change` event is not\nnecessarily fired for each change to an element's value but when the\ncontrol loses focus."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "input",
            "name": "input",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The `input` event is fired synchronously when the value is changed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxTriggerClick",
            "name": "gxTriggerClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The `gxTriggerClick` event is fired when the trigger button is clicked."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "getNativeInputId": {
            "complexType": {
                "signature": "() => Promise<string>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the id of the inner `input` element (if set).",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "value",
            "methodName": "valueChanged"
        }]; }
}
