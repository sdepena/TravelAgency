import { Component, Element, Prop, h, Host } from "@stencil/core";
import { MessageRender } from "../renders/bootstrap/message/message-render";
export class Message {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        this.renderer = new MessageRender(this);
    }
    componentDidLoad() {
        this.renderer.componentDidLoad();
    }
    render() {
        return h(Host, null, this.renderer.render({ default: h("slot", null) }));
    }
    static get is() { return "gx-message"; }
    static get originalStyleUrls() { return {
        "$": ["message.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["message.css"]
    }; }
    static get properties() { return {
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "showCloseButton": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Show a button for closing the meesage box"
            },
            "attribute": "show-close-button",
            "reflect": false
        },
        "closeButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Text for the close button."
            },
            "attribute": "close-button-text",
            "reflect": false
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"info\" | \"warning\" | \"error\"",
                "resolved": "\"error\" | \"info\" | \"warning\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of the button:\n* `info`: Information message\n* `warning`: Warning Message\n* `error`: Error message"
            },
            "attribute": "type",
            "reflect": false
        },
        "duration": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The time in miliseconds before the message is automatically dismissed.\nIf no duration is specified, the message will not be automatically dismissed."
            },
            "attribute": "duration",
            "reflect": false
        }
    }; }
    static get elementRef() { return "element"; }
}
