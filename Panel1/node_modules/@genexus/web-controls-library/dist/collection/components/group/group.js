import { Component, Element, Prop, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
export class Group {
    constructor() {
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    render() {
        return (h("fieldset", { class: "form-group" },
            h("legend", null,
                h("span", { class: "content" }, this.caption)),
            h("slot", null)));
    }
    static get is() { return "gx-group"; }
    static get originalStyleUrls() { return {
        "$": ["group.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["group.css"]
    }; }
    static get properties() { return {
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Attribute that provides the caption to the <legend> tag"
            },
            "attribute": "caption",
            "reflect": false
        },
        "autoGrow": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute defines if the control size will grow automatically,\nto adjust to its content size.\nIf set to `false`, it won't grow automatically and it will show scrollbars\nif the content overflows."
            },
            "attribute": "auto-grow",
            "reflect": false
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "element"; }
}
