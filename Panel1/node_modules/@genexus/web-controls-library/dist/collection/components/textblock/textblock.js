import { Component, Element, Listen, Prop, State, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { makeLinesClampable } from "../common/line-clamp";
export class TextBlock {
    constructor() {
        /**
         * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
         */
        this.href = "";
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * True to cut text when it overflows, showing an ellipsis.
         */
        this.lineClamp = false;
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        this.maxLines = 0;
        this.maxHeight = 0;
        makeLinesClampable(this, ".content", ".line-measuring");
    }
    handleClick(event) {
        event.preventDefault();
        if (this.disabled) {
            event.stopPropagation();
            return;
        }
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    render() {
        const body = (h("div", { class: {
                content: true,
                "gx-line-clamp": this.shouldClampLines()
            }, style: this.shouldClampLines() && {
                "--max-lines": this.maxLines.toString(),
                "--max-height": `${this.maxHeight}px`
            } },
            this.lineClamp && (h("div", { class: "line-measuring", "aria-hidden": true }, "A")),
            h("slot", null)));
        if (this.href) {
            return h("a", { href: this.href }, body);
        }
        return body;
    }
    shouldClampLines() {
        return this.lineClamp && this.maxLines > 0;
    }
    static get is() { return "gx-textblock"; }
    static get originalStyleUrls() { return {
        "$": ["textblock.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["textblock.css"]
    }; }
    static get properties() { return {
        "href": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"\"",
                "resolved": "\"\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor."
            },
            "attribute": "href",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "lineClamp": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to cut text when it overflows, showing an ellipsis."
            },
            "attribute": "line-clamp",
            "reflect": false,
            "defaultValue": "false"
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "maxLines": {},
        "maxHeight": {}
    }; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleClick",
            "target": undefined,
            "capture": true,
            "passive": false
        }]; }
}
