import { Component, Element, Event, Method, Prop, h } from "@stencil/core";
let autoInputRangeId = 0;
export class Rating {
    constructor() {
        this.svgViewport = {
            viewBox: "0 0 100 100"
        };
        /**
         * This attribute allows you specify if the element is disabled.
         * If disabled, it will not trigger any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute indicates that the user cannot modify the value of the control.
         * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
         * attribute for `input` elements.
         * _Disable by default_
         */
        this.readonly = false;
        /**
         * The current value displayed by the component.
         *
         */
        this.value = 0;
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick(event) {
        const element = event.target;
        const targetParent = element.parentElement;
        const score = element.nodeName === "polygon"
            ? Array.from(targetParent.parentElement.children).indexOf(targetParent) + 1
            : Array.from(targetParent.children).indexOf(element) + 1;
        this.value = score;
        this.input.emit(this);
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    async getNativeInputId() {
        return this.element.querySelector("input").id;
    }
    renderStarsRating() {
        const stars = [];
        for (let i = 0; i < 5; i++) {
            stars.push(h("svg", Object.assign({ class: "rating" }, this.svgViewport, { onClick: this.handleClick }), this.renderStarShape()));
        }
        return stars;
    }
    renderStarsScore() {
        const stars = [];
        let percent;
        let starsScore;
        if (this.maxValue - this.value >= 0) {
            percent = (this.value * 100) / this.maxValue;
            starsScore = Math.round((percent * 5) / 100);
        }
        else {
            console.error("'value' cannot be greater than 'max-value'");
        }
        for (let i = 0; i < 5; i++) {
            stars.push(h("svg", Object.assign({ class: {
                    active: i < starsScore,
                    score: true
                } }, this.svgViewport), this.renderStarShape()));
        }
        return stars;
    }
    render() {
        const valuesDifference = this.maxValue - this.value;
        if (!this.inputId) {
            this.element.id
                ? (this.inputId = `${this.element.id}_inputRange`)
                : (this.inputId = `gx-inputRange-auto-id-${autoInputRangeId++}`);
        }
        if ((valuesDifference >= 0 && this.readonly) || !this.readonly) {
            return (h("div", null,
                h("input", { id: this.inputId, type: "range", min: "0", max: this.readonly ? this.maxValue : 5, step: "1", value: this.value }),
                h("div", { class: {
                        rating: !this.readonly,
                        score: this.readonly
                    }, "data-score": this.value !== 0 ? this.value : undefined }, this.readonly ? this.renderStarsScore() : this.renderStarsRating())));
        }
        else {
            if (this.maxValue !== 0) {
                console.error("'value' cannot be higher than 'max-value'.", this.element);
            }
            else {
                console.error("'max-value' has not a value set.", this.element);
            }
        }
    }
    renderStarShape() {
        return h("polygon", { points: "50,0 15,95 100,35 0,35 85,95" });
    }
    static get is() { return "gx-rating"; }
    static get originalStyleUrls() { return {
        "$": ["rating.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["rating.css"]
    }; }
    static get properties() { return {
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute allows you specify if the element is disabled.\nIf disabled, it will not trigger any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "maxValue": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This porpoerty is required if you want to display a score.\n>E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`"
            },
            "attribute": "max-value",
            "reflect": false
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute indicates that the user cannot modify the value of the control.\nSame as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)\nattribute for `input` elements.\n_Disable by default_"
            },
            "attribute": "readonly",
            "reflect": false,
            "defaultValue": "false"
        },
        "value": {
            "type": "number",
            "mutable": true,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The current value displayed by the component."
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "0"
        }
    }; }
    static get events() { return [{
            "method": "input",
            "name": "input",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The 'input' event is emitted when a change to the element's value is committed by the user."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "getNativeInputId": {
            "complexType": {
                "signature": "() => Promise<string>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string>"
            },
            "docs": {
                "text": "Returns the id of the inner `input` element (if set).",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
}
