import { Component, Element, Event, Prop } from "@stencil/core";
export class GaugeRange {
    componentDidLoad() {
        this.gxGaugeRangeDidLoad.emit(this);
    }
    componentDidUnload() {
        this.gxGaugeRangeDidUnload.emit(this);
    }
    componentDidUpdate() {
        this.gxGaugeRangeDidUpdate.emit(this);
    }
    render() {
        return "";
    }
    static get is() { return "gx-gauge-range"; }
    static get originalStyleUrls() { return {
        "$": ["gauge-range.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["gauge-range.css"]
    }; }
    static get properties() { return {
        "amount": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The range length."
            },
            "attribute": "amount",
            "reflect": false
        },
        "name": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The name of the range."
            },
            "attribute": "name",
            "reflect": false
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Color property defines the color of range background.\nColor value can be any valid CSS color."
            },
            "attribute": "color",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "gxGaugeRangeDidLoad",
            "name": "gxGaugeRangeDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The gxGaugeRangeDidLoad is triggered when the component has been added and its render completely ran."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxGaugeRangeDidUnload",
            "name": "gxGaugeRangeDidUnload",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The gxGaugeRangeDidUnload is triggered when the component has been deleted"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxGaugeRangeDidUpdate",
            "name": "gxGaugeRangeDidUpdate",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The gxGaugeRangeDidUpdate is triggered when a property of the component has been changed."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
}
