import { Component, Element, Event, Method, Prop, Watch, h } from "@stencil/core";
import bodymovin from "lottie-web/build/player/lottie_light";
export class Lottie {
    constructor() {
        /**
         * This attribute lets you specify if the animation will start playing as soon as it is ready
         *
         */
        this.autoPlay = true;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify if the animation will loop
         */
        this.loop = true;
    }
    animationDataChanged() {
        this.animation.destroy();
        this.animation = null;
    }
    pathChanged() {
        this.animation.destroy();
        this.animation = null;
    }
    /**
     * Pause the animation
     */
    async pause() {
        this.animation.pause();
    }
    /**
     * Start playing the animation
     */
    async play(from = 0, to = 0) {
        if (!this.animation) {
            return;
        }
        if (from !== 0 || to !== 0) {
            if (to !== 0) {
                to = from;
                from = 0;
            }
            const fromFrame = this.durationToFrames(from);
            const toFrame = this.durationToFrames(to);
            this.animation.playSegments([fromFrame, toFrame]);
        }
        else {
            this.animation.play();
        }
    }
    /**
     * Set the progress of the animation to any point
     * @param progress: Value from 0 to 1 indicating the percentage of progress where the animation will start.
     */
    async setProgress(progress) {
        if (!this.animation) {
            return;
        }
        const progressInFrames = this.durationToFrames(progress);
        this.animation.goToAndPlay(progressInFrames, true);
    }
    /**
     * Stop the animation
     */
    async stop() {
        if (!this.animation) {
            return;
        }
        this.animation.stop();
    }
    durationToFrames(duration) {
        return Math.trunc(this.animationTotalFrames * duration);
    }
    componentDidLoad() {
        this.setAnimation();
    }
    componentDidUpdate() {
        this.setAnimation();
    }
    componentDidUnload() {
        this.animation.destroy();
    }
    setAnimation() {
        if (this.animation) {
            this.animation.loop = this.loop;
            return;
        }
        this.animation = bodymovin.loadAnimation({
            animationData: this.animationData,
            autoplay: this.autoPlay,
            container: this.element.querySelector(":scope > div"),
            loop: this.loop,
            path: this.path,
            renderer: "svg"
        });
        this.animation.addEventListener("DOMLoaded", this.animationDomLoadedHandler.bind(this));
    }
    animationDomLoadedHandler(event) {
        this.animationTotalFrames = this.animation.getDuration(true);
        this.animationLoad.emit(event);
    }
    render() {
        return h("div", null);
    }
    static get is() { return "gx-lottie"; }
    static get originalStyleUrls() { return {
        "$": ["lottie.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["lottie.css"]
    }; }
    static get properties() { return {
        "animationData": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify a Lottie animation object"
            },
            "attribute": "animation-data",
            "reflect": false
        },
        "autoPlay": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the animation will start playing as soon as it is ready"
            },
            "attribute": "auto-play",
            "reflect": false,
            "defaultValue": "true"
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "loop": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the animation will loop"
            },
            "attribute": "loop",
            "reflect": false,
            "defaultValue": "true"
        },
        "path": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify  the relative path to the animation object. (`animationData` and `path` are mutually exclusive)"
            },
            "attribute": "path",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "gxClick",
            "name": "gxClick",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is clicked."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "animationLoad",
            "name": "animationLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the animation is loaded in the DOM."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "pause": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Pause the animation",
                "tags": []
            }
        },
        "play": {
            "complexType": {
                "signature": "(from?: number, to?: number) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }, {
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Start playing the animation",
                "tags": []
            }
        },
        "setProgress": {
            "complexType": {
                "signature": "(progress: number) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "progress : Value from 0 to 1 indicating the percentage of progress where the animation will start.",
                                "name": "param"
                            }],
                        "text": ": Value from 0 to 1 indicating the percentage of progress where the animation will start."
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Set the progress of the animation to any point",
                "tags": [{
                        "name": "param",
                        "text": "progress : Value from 0 to 1 indicating the percentage of progress where the animation will start."
                    }]
            }
        },
        "stop": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Stop the animation",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "animationData",
            "methodName": "animationDataChanged"
        }, {
            "propName": "path",
            "methodName": "pathChanged"
        }]; }
}
