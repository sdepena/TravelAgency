import { Component, Element, Listen, Prop, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { ButtonRender } from "../renders/bootstrap/button/button-render";
export class Button {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event). If a disabled image has been specified,
         * it will be shown, hiding the base image (if specified).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify the relative location of the image to the text.
         *
         * | Value    | Details                                                 |
         * | -------- | ------------------------------------------------------- |
         * | `above`  | The image is located above the text.                    |
         * | `before` | The image is located before the text, in the same line. |
         * | `after`  | The image is located after the text, in the same line.  |
         * | `below`  | The image is located below the text.                    |
         * | `behind` | The image is located behind the text.                   |
         */
        this.imagePosition = "above";
        /**
         * This attribute lets you specify the size of the button.
         *
         * | Value    | Details                                                 |
         * | -------- | ------------------------------------------------------- |
         * | `large`  | Large sized button.                                     |
         * | `normal` | Standard sized button.                                  |
         * | `small`  | Small sized button.                                     |
         */
        this.size = "normal";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        this.renderer = new ButtonRender(this, {
            handleClick: this.handleClick.bind(this)
        });
    }
    handleClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            return;
        }
    }
    componentWillLoad() {
        this.renderer.componentWillLoad();
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    render() {
        return this.renderer.render({
            default: h("slot", null),
            disabledImage: h("slot", { name: "disabled-image" }),
            mainImage: h("slot", { name: "main-image" })
        });
    }
    static get is() { return "gx-button"; }
    static get originalStyleUrls() { return {
        "$": ["button.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["button.css"]
    }; }
    static get properties() { return {
        "cssClass": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "A CSS class to set as the inner `input` element class."
            },
            "attribute": "css-class",
            "reflect": false
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event). If a disabled image has been specified,\nit will be shown, hiding the base image (if specified)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "imagePosition": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"above\"\n    | \"before\"\n    | \"after\"\n    | \"below\"\n    | \"behind\"",
                "resolved": "\"above\" | \"after\" | \"before\" | \"behind\" | \"below\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the relative location of the image to the text.\n\n| Value    | Details                                                 |\n| -------- | ------------------------------------------------------- |\n| `above`  | The image is located above the text.                    |\n| `before` | The image is located before the text, in the same line. |\n| `after`  | The image is located after the text, in the same line.  |\n| `below`  | The image is located below the text.                    |\n| `behind` | The image is located behind the text.                   |"
            },
            "attribute": "image-position",
            "reflect": false,
            "defaultValue": "\"above\""
        },
        "size": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"large\" | \"normal\" | \"small\"",
                "resolved": "\"large\" | \"normal\" | \"small\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the size of the button.\n\n| Value    | Details                                                 |\n| -------- | ------------------------------------------------------- |\n| `large`  | Large sized button.                                     |\n| `normal` | Standard sized button.                                  |\n| `small`  | Small sized button.                                     |"
            },
            "attribute": "size",
            "reflect": false,
            "defaultValue": "\"normal\""
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleClick",
            "target": undefined,
            "capture": true,
            "passive": false
        }]; }
}
