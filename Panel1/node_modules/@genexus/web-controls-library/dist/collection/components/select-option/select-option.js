import { Component, Element, Event, Prop, Watch, h, Host } from "@stencil/core";
export class SelectOption {
    constructor() {
        /**
         * Indicates that the control is selected by default.
         */
        this.selected = false;
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
    }
    selectedChanged(isSelected) {
        if (isSelected) {
            this.gxSelect.emit({ select: this });
        }
    }
    disabledChanged(isDisabled) {
        if (isDisabled) {
            this.gxDisable.emit({ select: this });
        }
    }
    valueChanged() {
        this.change.emit({ select: this });
    }
    componentDidLoad() {
        this.gxSelectDidLoad.emit({ select: this });
    }
    componentDidUnload() {
        this.gxSelectDidUnload.emit({ select: this });
    }
    render() {
        return (h(Host, { "aria-hidden": "true", hidden: true },
            h("slot", null)));
    }
    static get is() { return "gx-select-option"; }
    static get properties() { return {
        "selected": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates that the control is selected by default."
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "cssClass": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "A CSS class to set as the inner `input` element class."
            },
            "attribute": "css-class",
            "reflect": false
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "value": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The initial value of the control."
            },
            "attribute": "value",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "change",
            "name": "change",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The `change` event is emitted when a change to the element's value is\ncommitted by the user."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxSelect",
            "name": "gxSelect",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the option is selected."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxDisable",
            "name": "gxDisable",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the option is disabled."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxSelectDidLoad",
            "name": "gxSelectDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the option loads."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxSelectDidUnload",
            "name": "gxSelectDidUnload",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the option unloads."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "selected",
            "methodName": "selectedChanged"
        }, {
            "propName": "disabled",
            "methodName": "disabledChanged"
        }, {
            "propName": "value",
            "methodName": "valueChanged"
        }]; }
}
