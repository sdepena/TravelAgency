import { Component, Element, Host, Listen, Prop, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { cssVariablesWatcher } from "../common/css-variables-watcher";
import lazySizes from "lazysizes";
const LAZY_LOAD_CLASS = "gx-lazyload";
const LAZY_LOADING_CLASS = "gx-lazyloading";
const LAZY_LOADED_CLASS = "gx-lazyloaded";
const lazyLoadedImages = new Set();
export class Image {
    constructor() {
        /**
         * This attribute lets you specify the alternative text.
         */
        this.alt = "";
        /**
         * If true, the component will be sized to match the image's intrinsic size when not constrained
         * via CSS dimension properties (for example, height or width).
         * If false, the component will never force its height to match the image's intrinsic size. The width, however,
         * will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
         */
        this.autoGrow = true;
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to lazy load the image, when it enters the viewport.
         */
        this.lazyLoad = true;
        /**
         * This attribute lets you specify the low resolution image SRC.
         */
        this.lowResolutionSrc = "";
        /**
         * This attribute lets you specify the SRC.
         */
        this.src = "";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        cssVariablesWatcher(this, [
            {
                cssVariableName: "--image-scale-type",
                propertyName: "scaleType"
            },
            {
                cssVariableName: "--height",
                propertyName: "height"
            },
            {
                cssVariableName: "--width",
                propertyName: "width"
            }
        ]);
        this.handleClick = this.handleClick.bind(this);
        this.handleImageLoad = this.handleImageLoad.bind(this);
        this.handleLazyLoaded = this.handleLazyLoaded.bind(this);
        document.addEventListener("lazyloaded", this.handleLazyLoaded);
    }
    handleClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            return;
        }
    }
    handleImageLoad(event) {
        if (!this.autoGrow) {
            const img = event.target;
            // Some image formats do not specify intrinsic dimensions. The naturalWidth property returns 0 in those cases.
            if (img.naturalWidth !== 0) {
                if (this.element.clientWidth > 0) {
                    if (img.naturalWidth > this.element.clientWidth) {
                        this.width = `${this.element.clientWidth}px`;
                    }
                    else {
                        this.width = null;
                    }
                }
                else {
                    this.width = `${img.naturalWidth}px`;
                }
            }
        }
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    disconnectedCallback() {
        document.removeEventListener("lazyloaded", this.handleLazyLoaded);
    }
    render() {
        const shouldLazyLoad = this.shouldLazyLoad();
        const isHeightSpecified = !!this.height;
        const isWidthSpecified = !!this.width;
        const body = this.src
            ? [
                h("img", { class: {
                        [LAZY_LOAD_CLASS]: shouldLazyLoad,
                        "gx-image-tile": this.scaleType === "tile"
                    }, style: this.getInnerImageStyle(isWidthSpecified, isHeightSpecified), onClick: this.handleClick, onLoad: this.handleImageLoad, "data-src": shouldLazyLoad ? this.src : undefined, src: !shouldLazyLoad ? this.src : undefined, alt: this.alt }),
                h("span", null)
            ]
            : [];
        return (h(Host, { class: {
                "gx-img-lazyloading": shouldLazyLoad,
                "gx-img-no-auto-grow": !this.autoGrow
            }, style: {
                alignSelf: isHeightSpecified ? "unset" : null,
                justifySelf: isWidthSpecified ? "unset" : null,
                height: isHeightSpecified
                    ? `calc(${this.height} + var(--margin-top, 0px) + var(--margin-bottom, 0px))`
                    : null,
                width: isWidthSpecified
                    ? `calc(${this.width} + var(--margin-left, 0px) + var(--margin-right, 0px))`
                    : null
            } }, body));
    }
    getInnerImageStyle(isWidthSpecified, isHeightSpecified) {
        const scaleType = this.scaleType === "tile"
            ? { backgroundImage: `url(${this.src})` }
            : { objectFit: this.scaleType };
        const dimensions = this.autoGrow
            ? {}
            : {
                width: isWidthSpecified ? this.width : undefined,
                height: isHeightSpecified ? this.height : undefined,
                left: isWidthSpecified
                    ? `calc(50% - ((${this.width} - var(--margin-left, 0px) - var(--margin-right, 0px)) / 2))`
                    : undefined,
                top: isHeightSpecified
                    ? `calc(50% - ((${this.height} - var(--margin-top, 0px) - var(--margin-bottom, 0px)) / 2))`
                    : undefined
            };
        return Object.assign(Object.assign({}, scaleType), dimensions);
    }
    shouldLazyLoad() {
        if (!this.lazyLoad) {
            return false;
        }
        if (lazyLoadedImages.has(this.src)) {
            return false;
        }
        const img = this.element.querySelector("img");
        return img === null || img.classList.contains(LAZY_LOAD_CLASS);
    }
    handleLazyLoaded(event) {
        const img = this.element.querySelector("img");
        if (event.target === img) {
            this.element.classList.remove("gx-img-lazyloading");
            lazyLoadedImages.add(this.src);
        }
    }
    static get is() { return "gx-image"; }
    static get originalStyleUrls() { return {
        "$": ["image.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["image.css"]
    }; }
    static get properties() { return {
        "alt": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the alternative text."
            },
            "attribute": "alt",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "autoGrow": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If true, the component will be sized to match the image's intrinsic size when not constrained\nvia CSS dimension properties (for example, height or width).\nIf false, the component will never force its height to match the image's intrinsic size. The width, however,\nwill match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically."
            },
            "attribute": "auto-grow",
            "reflect": false,
            "defaultValue": "true"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "height": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the height."
            },
            "attribute": "height",
            "reflect": false
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "lazyLoad": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to lazy load the image, when it enters the viewport."
            },
            "attribute": "lazy-load",
            "reflect": false,
            "defaultValue": "true"
        },
        "lowResolutionSrc": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"\"",
                "resolved": "\"\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the low resolution image SRC."
            },
            "attribute": "low-resolution-src",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "scaleType": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "| \"contain\"\n    | \"cover\"\n    | \"fill\"\n    | \"none\"\n    | \"tile\"",
                "resolved": "\"contain\" | \"cover\" | \"fill\" | \"none\" | \"tile\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute allows specifing how the image is sized according to its container.\n`contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property.\nThe `tile` value repeats the image, both vertically and horizontally, creating a tile effect."
            },
            "attribute": "scale-type",
            "reflect": false
        },
        "src": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the SRC."
            },
            "attribute": "src",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "width": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the width."
            },
            "attribute": "width",
            "reflect": false
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleClick",
            "target": undefined,
            "capture": true,
            "passive": false
        }]; }
}
lazySizes.cfg.lazyClass = LAZY_LOAD_CLASS;
lazySizes.cfg.loadingClass = LAZY_LOADING_CLASS;
lazySizes.cfg.loadedClass = LAZY_LOADED_CLASS;
