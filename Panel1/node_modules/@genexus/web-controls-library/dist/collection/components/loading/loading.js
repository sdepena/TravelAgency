import { Component, Element, Prop, State, Watch, h } from "@stencil/core";
export class Loading {
    constructor() {
        this.lottiePath = "";
        /**
         * Sets if the loading dialog is presented.
         */
        this.presented = false;
        /**
         * Sets the value when type is determinate. Must be a value between 0 and 1.
         *
         */
        this.value = 0;
    }
    valueWatchHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        if (this.lottiePath) {
            const gxLottie = this.element.querySelector("gx-lottie");
            if (gxLottie !== null) {
                const from = oldValue > newValue ? 0 : oldValue;
                gxLottie.play(from, newValue);
            }
        }
    }
    presentedWatchHandler(newValue, oldValue = false) {
        if (newValue === oldValue) {
            return;
        }
        if (newValue) {
            this.present();
        }
        else {
            this.dismiss();
        }
    }
    present() {
        const rawLottiePath = window
            .getComputedStyle(this.element.querySelector(".gx-lottie-test"))
            .getPropertyValue("--gx-lottie-file-path");
        if (rawLottiePath) {
            this.lottiePath = rawLottiePath
                .trim()
                .replace(/^"/, "")
                .replace(/"$/, "");
        }
        this.element.style.display = "block";
    }
    dismiss() {
        this.element.style.display = "none";
    }
    render() {
        this.element.style.display = this.presented ? "block" : "none";
        return (h("div", { class: "box", role: "dialog" },
            h("div", { class: "gx-lottie-test" }),
            this.lottiePath ? (h("gx-lottie", { path: this.lottiePath, loop: this.type === "indeterminate", autoPlay: this.type === "indeterminate" })) : (h("div", { class: {
                    [this.type]: true,
                    loader: true
                } },
                h("div", { class: "loader-inner", style: {
                        width: `${this.value * 100}%`
                    } }))),
            h("div", { class: "title" }, this.caption),
            h("div", { class: "description" }, this.description)));
    }
    static get is() { return "gx-loading"; }
    static get originalStyleUrls() { return {
        "$": ["loading.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["loading.css"]
    }; }
    static get properties() { return {
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the description text."
            },
            "attribute": "description",
            "reflect": false
        },
        "caption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the caption text."
            },
            "attribute": "caption",
            "reflect": false
        },
        "presented": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets if the loading dialog is presented."
            },
            "attribute": "presented",
            "reflect": false,
            "defaultValue": "false"
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"determinate\" | \"indeterminate\"",
                "resolved": "\"determinate\" | \"indeterminate\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the value."
            },
            "attribute": "type",
            "reflect": false
        },
        "value": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "0",
                "resolved": "0",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Sets the value when type is determinate. Must be a value between 0 and 1."
            },
            "attribute": "value",
            "reflect": false,
            "defaultValue": "0"
        }
    }; }
    static get states() { return {
        "lottiePath": {}
    }; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "value",
            "methodName": "valueWatchHandler"
        }, {
            "propName": "presented",
            "methodName": "presentedWatchHandler"
        }]; }
}
