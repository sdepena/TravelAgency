export function debounce(func, wait, immediate = false) {
    let timeout;
    return function (...args) {
        const later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(this, args);
            }
        }.bind(this);
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(this, args);
        }
    };
}
export function overrideMethod(component, methodName, { before, after }) {
    const oldMethod = component[methodName];
    component[methodName] = () => {
        if (before !== undefined) {
            before();
        }
        if (oldMethod !== undefined) {
            oldMethod.call(component);
        }
        if (after !== undefined) {
            after();
        }
    };
}
