export const watchForItems = (containerEl, tagName, onChange) => {
    if (typeof MutationObserver === "undefined") {
        return;
    }
    const mutation = new MutationObserver(mutationList => {
        onChange(getSelectedItem(mutationList, tagName));
    });
    mutation.observe(containerEl, {
        childList: true,
        subtree: true
    });
    return mutation;
};
function getSelectedItem(mutationList, tagName) {
    let newOption;
    mutationList.forEach(mut => {
        for (let i = 0; i < mut.addedNodes.length; i++) {
            newOption = findCheckedItem(mut.addedNodes[i], tagName) || newOption;
        }
    });
    return newOption;
}
export function findCheckedItem(el, tagName) {
    if (el.nodeType !== 1) {
        return undefined;
    }
    const options = el.tagName === tagName.toUpperCase()
        ? [el]
        : Array.from(el.querySelectorAll(tagName));
    return options.find((o) => o.value === el.value);
}
