@charset "UTF-8";
.gx-line-clamp {
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: var(--max-lines);
  overflow: hidden;
  max-height: var(--max-height);
}

.line-measuring {
  visibility: hidden;
  position: absolute;
}

.gx-grid-base {
  flex: 1;
}
.gx-grid-base > *[slot=grid-content]:not(virtual-scroller), .gx-grid-base > * > .scrollable-content {
  flex: 1;
}
.gx-grid-base > .grid-empty-placeholder, .gx-grid-base > [slot=grid-empty-loading-placeholder] {
  display: none;
}
.gx-grid-base > .grid-empty-placeholder[hidden], .gx-grid-base > [slot=grid-empty-loading-placeholder][hidden] {
  display: none !important;
}
.gx-grid-base > .grid-empty-placeholder[hidden][invisible-mode=keep-space], .gx-grid-base > [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space] {
  display: none !important;
  visibility: hidden;
}
.gx-grid-base > .grid-empty-placeholder > [slot=grid-content-empty] {
  flex: 1;
}

.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) > :first-child {
  display: none;
}
.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) > :first-child[hidden] {
  display: none !important;
}
.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) > :first-child[hidden][invisible-mode=keep-space] {
  display: none !important;
  visibility: hidden;
}
.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder {
  display: flex;
  flex: 1;
  height: 100%;
  align-items: center;
  justify-content: center;
}
.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden] {
  display: none !important;
}
.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden][invisible-mode=keep-space] {
  display: flex !important;
  visibility: hidden;
}

.gx-grid-base.gx-grid-empty > *[slot=grid-content]:not(virtual-scroller), .gx-grid-base.gx-grid-empty > * > .scrollable-content,
.gx-grid-base.gx-grid-empty .gx-grid-paging {
  display: none;
}
.gx-grid-base.gx-grid-empty > *[slot=grid-content]:not(virtual-scroller)[hidden], .gx-grid-base.gx-grid-empty > * > .scrollable-content[hidden],
.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden] {
  display: none !important;
}
.gx-grid-base.gx-grid-empty > *[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space], .gx-grid-base.gx-grid-empty > * > .scrollable-content[hidden][invisible-mode=keep-space],
.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden][invisible-mode=keep-space] {
  display: none !important;
  visibility: hidden;
}

.gx-grid-base.gx-grid-empty-loading > :first-child {
  display: none;
}
.gx-grid-base.gx-grid-empty-loading > :first-child[hidden] {
  display: none !important;
}
.gx-grid-base.gx-grid-empty-loading > :first-child[hidden][invisible-mode=keep-space] {
  display: none !important;
  visibility: hidden;
}
.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder] {
  display: flex;
  flex: 1;
  align-items: center;
  justify-content: center;
  text-align: center;
}
.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden] {
  display: none !important;
}
.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space] {
  display: flex !important;
  visibility: hidden;
}

.gx-grid-row {
  position: relative;
}

gx-grid-flex {
  /**
   * @prop --gx-grid-flex-wrap: By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
   *
   * | Value        | Details                                                                                        |
   * | ------------ | ---------------------------------------------------------------------------------------------- |
   * | `nowrap` | all flex items will be on one line
   * | `wrap`   | flex items will wrap onto multiple lines, from top to bottom.
   * | `wrap-reverse`   | flex items will wrap onto multiple lines from bottom to top.
   */
  --gx-grid-flex-wrap: nowrap;
  /**
   * @prop --gx-grid-flex-justify-content: This defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items 
      on a line are inflexible, or are flexible but have reached their maximum size. 
      It also exerts some control over the alignment of items when they overflow the line.
   */
  --gx-grid-flex-justify-content: flex-start;
  /**
   * @prop --gx-grid-flex-align-items: This defines the default behavior for how flex items are laid out along the cross axis on the current line. 
      Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).
   */
  --gx-grid-flex-align-items: stretch;
  /**
   * @prop --gx-grid-flex-align-content: This aligns a flex containerâ€™s lines within when there is extra space in the cross-axis, 
      similar to how justify-content aligns individual items within the main-axis.
   */
  --gx-grid-flex-align-content: normal;
  display: flex;
}
gx-grid-flex[hidden] {
  display: none !important;
}
gx-grid-flex[hidden][invisible-mode=keep-space] {
  display: flex !important;
  visibility: hidden;
}
gx-grid-flex > div {
  flex: 1;
}
gx-grid-flex > *[slot=grid-content]:not(virtual-scroller), gx-grid-flex > * > .scrollable-content {
  display: flex;
  flex-direction: var(--gx-grid-flex-direction);
  flex-wrap: var(--gx-grid-flex-wrap);
  justify-content: var(--gx-grid-flex-justify-content);
  align-items: var(--gx-grid-flex-align-items);
  align-content: var(--gx-grid-flex-align-content);
}
gx-grid-flex > *[slot=grid-content]:not(virtual-scroller)[hidden], gx-grid-flex > * > .scrollable-content[hidden] {
  display: none !important;
}
gx-grid-flex > *[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space], gx-grid-flex > * > .scrollable-content[hidden][invisible-mode=keep-space] {
  display: flex !important;
  visibility: hidden;
}
gx-grid-flex > *[slot=grid-content]:not(virtual-scroller)[flex-direction=row] > *[slot=grid-content]:not(virtual-scroller) > gx-grid-smart-cell[relative-size], gx-grid-flex > *[slot=grid-content]:not(virtual-scroller)[flex-direction=row] > * > .scrollable-content > gx-grid-smart-cell[relative-size], gx-grid-flex > * > .scrollable-content[flex-direction=row] > *[slot=grid-content]:not(virtual-scroller) > gx-grid-smart-cell[relative-size], gx-grid-flex > * > .scrollable-content[flex-direction=row] > * > .scrollable-content > gx-grid-smart-cell[relative-size] {
  min-width: calc( var(--gx-grid-css-viewport-width) * var(--gx-grid-item-relative-size) );
}
gx-grid-flex gx-grid-smart-cell {
  display: flex;
}
gx-grid-flex gx-grid-smart-cell[hidden] {
  display: none !important;
}
gx-grid-flex gx-grid-smart-cell[hidden][invisible-mode=keep-space] {
  display: flex !important;
  visibility: hidden;
}
gx-grid-flex gx-grid-smart-cell > * {
  flex: 1;
}