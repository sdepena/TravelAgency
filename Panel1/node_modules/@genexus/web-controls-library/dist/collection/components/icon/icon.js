import { Component, Element, Host, Prop, State, Watch, getAssetPath, h } from "@stencil/core";
import { getSvgContent, iconContent } from "./requests";
const CAMEL_CASE_TO_HYPHENED_REGEX = /(.)([A-Z])/g;
export class Icon {
    constructor() {
        /**
         * A label for the icon, for screen readers to use.
         */
        this.label = "";
        /**
         * If enabled, the icon will be loaded lazily when it's visible in the viewport.
         */
        this.lazy = false;
        /**
         * The type of icon. Possible values: the name each of the icons in /assets.
         */
        this.type = "none";
        this.isVisible = false;
    }
    connectedCallback() {
        // purposely do not return the promise here because loading
        // the svg file should not hold up loading the app
        // only load the svg if it's visible
        this.waitUntilVisible(this.element, "50px", () => {
            this.isVisible = true;
            this.getIcon();
        });
    }
    disconnectedCallback() {
        if (this.io !== undefined) {
            this.io.disconnect();
            this.io = undefined;
        }
    }
    waitUntilVisible(el, rootMargin, callback) {
        if (this.lazy &&
            typeof window !== "undefined" &&
            window.IntersectionObserver) {
            const io = (this.io = new window.IntersectionObserver((data) => {
                if (data[0].isIntersecting) {
                    io.disconnect();
                    this.io = undefined;
                    callback();
                }
            }, { rootMargin }));
            io.observe(el);
        }
        else {
            // browser doesn't support IntersectionObserver
            // so just fallback to always show it
            callback();
        }
    }
    async getIcon() {
        if (this.isVisible) {
            if (this.type === "none") {
                this.svgContent = "";
                return;
            }
            const fileName = this.getFileName();
            const url = getAssetPath(`./assets/${fileName}`);
            if (url) {
                if (iconContent.has(url)) {
                    this.svgContent = iconContent.get(url);
                }
                else {
                    this.svgContent = await getSvgContent(url);
                }
            }
        }
    }
    getFileName() {
        const name = this.type
            .replace(CAMEL_CASE_TO_HYPHENED_REGEX, "$1-$2")
            .toLowerCase();
        return `${name}.svg`;
    }
    render() {
        return (h(Host, { "aria-label": this.label || this.type },
            h("div", { class: {
                    "svg-icon-native": true
                }, style: this.color && {
                    "--gx-icon-color": this.color
                }, innerHTML: this.svgContent })));
    }
    static get is() { return "gx-icon"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["icon.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["icon.css"]
    }; }
    static get assetsDirs() { return ["assets"]; }
    static get properties() { return {
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The color of the icon."
            },
            "attribute": "color",
            "reflect": false
        },
        "label": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "A label for the icon, for screen readers to use."
            },
            "attribute": "label",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "lazy": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If enabled, the icon will be loaded lazily when it's visible in the viewport."
            },
            "attribute": "lazy",
            "reflect": false,
            "defaultValue": "false"
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The type of icon. Possible values: the name each of the icons in /assets."
            },
            "attribute": "type",
            "reflect": false,
            "defaultValue": "\"none\""
        }
    }; }
    static get states() { return {
        "isVisible": {},
        "svgContent": {}
    }; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "type",
            "methodName": "getIcon"
        }]; }
}
