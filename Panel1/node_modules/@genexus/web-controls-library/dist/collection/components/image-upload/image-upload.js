import { Component, Element, Event, Host, Prop, h } from "@stencil/core";
export class ImageUpload {
    constructor() {
        /**
         * This attribute lets you specify the alternative text.
         */
        this.alt = "";
        /**
         * If true, the component will be sized to match the image's intrinsic size when not constrained
         * via CSS dimension properties (for example, height or width).
         * If false, the component will never force its height to match the image's intrinsic size. The width, however,
         * will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
         */
        this.autoGrow = true;
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to lazy load the image, when it enters the viewport.
         */
        this.lazyLoad = true;
        /**
         * This attribute lets you specify the low resolution image SRC.
         */
        this.lowResolutionSrc = "";
        /**
         * This attribute lets you specify the SRC.
         */
        this.src = "";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        /**
         * This attribute lets you specify if the image is readonly.
         * If readonly, it will not allow to use the edit button.
         * In fact, the edit button will not be shown.
         */
        this.readonly = false;
        /**
         * This attribute lets you specify the modal title.
         */
        this.modalTitle = null;
        /**
         * This attribute lets you specify the description of the
         * change image button in the modal.
         */
        this.changeButtonText = "Change image...";
        /**
         * This attribute lets you specify the description of the
         * remove image button in the modal.
         */
        this.removeButtonText = "Remove image";
        /**
         * This attribute lets you specify the description of the
         * cancel action button in the modal.
         */
        this.cancelButtonText = "CANCEL";
        // Used to read the images
        this.reader = new FileReader();
        // Emits the image click event
        this.clickImageAction = (event) => {
            this.click.emit(event);
        };
        // If there is no image, this directly opens the File System to select an image.
        // In othercase, this allows to change or remove the image
        this.triggerAction = (event) => {
            if (this.src === "") {
                this.input.click();
            }
            else {
                this.modal.opened = true;
            }
            event.stopPropagation();
        };
        this.clearImageAction = () => {
            this.input.value = "";
            this.src = "";
            this.alt = "";
            this.onImageChanged.emit(null);
            this.closeAction();
        };
        // When the modal closes
        this.closeAction = () => {
            this.modal.opened = false;
        };
        // When the file is selected
        this.fileSelectedAction = () => {
            const elem = this.element;
            const file = this.input.files[0];
            // This allows to catch an error when the user select a filename, but then
            // cancels the operation
            if (file == null) {
                return;
            }
            this.alt = this.getFileNameWithoutExtension(file.name);
            this.reader.addEventListener("load", function () {
                // Convert image file to base64 string
                elem.src = this.result.toString();
            }, false);
            this.reader.readAsDataURL(file);
            this.closeAction();
            this.onImageChanged.emit(file);
        };
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    getFileNameWithoutExtension(fileName) {
        const index = fileName.lastIndexOf(".");
        if (index === -1) {
            return fileName;
        }
        else {
            return fileName.substring(0, index);
        }
    }
    // SVG used to print the search image button
    getSearchPlusSolidSVG() {
        return (h("svg", { viewBox: "3 2 20 20" },
            h("path", { d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" }),
            h("path", { d: "M0 0h24v24H0z", fill: "none" })));
    }
    // SVG used to print the change image button
    getPencilAltSolidSVG() {
        return (h("svg", { viewBox: "0 -35 570 570" },
            h("path", { fill: "black", d: "M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z" })));
    }
    render() {
        return (h(Host, null,
            h("div", { class: "click-capture", onClick: this.stopPropagation },
                h("gx-image", { class: "image-viewer-image", alt: this.alt, autoGrow: this.autoGrow, disabled: this.disabled, height: this.height, invisibleMode: this.invisibleMode, lazyLoad: this.lazyLoad, lowResolutionSrc: this.lowResolutionSrc, scaleType: this.scaleType, src: this.src, width: this.width, highlightable: this.highlightable, onClick: this.clickImageAction }, !this.readonly && (h("div", { class: {
                        "button-edit-container": true,
                        bottom: this.src !== ""
                    } },
                    h("button", { class: "image-edit", disabled: this.disabled, onClick: this.triggerAction }, this.src === ""
                        ? this.getSearchPlusSolidSVG()
                        : this.getPencilAltSolidSVG())))),
                h("gx-modal", { class: "action-dialog", ref: el => (this.modal = el) },
                    h("div", { slot: "header" }, this.modalTitle === null ? document.title : this.modalTitle),
                    h("div", { class: "body-container", slot: "body" },
                        h("label", { class: "file" },
                            h("input", { type: "file", onChange: this.fileSelectedAction, ref: el => (this.input = el) }),
                            h("span", { class: "file-custom" }, this.changeButtonText)),
                        h("gx-button", { class: "remove-button", onClick: this.clearImageAction }, this.removeButtonText)),
                    h("div", { slot: "secondary-action" },
                        h("gx-button", { class: "cancel-button", onClick: this.closeAction }, this.cancelButtonText))))));
    }
    static get is() { return "gx-image-upload"; }
    static get originalStyleUrls() { return {
        "$": ["image-upload.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["image-upload.css"]
    }; }
    static get properties() { return {
        "alt": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the alternative text."
            },
            "attribute": "alt",
            "reflect": true,
            "defaultValue": "\"\""
        },
        "autoGrow": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If true, the component will be sized to match the image's intrinsic size when not constrained\nvia CSS dimension properties (for example, height or width).\nIf false, the component will never force its height to match the image's intrinsic size. The width, however,\nwill match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically."
            },
            "attribute": "auto-grow",
            "reflect": false,
            "defaultValue": "true"
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "height": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the height."
            },
            "attribute": "height",
            "reflect": false
        },
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "lazyLoad": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to lazy load the image, when it enters the viewport."
            },
            "attribute": "lazy-load",
            "reflect": false,
            "defaultValue": "true"
        },
        "lowResolutionSrc": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"\"",
                "resolved": "\"\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the low resolution image SRC."
            },
            "attribute": "low-resolution-src",
            "reflect": false,
            "defaultValue": "\"\""
        },
        "scaleType": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "| \"contain\"\n    | \"cover\"\n    | \"fill\"\n    | \"none\"\n    | \"tile\"",
                "resolved": "\"contain\" | \"cover\" | \"fill\" | \"none\" | \"tile\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute allows specifing how the image is sized according to its container.\n`contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property.\nThe `tile` value repeats the image, both vertically and horizontally, creating a tile effect."
            },
            "attribute": "scale-type",
            "reflect": false
        },
        "src": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the SRC."
            },
            "attribute": "src",
            "reflect": true,
            "defaultValue": "\"\""
        },
        "width": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the width."
            },
            "attribute": "width",
            "reflect": false
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        },
        "readonly": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the image is readonly.\nIf readonly, it will not allow to use the edit button.\nIn fact, the edit button will not be shown."
            },
            "attribute": "readonly",
            "reflect": false,
            "defaultValue": "false"
        },
        "modalTitle": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the modal title."
            },
            "attribute": "modal-title",
            "reflect": false,
            "defaultValue": "null"
        },
        "changeButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Change image...\"",
                "resolved": "\"Change image...\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the description of the\nchange image button in the modal."
            },
            "attribute": "change-button-text",
            "reflect": false,
            "defaultValue": "\"Change image...\""
        },
        "removeButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Remove image\"",
                "resolved": "\"Remove image\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the description of the\nremove image button in the modal."
            },
            "attribute": "remove-button-text",
            "reflect": false,
            "defaultValue": "\"Remove image\""
        },
        "cancelButtonText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"CANCEL\"",
                "resolved": "\"CANCEL\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the description of the\ncancel action button in the modal."
            },
            "attribute": "cancel-button-text",
            "reflect": false,
            "defaultValue": "\"CANCEL\""
        }
    }; }
    static get events() { return [{
            "method": "click",
            "name": "click",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the image is clicked"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "onImageChanged",
            "name": "onImageChanged",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the image is changed"
            },
            "complexType": {
                "original": "File",
                "resolved": "File",
                "references": {
                    "File": {
                        "location": "global"
                    }
                }
            }
        }]; }
    static get elementRef() { return "element"; }
}
