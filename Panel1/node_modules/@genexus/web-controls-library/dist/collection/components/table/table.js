import { Component, Element, Event, Host, Listen, Prop, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { makeSwipeable } from "../common/swipeable";
export class Table {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
    }
    handleClick(event) {
        if (this.disabled) {
            event.stopPropagation();
            return;
        }
    }
    componentDidLoad() {
        makeSwipeable(this);
        makeHighlightable(this);
    }
    render() {
        if (this.areasTemplate) {
            this.element.style["gridTemplateAreas"] = this.areasTemplate;
        }
        if (this.columnsTemplate) {
            this.element.style["gridTemplateColumns"] = this.columnsTemplate;
        }
        if (this.rowsTemplate) {
            this.element.style["gridTemplateRows"] = this.rowsTemplate;
        }
        return (h(Host, null,
            h("slot", null)));
    }
    static get is() { return "gx-table"; }
    static get originalStyleUrls() { return {
        "$": ["table.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["table.css"]
    }; }
    static get properties() { return {
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the element is disabled.\nIf disabled, it will not fire any user interaction related event\n(for example, click event)."
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "areasTemplate": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Like the `grid-templates-areas` CSS property, this attribute defines a grid\ntemplate by referencing the names of the areas which are specified with the\ncells [area attribute](../table-cell/readme.md#area). Repeating the name of\nan area causes the content to span those cells. A period signifies an\nempty cell. The syntax itself provides a visualization of the structure of\nthe grid."
            },
            "attribute": "areas-template",
            "reflect": false
        },
        "columnsTemplate": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Like the `grid-templates-columns` CSS property, this attribute defines\nthe columns of the grid with a space-separated list of values. The values\nrepresent the width of column."
            },
            "attribute": "columns-template",
            "reflect": false
        },
        "rowsTemplate": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Like the `grid-templates-rows` CSS property, this attribute defines the\nrows of the grid with a space-separated list of values. The values\nrepresent the height of each row."
            },
            "attribute": "rows-template",
            "reflect": false
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "swipe",
            "name": "swipe",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeUp",
            "name": "swipeUp",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped in upward direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeRight",
            "name": "swipeRight",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped right direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeDown",
            "name": "swipeDown",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped downward direction."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "swipeLeft",
            "name": "swipeLeft",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emitted when the element is swiped left direction.."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "click",
            "method": "handleClick",
            "target": undefined,
            "capture": true,
            "passive": false
        }]; }
}
