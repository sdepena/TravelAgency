import { Component, Element, Host, Listen, Prop, State, h } from "@stencil/core";
export class QueryViewer {
    constructor() {
        this.mapServices = {
            net: "gxqueryviewerforsd.aspx",
            java: "qviewer.services.gxqueryviewerforsd"
        };
        this.propsNotToPost = [
            "baseUrl",
            "env",
            "mapServices",
            "object",
            "objectCall",
            "propsNotToPost",
            "parameters",
            "elements",
            "dataVersionId"
        ];
        this.configurationObserver = new MutationObserver(() => {
            this.configurationChangedHandler();
        });
    }
    parameterValueChangedHandler(eventInfo) {
        eventInfo.stopPropagation();
        this.getParameters();
    }
    elementChangedHandler(eventInfo) {
        eventInfo.stopPropagation();
        this.getElements();
    }
    configurationChangedHandler() {
        this.getParameters();
        this.getElements();
    }
    componentWillLoad() {
        this.getParameters();
        this.getElements();
    }
    componentDidLoad() {
        this.configurationObserver.observe(this.element, {
            childList: true,
            subtree: true
        });
    }
    componentDidRender() {
        const form = this.element.querySelector("form");
        form.submit();
    }
    disconnectedCallback() {
        this.configurationObserver.disconnect();
    }
    parseObjectToObjectcall() {
        try {
            this.objectCall = JSON.parse(this.object);
        }
        catch (e) {
            this.objectCall = null;
        }
    }
    hasObjectCall() {
        return Array.isArray(this.objectCall) && this.objectCall.length >= 2;
    }
    loadObjectNameFromObjectCall() {
        if (this.hasObjectCall()) {
            this.objectName = this.objectCall[1];
        }
    }
    postData() {
        this.parseObjectToObjectcall();
        this.loadObjectNameFromObjectCall();
        return [
            ...Object.keys(QueryViewer.prototype)
                .filter(key => !this.propsNotToPost.includes(key))
                .map(key => h("input", { type: "hidden", name: key, value: this[key] })),
            h("input", { type: "hidden", name: "Elements", value: this.elements }),
            h("input", { type: "hidden", name: "Parameters", value: this.parameters })
        ];
    }
    getParameters() {
        const parametersValue = [];
        if (this.hasObjectCall()) {
            this.objectCall.slice(2).forEach(value => {
                const parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(value);
                parameterObject["Name"] = "";
                parametersValue.push(parameterObject);
            });
        }
        else {
            const parameters = Array.from(document.getElementsByTagName("gx-query-viewer-parameter"));
            parameters.forEach(parameter => {
                const parameterObject = {};
                parameterObject["Value"] = encodeURIComponent(parameter.Value);
                parameterObject["Name"] = parameter.Name;
                parametersValue.push(parameterObject);
            });
        }
        this.parameters = JSON.stringify(parametersValue);
    }
    getElements() {
        const elementsValue = [];
        const elements = Array.from(document.getElementsByTagName("gx-query-viewer-element"));
        elements.forEach(ax => {
            const elementObjectValue = {};
            elementObjectValue["Name"] = ax.name;
            elementObjectValue["Title"] = ax.elementTitle;
            elementObjectValue["Visible"] = ax.visible;
            elementObjectValue["Type"] = ax.type;
            elementObjectValue["Axis"] = ax.axis;
            elementObjectValue["Aggregation"] = ax.aggregation;
            elementObjectValue["DataField"] = ax.dataField;
            if (ax.axisOrderType) {
                elementObjectValue["AxisOrder"] = { Type: ax.axisOrderType };
                if (ax.axisOrderValues) {
                    elementObjectValue["AxisOrder"]["Values"] = ax.axisOrderValues;
                }
            }
            if (ax.filterType) {
                elementObjectValue["Filter"] = { Type: ax.filterType };
                if (ax.axisOrderValues) {
                    elementObjectValue["Filter"]["Values"] = ax.filterValues;
                }
            }
            if (ax.expandCollapseType) {
                elementObjectValue["ExpandCollapse"] = { Type: ax.expandCollapseType };
                if (ax.axisOrderValues) {
                    elementObjectValue["ExpandCollapse"]["Values"] =
                        ax.expandCollapseValues;
                }
            }
            const grouping = this.getGrouping(ax);
            if (Object.keys(grouping).length > 0) {
                elementObjectValue["Grouping"] = grouping;
            }
            if (ax.raiseItemClick) {
                const action = { RaiseItemClick: ax.raiseItemClick };
                elementObjectValue["Action"] = action;
            }
            const formats = Array.from(ax.getElementsByTagName("gx-query-viewer-element-format"));
            formats.forEach(format => {
                const formatObject = {};
                formatObject["Picture"] = format.picture;
                formatObject["Subtotals"] = format.subtotals;
                formatObject["CanDragToPages"] = format.canDragToPages;
                formatObject["Style"] = format.formatStyle;
                formatObject["TargetValue"] = format.targetValue;
                formatObject["MaximumValue"] = format.maximumValue;
                const styles = Array.from(ax.getElementsByTagName("gx-query-viewer-format-style"));
                const valuesStyles = [];
                const conditionalStyles = [];
                styles.forEach(style => {
                    if (style.type === "Values") {
                        const valueStyle = {
                            Value: style.value,
                            ApplyToRowOrColumn: style.applyToRowOrColumn,
                            StyleOrClass: style.styleOrClass
                        };
                        valuesStyles.push(valueStyle);
                    }
                    else {
                        const conditionalStyle = {
                            Value1: style.value1,
                            Value2: style.value2,
                            Operator: style.operator,
                            StyleOrClass: style.styleOrClass
                        };
                        conditionalStyles.push(conditionalStyle);
                    }
                });
                if (valuesStyles.length > 0) {
                    formatObject["ValuesStyle"] = valuesStyles;
                }
                if (conditionalStyles.length > 0) {
                    formatObject["ConditionalStyles"] = conditionalStyles;
                }
                elementObjectValue["Format"] = formatObject;
            });
            elementsValue.push(elementObjectValue);
        });
        this.elements = JSON.stringify(elementsValue);
    }
    getGrouping(ax) {
        const grouping = () => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (ax.groupingGroupByYear && { GroupByYear: ax.groupingGroupByYear })), (ax.groupingYearTitle && {
            YearTitle: ax.groupingYearTitle
        })), (ax.groupingGroupBySemester && {
            GroupBySemester: ax.groupingGroupBySemester
        })), (ax.groupingSemesterTitle && {
            SemesterTitle: ax.groupingSemesterTitle
        })), (ax.groupingGroupByQuarter && {
            GroupByQuarter: ax.groupingGroupByQuarter
        })), (ax.groupingQuarterTitle && { QuarterTitle: ax.groupingQuarterTitle })), (ax.groupingGroupByMonth && { GroupByMonth: ax.groupingGroupByMonth })), (ax.groupingMonthTitle && { MonthTitle: ax.groupingMonthTitle })), (ax.groupingGroupByDayOfWeek && {
            GroupByDayOfWeek: ax.groupingGroupByDayOfWeek
        })), (ax.groupingDayOfWeekTitle && {
            DayOfWeekTitle: ax.groupingDayOfWeekTitle
        })), (ax.groupingHideValue && { HideValue: ax.groupingHideValue })));
        return grouping;
    }
    render() {
        return (h(Host, null,
            h("iframe", { name: "query_viewer", "data-version-id": this.dataVersionId }),
            h("form", { hidden: true, target: "query_viewer", action: this.baseUrl + this.mapServices[this.env], method: "POST" }, this.postData())));
    }
    static get is() { return "gx-query-viewer"; }
    static get originalStyleUrls() { return {
        "$": ["query-viewer.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["query-viewer.css"]
    }; }
    static get properties() { return {
        "baseUrl": {
            "type": "any",
            "mutable": false,
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Base URL of the server"
            },
            "attribute": "base-url",
            "reflect": false
        },
        "env": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Environmet of the project: JAVA. .Net, NetCore"
            },
            "attribute": "env",
            "reflect": false
        },
        "language": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Language of the QueryViewer"
            },
            "attribute": "language",
            "reflect": false
        },
        "object": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Object of QueryViewer"
            },
            "attribute": "object",
            "reflect": false
        },
        "objectName": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Name of the Query or Data provider assigned"
            },
            "attribute": "object-name",
            "reflect": false
        },
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Card\" | \"Chart\" | \"PivotTable\" | \"Table\" | \"Default\"",
                "resolved": "\"Card\" | \"Chart\" | \"Default\" | \"PivotTable\" | \"Table\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of the QueryViewer: Table, PivotTable, Chart, Card"
            },
            "attribute": "type",
            "reflect": false
        },
        "chartType": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"Column\"\n    | \"Column3D\"\n    | \"StackedColumn\"\n    | \"StackedColumn3D\"\n    | \"StackedColumn100\"\n    | \"Bar\"\n    | \"StackedBar\"\n    | \"StackedBar100\"\n    | \"Area\"\n    | \"StackedArea\"\n    | \"StackedArea100\"\n    | \"SmoothArea\"\n    | \"StepArea\"\n    | \"Line\"\n    | \"StackedLine\"\n    | \"StackedLine100\"\n    | \"SmoothLine\"\n    | \"StepLine\"\n    | \"Pie\"\n    | \"Pie3D\"\n    | \"Doughnut\"\n    | \"Doughnut3D\"\n    | \"LinearGauge\"\n    | \"CircularGauge\"\n    | \"Radar\"\n    | \"FilledRadar\"\n    | \"PolarArea\"\n    | \"Funnel\"\n    | \"Pyramid\"\n    | \"ColumnLine\"\n    | \"Column3DLine\"\n    | \"Timeline\"\n    | \"SmoothTimeline\"\n    | \"StepTimeline\"\n    | \"Sparkline\"",
                "resolved": "\"Column\" | \"Column3D\" | \"StackedColumn\" | \"StackedColumn3D\" | \"StackedColumn100\" | \"Bar\" | \"StackedBar\" | \"StackedBar100\" | \"Area\" | \"StackedArea\" | \"StackedArea100\" | \"SmoothArea\" | \"StepArea\" | \"Line\" | \"StackedLine\" | \"StackedLine100\" | \"SmoothLine\" | \"StepLine\" | \"Pie\" | \"Pie3D\" | \"Doughnut\" | \"Doughnut3D\" | \"LinearGauge\" | \"CircularGauge\" | \"Radar\" | \"FilledRadar\" | \"PolarArea\" | \"Funnel\" | \"Pyramid\" | \"ColumnLine\" | \"Column3DLine\" | \"Timeline\" | \"SmoothTimeline\" | \"StepTimeline\" | \"Sparkline\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type == Chart, this is the chart type: Bar, Pie, Timeline, etc..."
            },
            "attribute": "chart-type",
            "reflect": false
        },
        "paging": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type == PivotTable or Table, if true there is paging, else everything in one table"
            },
            "attribute": "paging",
            "reflect": false
        },
        "pageSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If paging true, number of items for a single page"
            },
            "attribute": "page-size",
            "reflect": false
        },
        "showDataLabelsIn": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Ax to show data labels"
            },
            "attribute": "show-data-labels-in",
            "reflect": false
        },
        "plotSeries": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"InTheSameChart\" | \"InSeparateCharts\"",
                "resolved": "\"InSeparateCharts\" | \"InTheSameChart\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Timeline"
            },
            "attribute": "plot-series",
            "reflect": false
        },
        "xAxisLabels": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"Horizontally\"\n    | \"Rotated30\"\n    | \"Rotated45\"\n    | \"Rotated60\"\n    | \"Vertically\"",
                "resolved": "\"Horizontally\" | \"Rotated30\" | \"Rotated45\" | \"Rotated60\" | \"Vertically\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Labels for XAxis"
            },
            "attribute": "x-axis-labels",
            "reflect": false
        },
        "xAxisIntersectionAtZero": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "if true the x Axes intersect at zero"
            },
            "attribute": "x-axis-intersection-at-zero",
            "reflect": false
        },
        "showValues": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "if true show values on the graph"
            },
            "attribute": "show-values",
            "reflect": false
        },
        "xAxisTitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "X Axis title"
            },
            "attribute": "x-axis-title",
            "reflect": false
        },
        "yAxisTitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Y Axis title"
            },
            "attribute": "y-axis-title",
            "reflect": false
        },
        "showDataAs": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Values\" | \"Percentages\" | \"ValuesAndPercentages\"",
                "resolved": "\"Percentages\" | \"Values\" | \"ValuesAndPercentages\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of data to show"
            },
            "attribute": "show-data-as",
            "reflect": false
        },
        "includeTrend": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If true includes trend on the graph"
            },
            "attribute": "include-trend",
            "reflect": false
        },
        "trendPeriod": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"SinceTheBeginning\"\n    | \"LastYear\"\n    | \"LastSemester\"\n    | \"LastQuarter\"\n    | \"LastMonth\"\n    | \"LastWeek\"\n    | \"LastDay\"\n    | \"LastHour\"\n    | \"LastMinute\"\n    | \"LastSecond\"",
                "resolved": "\"LastDay\" | \"LastHour\" | \"LastMinute\" | \"LastMonth\" | \"LastQuarter\" | \"LastSecond\" | \"LastSemester\" | \"LastWeek\" | \"LastYear\" | \"SinceTheBeginning\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If includeTrend, defines the period of the trend"
            },
            "attribute": "trend-period",
            "reflect": false
        },
        "rememberLayout": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "For timeline for remembering layout"
            },
            "attribute": "remember-layout",
            "reflect": false
        },
        "orientation": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Horizontal\" | \"Vertical\"",
                "resolved": "\"Horizontal\" | \"Vertical\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Orientation of the graph"
            },
            "attribute": "orientation",
            "reflect": false
        },
        "includeSparkline": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Include spark line"
            },
            "attribute": "include-sparkline",
            "reflect": false
        },
        "includeMaxMin": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Include max and min"
            },
            "attribute": "include-max-min",
            "reflect": false
        },
        "theme": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Theme for showing the graph"
            },
            "attribute": "theme",
            "reflect": false
        },
        "objectType": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Object type -> Query or DataProvider"
            },
            "attribute": "object-type",
            "reflect": false
        },
        "isExternalQuery": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True if it is external query"
            },
            "attribute": "is-external-query",
            "reflect": false
        },
        "allowElementsOrderChange": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Allowing elements order to change"
            },
            "attribute": "allow-elements-order-change",
            "reflect": false
        },
        "autoResize": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table, if true will shrink the table"
            },
            "attribute": "auto-resize",
            "reflect": false
        },
        "autoResizeType": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Both\" | \"Vertical\" | \"Horizontal\"",
                "resolved": "\"Both\" | \"Horizontal\" | \"Vertical\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If autoResize, in here select the type, Width, height, or both"
            },
            "attribute": "auto-resize-type",
            "reflect": false
        },
        "fontFamily": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of font"
            },
            "attribute": "font-family",
            "reflect": false
        },
        "fontSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Font size"
            },
            "attribute": "font-size",
            "reflect": false
        },
        "fontColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Font Color"
            },
            "attribute": "font-color",
            "reflect": false
        },
        "autoRefreshGroup": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Auto refresh group"
            },
            "attribute": "auto-refresh-group",
            "reflect": false
        },
        "disableColumnSort": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Allowing or not Comlumn sort"
            },
            "attribute": "disable-column-sort",
            "reflect": false
        },
        "allowSelection": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Allow selection"
            },
            "attribute": "allow-selection",
            "reflect": false
        },
        "exportToXML": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table allow to export to XML"
            },
            "attribute": "export-to-x-m-l",
            "reflect": false
        },
        "exportToHTML": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table allow to export to HTML"
            },
            "attribute": "export-to-h-t-m-l",
            "reflect": false
        },
        "exportToXLS": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table allow to export to XLS"
            },
            "attribute": "export-to-x-l-s",
            "reflect": false
        },
        "exportToXLSX": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table allow to export to XLSX"
            },
            "attribute": "export-to-x-l-s-x",
            "reflect": false
        },
        "exportToPDF": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If type== PivotTable or Table allow to export to PDF"
            },
            "attribute": "export-to-p-d-f",
            "reflect": false
        },
        "queryTitle": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Title of the QueryViewer"
            },
            "attribute": "query-title",
            "reflect": false
        },
        "dataVersionId": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Version of data"
            },
            "attribute": "data-version-id",
            "reflect": false
        }
    }; }
    static get states() { return {
        "parameters": {},
        "elements": {}
    }; }
    static get elementRef() { return "element"; }
    static get listeners() { return [{
            "name": "parameterValueChanged",
            "method": "parameterValueChangedHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }, {
            "name": "elementChanged",
            "method": "elementChangedHandler",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
