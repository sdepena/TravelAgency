import { Component, Element, Prop, h, Host } from "@stencil/core";
import { CardRender } from "../renders/bootstrap/card/card-render";
export class Card {
    constructor() {
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to show the card border. False to hide it.
         */
        this.showBorder = true;
        /**
         * True to show the card footer. False to hide it.
         */
        this.showFooter = true;
        /**
         * True to show the card header. False to hide it.
         */
        this.showHeader = true;
        this.renderer = new CardRender(this);
    }
    componentDidLoad() {
        this.renderer.componentDidLoad();
    }
    componentDidUpdate() {
        this.renderer.componentDidUpdate();
    }
    componentDidUnload() {
        this.renderer.componentDidUnload();
    }
    render() {
        return (h(Host, null, this.renderer.render({
            body: h("slot", { name: "body" }),
            default: h("slot", null),
            footer: h("slot", { name: "footer" }),
            header: h("slot", { name: "header" }),
            highPriorityAction: h("slot", { name: "high-priority-action" }),
            lowPriorityAction: h("slot", { name: "low-priority-action" }),
            normalPriorityAction: h("slot", { name: "normal-priority-action" })
        })));
    }
    static get is() { return "gx-card"; }
    static get originalStyleUrls() { return {
        "$": ["card.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["card.css"]
    }; }
    static get properties() { return {
        "invisibleMode": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"collapse\" | \"keep-space\"",
                "resolved": "\"collapse\" | \"keep-space\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify how this element will behave when hidden.\n\n| Value        | Details                                                                     |\n| ------------ | --------------------------------------------------------------------------- |\n| `keep-space` | The element remains in the document flow, and it does occupy space.         |\n| `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |"
            },
            "attribute": "invisible-mode",
            "reflect": false,
            "defaultValue": "\"collapse\""
        },
        "showBorder": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to show the card border. False to hide it."
            },
            "attribute": "show-border",
            "reflect": false,
            "defaultValue": "true"
        },
        "showFooter": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to show the card footer. False to hide it."
            },
            "attribute": "show-footer",
            "reflect": false,
            "defaultValue": "true"
        },
        "showHeader": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "true",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to show the card header. False to hide it."
            },
            "attribute": "show-header",
            "reflect": false,
            "defaultValue": "true"
        }
    }; }
    static get elementRef() { return "element"; }
}
