import { Component, Event, Prop } from "@stencil/core";
export class QueryViewerFormatStyle {
    componentDidUpdate() {
        this.elementChanged.emit();
    }
    static get is() { return "gx-query-viewer-format-style"; }
    static get properties() { return {
        "type": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"Values\" | \"Conditional\"",
                "resolved": "\"Conditional\" | \"Values\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Type of the element Conditional or Format"
            },
            "attribute": "type",
            "reflect": false
        },
        "value": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If Conditional Value to format"
            },
            "attribute": "value",
            "reflect": false
        },
        "applyToRowOrColumn": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If Conditional true for applying to row or column"
            },
            "attribute": "apply-to-row-or-column",
            "reflect": false
        },
        "styleOrClass": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Style or Css class"
            },
            "attribute": "style-or-class",
            "reflect": false
        },
        "operator": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"EQ\" | \"LT\" | \"GT\" | \"LE\" | \"GE\" | \"NE\" | \"IN\"",
                "resolved": "\"EQ\" | \"GE\" | \"GT\" | \"IN\" | \"LE\" | \"LT\" | \"NE\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If Format the operator of the element"
            },
            "attribute": "operator",
            "reflect": false
        },
        "value1": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If format first value"
            },
            "attribute": "value-1",
            "reflect": false
        },
        "value2": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "If format second value"
            },
            "attribute": "value-2",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "elementChanged",
            "name": "elementChanged",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
}
