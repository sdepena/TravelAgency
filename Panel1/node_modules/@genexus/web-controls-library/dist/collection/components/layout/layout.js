import { Component, Element, Event, h, Host, Prop, State, Watch } from "@stencil/core";
export class Layout {
    constructor() {
        /**
         * True to hide the top target
         */
        this.topHidden = false;
        /**
         * True to hide the right target
         */
        this.rightHidden = false;
        /**
         * True to hide the bottom target
         */
        this.bottomHidden = false;
        /**
         * True to hide the left target
         */
        this.leftHidden = false;
        this.isMaskVisible = !this.rightHidden || !this.leftHidden;
        this.isVerticalTargetsBreakpoint = false;
        this.handleBodyClick = this.handleBodyClick.bind(this);
        this.handleMediaQueryChange = this.handleMediaQueryChange.bind(this);
    }
    handleRightHiddenChange() {
        this.updateMaskVisibility();
        this.rightHiddenChange.emit(this.rightHidden);
    }
    handleLeftHiddenChange() {
        this.updateMaskVisibility();
        this.leftHiddenChange.emit(this.leftHidden);
    }
    updateMaskVisibility() {
        this.isMaskVisible = !this.rightHidden || !this.leftHidden;
    }
    handleBodyClick(e) {
        if (this.isMaskVisible && this.isVerticalTargetsBreakpoint) {
            const target = e.target;
            if (!target.matches(`gx-layout .vertical ${target.tagName}`)) {
                setTimeout(() => {
                    this.rightHidden = true;
                    this.leftHidden = true;
                }, 50);
            }
        }
    }
    componentDidLoad() {
        document.body.addEventListener("click", this.handleBodyClick, true);
        this.startMediaQueryMonitoring();
    }
    disconnectedCallback() {
        document.body.removeEventListener("click", this.handleBodyClick);
        this.endMediaQueryMonitoring();
    }
    startMediaQueryMonitoring() {
        const targetsBreakpoint = getComputedStyle(this.element).getPropertyValue("--gx-layout-vertical-targets-breakpoint");
        this.mediaQueryList = window.matchMedia(`(max-width: ${targetsBreakpoint})`);
        this.updateVerticalTargetsBreakpointStatus(this.mediaQueryList.matches);
        this.mediaQueryList.addEventListener("change", this.handleMediaQueryChange);
    }
    handleMediaQueryChange(event) {
        this.updateVerticalTargetsBreakpointStatus(event.matches);
    }
    updateVerticalTargetsBreakpointStatus(matches) {
        this.isVerticalTargetsBreakpoint = matches;
        this.verticalTargetsBreakpointMatchChange.emit({
            matches
        });
    }
    endMediaQueryMonitoring() {
        this.mediaQueryList.removeEventListener("change", this.handleMediaQueryChange);
    }
    render() {
        return (h(Host, null,
            h("main", { class: "target center" },
                h("div", { class: {
                        mask: true,
                        "mask--active": this.isMaskVisible
                    } }),
                h("slot", null)),
            h("header", { class: "target top", hidden: this.topHidden },
                h("slot", { name: "top" })),
            h("aside", { class: "target vertical left", hidden: this.leftHidden },
                h("slot", { name: "left" })),
            h("aside", { class: "target vertical right", hidden: this.rightHidden },
                h("slot", { name: "right" })),
            h("footer", { class: "target bottom", hidden: this.bottomHidden },
                h("slot", { name: "bottom" }))));
    }
    static get is() { return "gx-layout"; }
    static get originalStyleUrls() { return {
        "$": ["layout.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["layout.css"]
    }; }
    static get properties() { return {
        "topHidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to hide the top target"
            },
            "attribute": "top-hidden",
            "reflect": false,
            "defaultValue": "false"
        },
        "rightHidden": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to hide the right target"
            },
            "attribute": "right-hidden",
            "reflect": false,
            "defaultValue": "false"
        },
        "bottomHidden": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to hide the bottom target"
            },
            "attribute": "bottom-hidden",
            "reflect": false,
            "defaultValue": "false"
        },
        "leftHidden": {
            "type": "boolean",
            "mutable": true,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to hide the left target"
            },
            "attribute": "left-hidden",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get states() { return {
        "isMaskVisible": {}
    }; }
    static get events() { return [{
            "method": "leftHiddenChange",
            "name": "leftHiddenChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the leftHidden property is changed"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "rightHiddenChange",
            "name": "rightHiddenChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the rightHidden property is changed"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "verticalTargetsBreakpointMatchChange",
            "name": "verticalTargetsBreakpointMatchChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the viewport size is less than the vertical targets breakpoint."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "rightHidden",
            "methodName": "handleRightHiddenChange"
        }, {
            "propName": "leftHidden",
            "methodName": "handleLeftHiddenChange"
        }]; }
}
