import { Component, Element, Event, h, Prop } from "@stencil/core";
import { divIcon, marker } from "leaflet/dist/leaflet-src.esm";
import { parseCoords } from "../common/coordsValidate";
const MAX_POPUP_SIZE_FACTOR = 0.83;
export class MapMarker {
    constructor() {
        /**
         * The coordinates where the marker will appear in the map.
         *
         */
        this.coords = "0, 0";
        /**
         * The class that the marker will have.
         *
         * Set the `background-image` property to use it as icon of the marker.
         *
         */
        this.markerClass = "gx-default-icon";
        /**
         * The marker image height.
         *
         */
        this.iconHeight = 30;
        /**
         * The marker image width.
         *
         */
        this.iconWidth = 30;
    }
    getHalfSizes() {
        const halfIconSizes = {
            height: this.iconHeight / 2,
            width: this.iconWidth / 2
        };
        return halfIconSizes;
    }
    setupMarker(coords) {
        this.markerInstance = marker(coords, {
            icon: divIcon({
                className: this.markerClass,
                iconAnchor: [this.getHalfSizes().width, this.iconHeight],
                popupAnchor: [0, -this.getHalfSizes().height],
                iconSize: [this.iconWidth, this.iconHeight],
                tooltipAnchor: [0, -this.getHalfSizes().height]
            })
        });
    }
    setPopup() {
        const popupContainerEl = this.element.querySelector("[class='popup-data-container']");
        if (popupContainerEl.firstElementChild !== null) {
            const maxPopupSize = {
                height: document.querySelector(".gxMap").clientHeight * MAX_POPUP_SIZE_FACTOR,
                width: document.querySelector(".gxMap").clientWidth * MAX_POPUP_SIZE_FACTOR
            };
            this.markerInstance.bindPopup(popupContainerEl, {
                keepInView: true,
                maxHeight: maxPopupSize.height,
                maxWidth: maxPopupSize.width,
                minWidth: 100
            });
        }
    }
    componentDidLoad() {
        const coords = parseCoords(this.coords);
        if (coords !== null) {
            this.setupMarker(coords);
        }
        else {
            console.warn("GX warning: Can not read 'coords' attribute, default coords set (gx-map-marker)", this.element);
            this.setupMarker([0, 0]);
        }
        this.setPopup();
        if (this.tooltipCaption) {
            this.markerInstance.bindTooltip(this.tooltipCaption, {
                direction: "top"
            });
        }
        this.gxMapMarkerDidLoad.emit(this.markerInstance);
    }
    componentDidUpdate() {
        const coords = parseCoords(this.coords);
        if (coords !== null) {
            this.markerInstance.setLatLng(coords);
        }
        else {
            console.warn("GX warning: Can not read 'coords' attribute, default coords set (gx-map-marker)", this.element);
            this.markerInstance.setLatLng([0, 0]);
        }
        this.markerInstance.setIcon(divIcon({
            className: this.markerClass,
            iconAnchor: [this.getHalfSizes().width, this.iconHeight],
            popupAnchor: [0, -this.getHalfSizes().height],
            iconSize: [this.iconWidth, this.iconHeight],
            tooltipAnchor: [0, -this.getHalfSizes().height]
        }));
        this.setPopup();
    }
    componentDidUnload() {
        this.gxMapMarkerDeleted.emit(this.markerInstance);
    }
    render() {
        return (h("div", { class: "popup-data-container" },
            h("slot", null)));
    }
    static get is() { return "gx-map-marker"; }
    static get originalStyleUrls() { return {
        "$": ["map-marker.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["map-marker.css"]
    }; }
    static get properties() { return {
        "coords": {
            "type": "string",
            "mutable": true,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The coordinates where the marker will appear in the map."
            },
            "attribute": "coords",
            "reflect": false,
            "defaultValue": "\"0, 0\""
        },
        "markerClass": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The class that the marker will have.\n\nSet the `background-image` property to use it as icon of the marker."
            },
            "attribute": "marker-class",
            "reflect": false,
            "defaultValue": "\"gx-default-icon\""
        },
        "iconHeight": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The marker image height."
            },
            "attribute": "icon-height",
            "reflect": false,
            "defaultValue": "30"
        },
        "iconWidth": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The marker image width."
            },
            "attribute": "icon-width",
            "reflect": false,
            "defaultValue": "30"
        },
        "tooltipCaption": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The tooltip caption of the marker."
            },
            "attribute": "tooltip-caption",
            "reflect": false
        }
    }; }
    static get events() { return [{
            "method": "gxMapMarkerDidLoad",
            "name": "gxMapMarkerDidLoad",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emmits when the element is added to a `<gx-map>`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxMapMarkerUpdate",
            "name": "gxMapMarkerUpdate",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emmits when the element update its data."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "gxMapMarkerDeleted",
            "name": "gxMapMarkerDeleted",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Emmits when the element is deleted from a `<gx-map>`."
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
}
