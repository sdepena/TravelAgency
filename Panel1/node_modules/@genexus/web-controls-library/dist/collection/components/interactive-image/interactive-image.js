import { Component, Element, Prop, h, State } from "@stencil/core";
export class InteractiveImage {
    constructor() {
        /**
         * True/False. If this property is true, the user can zoom in/out on the image.
         */
        this.enableZoom = false;
        /**
         * Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_.
         */
        this.zoom = 100;
        /**
         * Lets you specify the image URL. *Requiered*
         */
        this.src = "";
        this.mouseOver = false;
        this.handleMouseMove = ev => {
            ev.preventDefault();
            this.mouseOver = true;
            this.zoomedPositionX = this.calculateZoomedPosition(ev.offsetX, ev.target.offsetWidth);
            this.zoomedPositionY = this.calculateZoomedPosition(ev.offsetY, ev.target.offsetHeight);
        };
        this.handleTouchMove = ev => {
            ev.preventDefault();
            this.mouseOver = true;
            const imgSize = {
                height: ev.target.offsetHeight,
                width: ev.target.offsetWidth
            };
            const touch = {
                X: ev.changedTouches[0].clientX - ev.target.x,
                Y: ev.changedTouches[0].clientY -
                    ev.target.parentNode.getBoundingClientRect().top
            };
            if (touch.X <= 0) {
                touch.X = 0;
            }
            else if (touch.X >= imgSize.width) {
                touch.X = imgSize.width;
            }
            if (touch.Y <= 0) {
                touch.Y = 0;
            }
            else if (touch.Y >= imgSize.height) {
                touch.Y = imgSize.height;
            }
            const moveImgPostion = {
                X: this.calculateZoomTouch(this.calculateZoomedPosition(touch.X, ev.target.offsetWidth), this.zoom),
                Y: this.calculateZoomTouch(this.calculateZoomedPosition(touch.Y, imgSize.height), this.zoom)
            };
            this.zoomedPositionX = moveImgPostion.X;
            this.zoomedPositionY = moveImgPostion.Y;
        };
        this.handleOverEnd = () => {
            this.mouseOver = false;
        };
    }
    calculateZoomedPosition(overPosition, elementSize) {
        const SCALE = this.zoom / 100;
        const HALF_SIZE_PERCENTAGE = 50;
        const HALF_SIZE_PIXELS = (elementSize * HALF_SIZE_PERCENTAGE) / 100;
        return -(overPosition - HALF_SIZE_PIXELS) * (SCALE - 1);
    }
    calculateZoomTouch(preCalculateValue, zoom) {
        const SCALE = zoom / 100;
        return preCalculateValue / SCALE;
    }
    checkZoomFeature() {
        if (this.enableZoom) {
            const img = this.element.querySelector("img");
            img.addEventListener("mousemove", this.handleMouseMove);
            img.addEventListener("touchmove", this.handleTouchMove);
            img.addEventListener("mouseout", this.handleOverEnd);
            img.addEventListener("touchend", this.handleOverEnd);
        }
        else {
            const img = this.element.querySelector("img");
            img.removeEventListener("mousemove", this.handleMouseMove);
            img.removeEventListener("touchmove", this.handleTouchMove);
            img.removeEventListener("mouseout", this.handleOverEnd);
            img.removeEventListener("touchend", this.handleOverEnd);
        }
    }
    fixZoomValue() {
        if (this.zoom < 100) {
            console.warn("Zoom value cannot be lower than 100");
            this.zoom = 100;
        }
    }
    componentWillLoad() {
        this.fixZoomValue();
    }
    componentDidLoad() {
        this.checkZoomFeature();
    }
    componentDidUpdate() {
        this.checkZoomFeature();
    }
    render() {
        this.fixZoomValue();
        return (h("img", { style: this.mouseOver
                ? {
                    "object-position": `${this.zoomedPositionX}px ${this.zoomedPositionY}px`,
                    transform: `scale(${this.zoom / 100})`
                }
                : {}, src: this.src }));
    }
    static get is() { return "gx-interactive-image"; }
    static get originalStyleUrls() { return {
        "$": ["interactive-image.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["interactive-image.css"]
    }; }
    static get properties() { return {
        "enableZoom": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True/False. If this property is true, the user can zoom in/out on the image."
            },
            "attribute": "enable-zoom",
            "reflect": false,
            "defaultValue": "false"
        },
        "zoom": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Indicates how much you can enlarge an image. (Percentage) _Note: 100% = Normal size_."
            },
            "attribute": "zoom",
            "reflect": false,
            "defaultValue": "100"
        },
        "src": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "\"\"",
                "resolved": "\"\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Lets you specify the image URL. *Requiered*"
            },
            "attribute": "src",
            "reflect": false,
            "defaultValue": "\"\""
        }
    }; }
    static get states() { return {
        "mouseOver": {},
        "zoomedPositionX": {},
        "zoomedPositionY": {}
    }; }
    static get elementRef() { return "element"; }
}
