import { Component, Element, Event, Host, Prop, Watch, h } from "@stencil/core";
import { makeHighlightable } from "../common/highlightable";
import { hideMainImageWhenDisabledClass, imagePositionClass, imagePositionRender } from "../common/image-position";
let autoTabId = 0;
export class TabCaption {
    constructor() {
        this.hasDisabledImage = false;
        /**
         * This attribute lets you specify if the tab page is disabled
         *
         */
        this.disabled = false;
        /**
         * This attribute lets you specify the relative location of the image to the text.
         *
         * | Value    | Details                                                 |
         * | -------- | ------------------------------------------------------- |
         * | `above`  | The image is located above the text.                    |
         * | `before` | The image is located before the text, in the same line. |
         * | `after`  | The image is located after the text, in the same line.  |
         * | `below`  | The image is located below the text.                    |
         * | `behind` | The image is located behind the text.                   |
         */
        this.imagePosition = "above";
        /**
         * This attribute lets you specify if the tab page corresponding to this caption is selected
         *
         */
        this.selected = false;
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        this.clickHandler = this.clickHandler.bind(this);
    }
    selectedHandler() {
        if (this.selected) {
            this.tabSelect.emit(event);
        }
    }
    componentWillLoad() {
        if (!this.element.id) {
            this.element.id = `gx-tab-caption-auto-id-${autoTabId++}`;
        }
        this.hasDisabledImage =
            this.element.querySelector("[slot='disabled-image']") !== null;
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    render() {
        this.element.setAttribute("aria-selected", (!!this.selected).toString());
        return (h(Host, { role: "tab", class: {
                "gx-tab-caption": true,
                "gx-tab-caption--active": this.selected,
                "gx-tab-caption--disabled": this.disabled,
                [imagePositionClass(this.imagePosition)]: true,
                [hideMainImageWhenDisabledClass]: !this.selected && this.hasDisabledImage
            } },
            h("a", { class: {
                    "gx-nav-link": true
                }, href: "#", onClick: this.clickHandler }, imagePositionRender({
                default: h("slot", null),
                disabledImage: h("slot", { name: "disabled-image" }),
                mainImage: h("slot", { name: "main-image" })
            }))));
    }
    clickHandler(event) {
        event.preventDefault();
        if (!this.disabled) {
            this.selected = true;
        }
    }
    static get is() { return "gx-tab-caption"; }
    static get originalStyleUrls() { return {
        "$": ["tab-caption.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["tab-caption.css"]
    }; }
    static get properties() { return {
        "disabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the tab page is disabled"
            },
            "attribute": "disabled",
            "reflect": false,
            "defaultValue": "false"
        },
        "imagePosition": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "| \"above\"\n    | \"before\"\n    | \"after\"\n    | \"below\"\n    | \"behind\"",
                "resolved": "\"above\" | \"after\" | \"before\" | \"behind\" | \"below\"",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify the relative location of the image to the text.\n\n| Value    | Details                                                 |\n| -------- | ------------------------------------------------------- |\n| `above`  | The image is located above the text.                    |\n| `before` | The image is located before the text, in the same line. |\n| `after`  | The image is located after the text, in the same line.  |\n| `below`  | The image is located below the text.                    |\n| `behind` | The image is located behind the text.                   |"
            },
            "attribute": "image-position",
            "reflect": false,
            "defaultValue": "\"above\""
        },
        "selected": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute lets you specify if the tab page corresponding to this caption is selected"
            },
            "attribute": "selected",
            "reflect": false,
            "defaultValue": "false"
        },
        "highlightable": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "false",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "True to highlight control when an action is fired."
            },
            "attribute": "highlightable",
            "reflect": false,
            "defaultValue": "false"
        }
    }; }
    static get events() { return [{
            "method": "tabSelect",
            "name": "tabSelect",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Fired when the tab caption is selected"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get elementRef() { return "element"; }
    static get watchers() { return [{
            "propName": "selected",
            "methodName": "selectedHandler"
        }]; }
}
