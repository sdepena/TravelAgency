'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-4863abdd.js');
const swipeable = require('./swipeable-b534a902.js');

const canvasCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-canvas{display:block;position:relative}gx-canvas[hidden]{display:none !important}gx-canvas[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}";

const Canvas = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.gxClick = index.createEvent(this, "gxClick", 7);
        this.swipe = index.createEvent(this, "swipe", 7);
        this.swipeUp = index.createEvent(this, "swipeUp", 7);
        this.swipeRight = index.createEvent(this, "swipeRight", 7);
        this.swipeDown = index.createEvent(this, "swipeDown", 7);
        this.swipeLeft = index.createEvent(this, "swipeLeft", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.width = null;
        this.height = null;
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick(event) {
        if (this.disabled) {
            return;
        }
        this.gxClick.emit(event);
    }
    componentDidLoad() {
        swipeable.makeSwipeable(this);
        this.watchForItemsObserver = new MutationObserver(mutationsList => {
            const shouldUpdateDimensions = mutationsList.some(mutation => mutation.type === "attributes" || mutation.type === "childList");
            if (shouldUpdateDimensions) {
                this.calculateDimensions();
            }
        });
        this.watchForItemsObserver.observe(this.element, { childList: true });
        this.calculateDimensions();
    }
    disconnectedCallback() {
        if (this.watchForItemsObserver !== undefined) {
            this.watchForItemsObserver.disconnect();
            this.watchForItemsObserver = undefined;
        }
    }
    calculateDimensions() {
        const dimensions = Array.from(this.element.childNodes)
            .filter(node => node instanceof HTMLElement)
            .map((element) => [
            element.clientWidth + element.offsetLeft,
            element.clientHeight + element.offsetTop
        ]);
        this.width = Math.max(...dimensions.map(tuple => tuple[0]));
        this.height = Math.max(...dimensions.map(tuple => tuple[1]));
    }
    render() {
        this.element.addEventListener("click", this.handleClick);
        return (index.h(index.Host, { style: {
                width: this.width !== null ? `${this.width}px` : undefined,
                height: this.height !== null ? `${this.height}px` : undefined
            } }, index.h("slot", null)));
    }
    get element() { return index.getElement(this); }
};
Canvas.style = canvasCss;

const canvasCellCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-canvas-cell{position:absolute;display:-ms-flexbox;display:flex}gx-canvas-cell[hidden]{display:none !important}gx-canvas-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-canvas-cell[overflow-mode=clip]{overflow:hidden}gx-canvas-cell[overflow-mode=scroll]{overflow:auto}gx-canvas-cell:not([align])>*,gx-canvas-cell[align=left]>*{-ms-flex:1;flex:1}gx-canvas-cell[align=center]{-ms-flex-pack:center;justify-content:center}gx-canvas-cell[align=right]{-ms-flex-pack:end;justify-content:flex-end}gx-canvas-cell[valign=middle]{-ms-flex-align:center;align-items:center}gx-canvas-cell[valign=bottom]{-ms-flex-align:end;align-items:flex-end}";

const CanvasCell = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Defines the horizontal aligmnent of the content of the cell.
         */
        this.align = "left";
        /**
         * Defines the vertical aligmnent of the content of the cell.
         */
        this.valign = "top";
    }
    render() {
        return index.h("slot", null);
    }
    get element() { return index.getElement(this); }
};
CanvasCell.style = canvasCellCss;

exports.gx_canvas = Canvas;
exports.gx_canvas_cell = CanvasCell;
