'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');

const videoCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-video{--gx-video-height:100%;--gx-video-width:100%;display:-ms-flexbox;display:flex;width:100%}gx-video[hidden]{display:none !important}gx-video[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-video>div{height:var(--gx-video-height);width:var(--gx-video-width);display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}gx-video>div iframe{-ms-flex:1;flex:1;border:none}";

const Video = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.gxClick = index$1.createEvent(this, "gxClick", 7);
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        this.handleClick = this.handleClick.bind(this);
    }
    handleClick(event) {
        this.gxClick.emit(event);
        event.preventDefault();
    }
    parseYoutubeSrc(src) {
        const domainIdArray = src.split("watch?v=");
        return `${domainIdArray[0]}embed/${domainIdArray[1]}`;
    }
    render() {
        const handleClick = !this.disabled ? this.handleClick : null;
        return (index$1.h("div", { class: "gxVideoContainer", onClick: handleClick }, index$1.h("iframe", { src: this.parseYoutubeSrc(this.src) })));
    }
    get element() { return index$1.getElement(this); }
};
Video.style = videoCss;

exports.gx_video = Video;
