'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');

const imageUploadCss = ":host{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;pointer-events:none}.click-capture{display:contents;pointer-events:auto}.click-capture .image-viewer-image{position:relative;min-width:30px;min-height:30px}.click-capture .image-viewer-image .button-edit-container{position:absolute;right:0;z-index:99;pointer-events:none}.click-capture .image-viewer-image .button-edit-container .image-edit{border:0.075rem solid #ddd;border-radius:15px;background-color:#efefef;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;padding:0 0 0 2.5px;width:30px;height:30px;pointer-events:all;-webkit-transition:0.2s ease;transition:0.2s ease}.click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):hover{background-color:#ddd}.click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):focus,.click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):active{outline:none}.click-capture .image-viewer-image .button-edit-container .image-edit:not([disabled]):active{background-color:#ccc}.click-capture .image-viewer-image .button-edit-container .image-edit[disabled]{border:0.075rem solid #aaa;border-radius:15px;background-color:#ccc}.click-capture .image-viewer-image .button-edit-container .image-edit svg{width:18px;height:18px}.click-capture .action-dialog .body-container{display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around}.click-capture .action-dialog .body-container .file{display:-ms-flexbox;display:flex;cursor:pointer;width:40%;margin:0px}.click-capture .action-dialog .body-container .file input{width:0}.click-capture .action-dialog .body-container .file .file-custom{border:0.075rem solid #ddd;border-radius:0.25rem;padding:5px 12px 5px 12px;width:100%;-webkit-box-shadow:inset 0 0.2rem 0.4rem rgba(0, 0, 0, 0.05);box-shadow:inset 0 0.2rem 0.4rem rgba(0, 0, 0, 0.05)}.click-capture .action-dialog .body-container .remove-button{border:0.075rem solid #ddd;border-radius:0.25rem;padding:0 12px 0 12px;background-color:#eee}.click-capture .action-dialog div .cancel-button{border:0.075rem solid #ddd;border-radius:0.25rem;padding:2px 12px 2px 12px;background-color:#eee}.bottom{bottom:0}";

const ImageUpload = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.click = index$1.createEvent(this, "click", 7);
        this.onImageChanged = index$1.createEvent(this, "onImageChanged", 7);
        /**
         * This attribute lets you specify the alternative text.
         */
        this.alt = "";
        /**
         * If true, the component will be sized to match the image's intrinsic size when not constrained
         * via CSS dimension properties (for example, height or width).
         * If false, the component will never force its height to match the image's intrinsic size. The width, however,
         * will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
         */
        this.autoGrow = true;
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to lazy load the image, when it enters the viewport.
         */
        this.lazyLoad = true;
        /**
         * This attribute lets you specify the low resolution image SRC.
         */
        this.lowResolutionSrc = "";
        /**
         * This attribute lets you specify the SRC.
         */
        this.src = "";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        /**
         * This attribute lets you specify if the image is readonly.
         * If readonly, it will not allow to use the edit button.
         * In fact, the edit button will not be shown.
         */
        this.readonly = false;
        /**
         * This attribute lets you specify the modal title.
         */
        this.modalTitle = null;
        /**
         * This attribute lets you specify the description of the
         * change image button in the modal.
         */
        this.changeButtonText = "Change image...";
        /**
         * This attribute lets you specify the description of the
         * remove image button in the modal.
         */
        this.removeButtonText = "Remove image";
        /**
         * This attribute lets you specify the description of the
         * cancel action button in the modal.
         */
        this.cancelButtonText = "CANCEL";
        // Used to read the images
        this.reader = new FileReader();
        // Emits the image click event
        this.clickImageAction = (event) => {
            this.click.emit(event);
        };
        // If there is no image, this directly opens the File System to select an image.
        // In othercase, this allows to change or remove the image
        this.triggerAction = (event) => {
            if (this.src === "") {
                this.input.click();
            }
            else {
                this.modal.opened = true;
            }
            event.stopPropagation();
        };
        this.clearImageAction = () => {
            this.input.value = "";
            this.src = "";
            this.alt = "";
            this.onImageChanged.emit(null);
            this.closeAction();
        };
        // When the modal closes
        this.closeAction = () => {
            this.modal.opened = false;
        };
        // When the file is selected
        this.fileSelectedAction = () => {
            const elem = this.element;
            const file = this.input.files[0];
            // This allows to catch an error when the user select a filename, but then
            // cancels the operation
            if (file == null) {
                return;
            }
            this.alt = this.getFileNameWithoutExtension(file.name);
            this.reader.addEventListener("load", function () {
                // Convert image file to base64 string
                elem.src = this.result.toString();
            }, false);
            this.reader.readAsDataURL(file);
            this.closeAction();
            this.onImageChanged.emit(file);
        };
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    getFileNameWithoutExtension(fileName) {
        const index = fileName.lastIndexOf(".");
        if (index === -1) {
            return fileName;
        }
        else {
            return fileName.substring(0, index);
        }
    }
    // SVG used to print the search image button
    getSearchPlusSolidSVG() {
        return (index$1.h("svg", { viewBox: "3 2 20 20" }, index$1.h("path", { d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z" }), index$1.h("path", { d: "M0 0h24v24H0z", fill: "none" })));
    }
    // SVG used to print the change image button
    getPencilAltSolidSVG() {
        return (index$1.h("svg", { viewBox: "0 -35 570 570" }, index$1.h("path", { fill: "black", d: "M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z" })));
    }
    render() {
        return (index$1.h(index$1.Host, null, index$1.h("div", { class: "click-capture", onClick: this.stopPropagation }, index$1.h("gx-image", { class: "image-viewer-image", alt: this.alt, autoGrow: this.autoGrow, disabled: this.disabled, height: this.height, invisibleMode: this.invisibleMode, lazyLoad: this.lazyLoad, lowResolutionSrc: this.lowResolutionSrc, scaleType: this.scaleType, src: this.src, width: this.width, highlightable: this.highlightable, onClick: this.clickImageAction }, !this.readonly && (index$1.h("div", { class: {
                "button-edit-container": true,
                bottom: this.src !== ""
            } }, index$1.h("button", { class: "image-edit", disabled: this.disabled, onClick: this.triggerAction }, this.src === ""
            ? this.getSearchPlusSolidSVG()
            : this.getPencilAltSolidSVG())))), index$1.h("gx-modal", { class: "action-dialog", ref: el => (this.modal = el) }, index$1.h("div", { slot: "header" }, this.modalTitle === null ? document.title : this.modalTitle), index$1.h("div", { class: "body-container", slot: "body" }, index$1.h("label", { class: "file" }, index$1.h("input", { type: "file", onChange: this.fileSelectedAction, ref: el => (this.input = el) }), index$1.h("span", { class: "file-custom" }, this.changeButtonText)), index$1.h("gx-button", { class: "remove-button", onClick: this.clearImageAction }, this.removeButtonText)), index$1.h("div", { slot: "secondary-action" }, index$1.h("gx-button", { class: "cancel-button", onClick: this.closeAction }, this.cancelButtonText))))));
    }
    get element() { return index$1.getElement(this); }
};
ImageUpload.style = imageUploadCss;

exports.gx_image_upload = ImageUpload;
