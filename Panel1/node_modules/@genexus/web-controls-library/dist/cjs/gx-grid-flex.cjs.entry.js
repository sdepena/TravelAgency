'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');
require('./highlightable-b0f3f92c.js');
const gridBase = require('./grid-base-c04b2c18.js');

const gridFlexCss = "@charset \"UTF-8\";.gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}.gx-grid-base{-ms-flex:1;flex:1}.gx-grid-base>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base>*>.scrollable-content{-ms-flex:1;flex:1}.gx-grid-base>.grid-empty-placeholder,.gx-grid-base>[slot=grid-empty-loading-placeholder]{display:none}.gx-grid-base>.grid-empty-placeholder[hidden],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base>.grid-empty-placeholder[hidden][invisible-mode=keep-space],.gx-grid-base>[slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base>.grid-empty-placeholder>[slot=grid-content-empty]{-ms-flex:1;flex:1}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child{display:none}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading)>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;height:100%;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden]{display:none !important}.gx-grid-base.gx-grid-empty:not(.gx-grid-loading) .grid-empty-placeholder[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller),.gx-grid-base.gx-grid-empty>*>.scrollable-content,.gx-grid-base.gx-grid-empty .gx-grid-paging{display:none}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden]{display:none !important}.gx-grid-base.gx-grid-empty>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty>*>.scrollable-content[hidden][invisible-mode=keep-space],.gx-grid-base.gx-grid-empty .gx-grid-paging[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading>:first-child{display:none}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading>:first-child[hidden][invisible-mode=keep-space]{display:none !important;visibility:hidden}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder]{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;text-align:center}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden]{display:none !important}.gx-grid-base.gx-grid-empty-loading [slot=grid-empty-loading-placeholder][hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}.gx-grid-row{position:relative}gx-grid-flex{--gx-grid-flex-wrap:nowrap;--gx-grid-flex-justify-content:flex-start;--gx-grid-flex-align-items:stretch;--gx-grid-flex-align-content:normal;display:-ms-flexbox;display:flex}gx-grid-flex[hidden]{display:none !important}gx-grid-flex[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>div{-ms-flex:1;flex:1}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller),gx-grid-flex>*>.scrollable-content{display:-ms-flexbox;display:flex;-ms-flex-direction:var(--gx-grid-flex-direction);flex-direction:var(--gx-grid-flex-direction);-ms-flex-wrap:var(--gx-grid-flex-wrap);flex-wrap:var(--gx-grid-flex-wrap);-ms-flex-pack:var(--gx-grid-flex-justify-content);justify-content:var(--gx-grid-flex-justify-content);-ms-flex-align:var(--gx-grid-flex-align-items);align-items:var(--gx-grid-flex-align-items);-ms-flex-line-pack:var(--gx-grid-flex-align-content);align-content:var(--gx-grid-flex-align-content)}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden],gx-grid-flex>*>.scrollable-content[hidden]{display:none !important}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[hidden][invisible-mode=keep-space],gx-grid-flex>*>.scrollable-content[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*[slot=grid-content]:not(virtual-scroller)[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*[slot=grid-content]:not(virtual-scroller)>gx-grid-smart-cell[relative-size],gx-grid-flex>*>.scrollable-content[flex-direction=row]>*>.scrollable-content>gx-grid-smart-cell[relative-size]{min-width:calc( var(--gx-grid-css-viewport-width) * var(--gx-grid-item-relative-size) )}gx-grid-flex gx-grid-smart-cell{display:-ms-flexbox;display:flex}gx-grid-flex gx-grid-smart-cell[hidden]{display:none !important}gx-grid-flex gx-grid-smart-cell[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-grid-flex gx-grid-smart-cell>*{-ms-flex:1;flex:1}";

const GridFlex = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.gxInfiniteThresholdReached = index$1.createEvent(this, "gxInfiniteThresholdReached", 3);
        /**
         * This attribute defines if the control size will grow automatically,
         * to adjust to its content size.
         * If set to `false`, it won't grow automatically and it will show scrollbars
         * if the content overflows.
         */
        this.autoGrow = false;
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
           Flexbox is (aside from optional wrapping) a single-direction layout concept.
          Think of flex items as primarily laying out either in horizontal rows or vertical columns.
         *
         * | Value        | Details                                                                                        |
         * | ------------ | ---------------------------------------------------------------------------------------------- |
         * | `row` | The flex container's main-axis is defined to be the same as the text direction. The main-start and main-end points are the same as the content direction.                |
         * | `column`   | The flex container's main-axis is the same as the block-axis. The main-start and main-end points are the same as the before and after points of the writing-mode. |
         */
        this.flexDirection = "row";
        /**
         * The threshold distance from the bottom
         * of the content to call the `infinite` output event when scrolled.
         * The threshold value can be either a percent, or
         * in pixels. For example, use the value of `10%` for the `infinite`
         * output event to get called when the user has scrolled 10%
         * from the bottom of the page. Use the value `100px` when the
         * scroll is within 100 pixels from the bottom of the page.
         */
        this.threshold = "150px";
    }
    /*
     * This method must be called after new grid data was fetched by the infinite scroller.
     */
    async complete() {
        this.element
            .querySelector(':scope > [slot="grid-content"] gx-grid-infinite-scroll"')["complete"]();
    }
    ensureViewPort() {
        const elementStyle = this.element.style;
        elementStyle.setProperty("--gx-grid-css-viewport-width", this.element.parentElement.offsetWidth + "px");
        elementStyle.setProperty("--gx-grid-css-viewport-height", this.element.parentElement.offsetHeight + "px");
    }
    render() {
        this.ensureViewPort();
        return (index$1.h(index$1.Host, Object.assign({}, gridBase.GridBaseHelper.hostData(this)), [
            index$1.h("slot", { name: "grid-content" }),
            index$1.h("slot", { name: "grid-empty-loading-placeholder" }),
            index$1.h("div", { class: "grid-empty-placeholder" }, index$1.h("slot", { name: "grid-content-empty" }))
        ]));
    }
    handleGxInfinite() {
        if (this.loadingState !== "loading") {
            this.gxInfiniteThresholdReached.emit();
        }
    }
    get element() { return index$1.getElement(this); }
};
GridFlex.style = gridFlexCss;

exports.gx_grid_flex = GridFlex;
