'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');

const actionSheetCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-action-sheet{display:block;--gx-action-sheet-shadow:0px 3px 4px 0px rgba(0, 0, 0, 0.14),\n    0px 3px 3px -2px rgba(0, 0, 0, 0.12), 0px 1px 8px 0px rgba(0, 0, 0, 0.2);--gx-action-sheet-background-color:white;--gx-action-sheet-border-radius:6px;--gx-action-sheet-padding:0 20px;--gx-action-sheet-color:black;--gx-action-sheet-color-close:rgb(105, 110, 242);--gx-action-sheet-color-danger:#f02031;--gx-action-sheet-color-disabled:#c3c4c8;--gx-action-sheet-item-border-color:rgb(224, 224, 224)}gx-action-sheet[hidden]{display:none !important}gx-action-sheet[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-action-sheet .gx-action-sheet{background-color:var(--gx-action-sheet-background-color);border-radius:var(--gx-action-sheet-border-radius);-webkit-box-shadow:var(--gx-action-sheet-shadow);box-shadow:var(--gx-action-sheet-shadow);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;padding:var(--gx-action-sheet-padding);color:var(--gx-action-sheet-color)}gx-action-sheet .gx-action-sheet-close-item{background-color:var(--gx-action-sheet-background-color);border-radius:var(--gx-action-sheet-border-radius);-webkit-box-shadow:var(--gx-action-sheet-shadow);box-shadow:var(--gx-action-sheet-shadow);margin-top:8px;text-transform:uppercase;color:var(--gx-action-sheet-color-close);font-size:11px;padding:13px 0}gx-action-sheet .modal-body{padding:0}gx-action-sheet .modal-content{border:0;background-color:transparent}";

const ActionSheet = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.close = index$1.createEvent(this, "close", 7);
        this.open = index$1.createEvent(this, "open", 7);
        /**
         * This attribute lets you specify if the action sheet is opened or closed.
         */
        this.opened = false;
        this.handleOnClose = this.handleOnClose.bind(this);
        this.handleOnOpen = this.handleOnOpen.bind(this);
    }
    handleItemClick(event) {
        const target = event.target;
        if (target.matches("gx-action-sheet-item")) {
            this.opened = false;
        }
    }
    handleOnClose(e) {
        this.opened = false;
        this.close.emit(e);
    }
    handleOnOpen(e) {
        this.opened = true;
        this.open.emit(e);
    }
    render() {
        return (index$1.h(index$1.Host, null, index$1.h("gx-modal", { showHeader: false, opened: this.opened, onClose: this.handleOnClose, onOpen: this.handleOnOpen, onClick: this.handleItemClick }, index$1.h("div", { class: "gx-action-sheet", slot: "body" }, index$1.h("slot", null)), index$1.h("gx-action-sheet-item", { class: "gx-action-sheet-close-item", slot: "body" }, this.closeButtonLabel))));
    }
    get element() { return index$1.getElement(this); }
};
ActionSheet.style = actionSheetCss;

exports.gx_action_sheet = ActionSheet;
