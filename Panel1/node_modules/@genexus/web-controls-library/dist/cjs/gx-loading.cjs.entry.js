'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');

const loadingCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-loading{display:block;position:fixed;top:0;right:0;bottom:0;left:0;z-index:10000}gx-loading[hidden]{display:none !important}gx-loading[hidden][invisible-mode=keep-space]{display:block !important;visibility:hidden}gx-loading .gx-lottie-test{display:none !important}gx-loading .box{position:fixed;padding:30px 20px;border-radius:3px;overflow:hidden;left:50%;top:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);background-color:rgba(200, 200, 200, 0.8);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;max-width:30%;min-width:200px;z-index:10001}gx-loading .title{font-size:16px;font-weight:bold;text-align:center}gx-loading .description{padding-top:5px;font-size:14px;text-align:center}gx-loading .loader{height:4px;width:100%;position:absolute;top:0;left:0;overflow:hidden}gx-loading .loader .loader-inner{display:block;position:absolute;width:0;height:4px;background-color:#2980b9}gx-loading .loader.determinate .loader-inner{-webkit-transition:width linear 0.2s;transition:width linear 0.2s}gx-loading .loader.indeterminate .loader-inner{content:\"\";left:-100%;width:10%;-webkit-animation:gx-loading-animation 1.4s linear infinite;animation:gx-loading-animation 1.4s linear infinite}@-webkit-keyframes gx-loading-animation{from{left:-100%;width:30%}50%{width:30%}70%{width:70%}80%{left:50%}95%{left:120%}to{left:100%}}@keyframes gx-loading-animation{from{left:-100%;width:30%}50%{width:30%}70%{width:70%}80%{left:50%}95%{left:120%}to{left:100%}}";

const Loading = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.lottiePath = "";
        /**
         * Sets if the loading dialog is presented.
         */
        this.presented = false;
        /**
         * Sets the value when type is determinate. Must be a value between 0 and 1.
         *
         */
        this.value = 0;
    }
    valueWatchHandler(newValue, oldValue) {
        if (newValue === oldValue) {
            return;
        }
        if (this.lottiePath) {
            const gxLottie = this.element.querySelector("gx-lottie");
            if (gxLottie !== null) {
                const from = oldValue > newValue ? 0 : oldValue;
                gxLottie.play(from, newValue);
            }
        }
    }
    presentedWatchHandler(newValue, oldValue = false) {
        if (newValue === oldValue) {
            return;
        }
        if (newValue) {
            this.present();
        }
        else {
            this.dismiss();
        }
    }
    present() {
        const rawLottiePath = window
            .getComputedStyle(this.element.querySelector(".gx-lottie-test"))
            .getPropertyValue("--gx-lottie-file-path");
        if (rawLottiePath) {
            this.lottiePath = rawLottiePath
                .trim()
                .replace(/^"/, "")
                .replace(/"$/, "");
        }
        this.element.style.display = "block";
    }
    dismiss() {
        this.element.style.display = "none";
    }
    render() {
        this.element.style.display = this.presented ? "block" : "none";
        return (index$1.h("div", { class: "box", role: "dialog" }, index$1.h("div", { class: "gx-lottie-test" }), this.lottiePath ? (index$1.h("gx-lottie", { path: this.lottiePath, loop: this.type === "indeterminate", autoPlay: this.type === "indeterminate" })) : (index$1.h("div", { class: {
                [this.type]: true,
                loader: true
            } }, index$1.h("div", { class: "loader-inner", style: {
                width: `${this.value * 100}%`
            } }))), index$1.h("div", { class: "title" }, this.caption), index$1.h("div", { class: "description" }, this.description)));
    }
    get element() { return index$1.getElement(this); }
    static get watchers() { return {
        "value": ["valueWatchHandler"],
        "presented": ["presentedWatchHandler"]
    }; }
};
Loading.style = loadingCss;

exports.gx_loading = Loading;
