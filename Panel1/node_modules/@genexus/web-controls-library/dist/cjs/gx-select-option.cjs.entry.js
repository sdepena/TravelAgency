'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$1 = require('./index-4863abdd.js');

const SelectOption = class {
    constructor(hostRef) {
        index$1.registerInstance(this, hostRef);
        this.change = index$1.createEvent(this, "change", 7);
        this.gxSelect = index$1.createEvent(this, "gxSelect", 7);
        this.gxDisable = index$1.createEvent(this, "gxDisable", 7);
        this.gxSelectDidLoad = index$1.createEvent(this, "gxSelectDidLoad", 7);
        this.gxSelectDidUnload = index$1.createEvent(this, "gxSelectDidUnload", 7);
        /**
         * Indicates that the control is selected by default.
         */
        this.selected = false;
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
    }
    selectedChanged(isSelected) {
        if (isSelected) {
            this.gxSelect.emit({ select: this });
        }
    }
    disabledChanged(isDisabled) {
        if (isDisabled) {
            this.gxDisable.emit({ select: this });
        }
    }
    valueChanged() {
        this.change.emit({ select: this });
    }
    componentDidLoad() {
        this.gxSelectDidLoad.emit({ select: this });
    }
    componentDidUnload() {
        this.gxSelectDidUnload.emit({ select: this });
    }
    render() {
        return (index$1.h(index$1.Host, { "aria-hidden": "true", hidden: true }, index$1.h("slot", null)));
    }
    get element() { return index$1.getElement(this); }
    static get watchers() { return {
        "selected": ["selectedChanged"],
        "disabled": ["disabledChanged"],
        "value": ["valueChanged"]
    }; }
};

exports.gx_select_option = SelectOption;
