import { ComponentInterface, EventEmitter } from "../../stencil-public-runtime";
import { GridBase } from "../grid-base/grid-base";
import { HighlightableComponent } from "../common/highlightable";
import { VisibilityComponent } from "../common/interfaces";
export declare class GridFreeStyle implements GridBase, ComponentInterface, VisibilityComponent, HighlightableComponent {
    constructor();
    viewPortInitialized: boolean;
    element: HTMLGxGridFsElement;
    /**
     * This attribute defines if the control size will grow automatically,
     * to adjust to its content size.
     * If set to `false`, it won't grow automatically and it will show scrollbars
     * if the content overflows.
     */
    readonly autoGrow = false;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading State. It's purpose is to know rather the Grid Loading animation or the Grid Empty placeholder should be shown.
     *
     * | Value        | Details                                                                                        |
     * | ------------ | ---------------------------------------------------------------------------------------------- |
     * | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                |
     * | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    readonly loadingState: "loading" | "loaded";
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes.
     * If not specified, then grid empty and loading placeholders will not work correctly.
     */
    readonly recordCount: number;
    /**
     * The threshold distance from the bottom
     * of the content to call the `infinite` output event when scrolled.
     * The threshold value can be either a percent, or
     * in pixels. For example, use the value of `10%` for the `infinite`
     * output event to get called when the user has scrolled 10%
     * from the bottom of the page. Use the value `100px` when the
     * scroll is within 100 pixels from the bottom of the page.
     */
    readonly threshold: string;
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    gxInfiniteThresholdReached: EventEmitter<void>;
    complete(): Promise<void>;
    private ensureViewPort;
    componentDidLoad(): void;
    render(): any;
    private handleGxInfinite;
}
