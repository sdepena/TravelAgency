import { DisableableComponent, Component as GxComponent, VisibilityComponent } from "../common/interfaces";
import { HighlightableComponent } from "../common/highlightable";
export declare class Button implements GxComponent, DisableableComponent, VisibilityComponent, HighlightableComponent {
    constructor();
    private renderer;
    element: HTMLGxButtonElement;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    readonly cssClass: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event). If a disabled image has been specified,
     * it will be shown, hiding the base image (if specified).
     */
    readonly disabled = false;
    /**
     * This attribute lets you specify the relative location of the image to the text.
     *
     * | Value    | Details                                                 |
     * | -------- | ------------------------------------------------------- |
     * | `above`  | The image is located above the text.                    |
     * | `before` | The image is located before the text, in the same line. |
     * | `after`  | The image is located after the text, in the same line.  |
     * | `below`  | The image is located below the text.                    |
     * | `behind` | The image is located behind the text.                   |
     */
    readonly imagePosition: "above" | "before" | "after" | "below" | "behind";
    /**
     * This attribute lets you specify the size of the button.
     *
     * | Value    | Details                                                 |
     * | -------- | ------------------------------------------------------- |
     * | `large`  | Large sized button.                                     |
     * | `normal` | Standard sized button.                                  |
     * | `small`  | Small sized button.                                     |
     */
    readonly size: "large" | "normal" | "small";
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    handleClick(event: UIEvent): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    render(): any;
}
