import { DisableableComponent, Component as GxComponent, VisibilityComponent } from "../common/interfaces";
import { HighlightableComponent } from "../common/highlightable";
import { LineClampComponent } from "../common/line-clamp";
export declare class TextBlock implements GxComponent, DisableableComponent, VisibilityComponent, LineClampComponent, HighlightableComponent {
    constructor();
    element: HTMLGxTextblockElement;
    /**
     * This attribute lets you specify an URL. If a URL is specified, the textblock acts as an anchor.
     */
    readonly href = "";
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * True to cut text when it overflows, showing an ellipsis.
     */
    readonly lineClamp = false;
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    maxLines: number;
    maxHeight: number;
    handleClick(event: UIEvent): void;
    componentDidLoad(): void;
    render(): any;
    private shouldClampLines;
}
