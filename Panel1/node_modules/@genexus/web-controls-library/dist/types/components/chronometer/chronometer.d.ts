import { EventEmitter } from "../../stencil-public-runtime";
import { Component as GxComponent } from "../common/interfaces";
import { TimerState } from "./chronometer-timer-state";
export declare class Chronometer implements GxComponent {
    private eventTimer;
    private startedTime;
    private started;
    private timer;
    element: HTMLGxChronometerElement;
    elapsedTime: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * When the chronometer reaches this value,
     * MaxValueText will be shown instead of the Chronometer value.
     */
    readonly maxValue = 0;
    /**
     * Text to be displayed when chronometer value reaches maxValue.
     */
    readonly maxValueText: string;
    /**
     * Time unit: (s) seconds or (ms) milliseconds for every time control Property.
     */
    readonly unit: "s" | "ms";
    /**
     * Defines the interval that the function onTick will be called.
     */
    readonly interval = 1;
    /**
     * State of the Chronometer.
     */
    readonly state: TimerState;
    /**
     * The value of the control.
     */
    value: number;
    /**
     * The `input` event is emitted every time the chronometer changes (every 1 second)
     */
    input: EventEmitter;
    /**
     * The `change` event is emitted every time the chronometer changes
     */
    change: EventEmitter;
    /**
     * Event to emit after max time is consumed.
     */
    end: EventEmitter;
    /**
     * Event to emit After elapsed time (tickInterval).
     */
    tick: EventEmitter;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId(): Promise<HTMLGxChronometerElement>;
    componentWillLoad(): void;
    componentDidUnload(): void;
    /**
     * Starts the Chronometer
     */
    start(): Promise<void>;
    /**
     * Stops the Chronometer
     */
    stop(): Promise<void>;
    /**
     * Stops and set to 0 the Chronometer.
     */
    reset(): Promise<void>;
    handleChange(): void;
    private tickHandler;
    stateChanged(newState: TimerState, oldState: TimerState): void;
    private getUnit;
    private updateElapsedTime;
    render(): any;
}
