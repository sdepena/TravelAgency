import { ComponentInterface, EventEmitter } from "../../stencil-public-runtime";
import { GridBase } from "../grid-base/grid-base";
import { SwiperOptions } from "swiper";
import { HighlightableComponent } from "../common/highlightable";
import { VisibilityComponent } from "../common/interfaces";
export declare class GridHorizontal implements GridBase, ComponentInterface, VisibilityComponent, HighlightableComponent {
    element: HTMLGxGridHorizontalElement;
    private scrollbarEl?;
    private paginationEl?;
    private swiper;
    private fillMode;
    /**
     * This attribute defines if the control size will grow automatically,
     * to adjust to its content size.
     * If set to `false`, it won't grow automatically and it will show scrollbars
     * if the content overflows.
     */
    readonly autoGrow: boolean;
    /**
     * Number of items per column (items visible at the same time on slider's container).
     */
    readonly columns: number | "auto";
    /**
     * 1-Indexed number of currently active page
     */
    currentPage: number;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * Grid loading state. It's purpose is to know whether the grid loading animation or the grid empty placeholder should be shown.
     *
     * | Value        | Details                                                                                        |
     * | ------------ | ---------------------------------------------------------------------------------------------- |
     * | `loading` | The grid is waiting the server for the grid data. Grid loading mask will be shown.                |
     * | `loaded`   | The grid data has been loaded. If the grid has no records, the empty place holder will be shown. |
     */
    readonly loadingState: "loading" | "loaded";
    /**
     * Logging level. For troubleshooting component update and initialization.
     */
    readonly logLevel: "debug" | "off";
    /**
     * Set numbers of items to define and enable group sliding. Useful to use with rowsPerPage > 1
     */
    readonly itemsPerGroup = 1;
    /**
     * Items layout direction: Could be 'horizontal' or 'vertical' (for vertical slider).
     */
    readonly direction: "horizontal" | "vertical";
    /**
     * Advanced options to pass to the swiper instance.
     * See http://idangero.us/swiper/api/ for valid options
     */
    readonly options: SwiperOptions;
    /**
     * If `true`, show the pagination buttons.
     */
    readonly pager = true;
    /**
     * Grid current row count. This property is used in order to be able to re-render the Grid every time the Grid data changes.
     * If not specified, then grid empty and loading placeholders will not work correctly.
     */
    readonly recordCount: number;
    /**
     * Number of items per column, for multirow layout.
     */
    readonly rows: number;
    /**
     * If `true`, show the scrollbar.
     */
    readonly scrollbar = false;
    /**
     * Set to false to enable slides in free mode position.
     */
    readonly snapToGrid = true;
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    /**
     * This Handler will be called every time grid threshold is reached. Needed for infinite scrolling grids.
     */
    gxInfiniteThresholdReached: EventEmitter<void>;
    /**
     * Emitted after Swiper initialization
     */
    gxGridDidLoad: EventEmitter<void>;
    /**
     * Emitted when the user taps/clicks on the slide's container.
     */
    gxGridClick: EventEmitter<void>;
    /**
     * Emitted when the user double taps on the slide's container.
     */
    gxGridDoubleClick: EventEmitter<void>;
    /**
     * Emitted before the active slide has changed.
     */
    gxGridWillChange: EventEmitter<void>;
    /**
     * Emitted after the active slide has changed.
     */
    gxGridDidChange: EventEmitter<number>;
    /**
     * Emitted when the next slide has started.
     */
    gxGridNextStart: EventEmitter<void>;
    /**
     * Emitted when the previous slide has started.
     */
    gxGridPrevStart: EventEmitter<void>;
    /**
     * Emitted when the next slide has ended.
     */
    gxGridNextEnd: EventEmitter<void>;
    /**
     * Emitted when the previous slide has ended.
     */
    gxGridPrevEnd: EventEmitter<void>;
    /**
     * Emitted when the slide transition has started.
     */
    gxGridTransitionStart: EventEmitter<void>;
    /**
     * Emitted when the slide transition has ended.
     */
    gxGridTransitionEnd: EventEmitter<void>;
    /**
     * Emitted when the slider is actively being moved.
     */
    gxGridDrag: EventEmitter<void>;
    /**
     * Emitted when the slider is at its initial position.
     */
    gxGridReachStart: EventEmitter<void>;
    /**
     * Emitted when the slider is at the last slide.
     */
    gxGridReachEnd: EventEmitter<void>;
    /**
     * Emitted when the user first touches the slider.
     */
    gxGridTouchStart: EventEmitter<void>;
    /**
     * Emitted when the user releases the touch.
     */
    gxGridTouchEnd: EventEmitter<void>;
    private getSwiperCurrentPage;
    pageChanged(): void;
    optionsChanged(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidUnload(): void;
    /**
     * Update the underlying slider implementation. Call this if you've added or removed
     * child slides.
     */
    update(): Promise<void>;
    /**
     * Force swiper to update its height (when autoHeight is enabled) for the duration
     * equal to 'speed' parameter.
     *
     * @param speed The transition duration (in ms).
     */
    updateAutoHeight(speed?: number): Promise<void>;
    /**
     * Transition to the specified slide.
     *
     * @param index The index of the slide to transition to.
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideTo(index: number, speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Transition to the next slide.
     *
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce [Transition/SlideChange][Start/End] transition events.
     */
    slideNext(speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Transition to the previous slide.
     *
     * @param speed The transition duration (in ms).
     * @param runCallbacks If true, the transition will produce the [Transition/SlideChange][Start/End] transition events.
     */
    slidePrev(speed?: number, runCallbacks?: boolean): Promise<void>;
    /**
     * Get the index of the current active slide.
     */
    getActiveIndex(): Promise<number>;
    /**
     * Get the index of the previous slide.
     */
    getPreviousIndex(): Promise<number>;
    /**
     * Get the total number of slides.
     */
    length(): Promise<number>;
    /**
     * Get whether or not the current slide is the last slide.
     */
    isLast(): Promise<boolean>;
    /**
     * Get whether or not the current slide is the first slide.
     */
    isStart(): Promise<boolean>;
    /**
     * Start auto play.
     */
    startAutoplay(): Promise<void>;
    /**
     * Stop auto play.
     */
    stopAutoplay(): Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next slide.
     *
     * @param lock If `true`, disable swiping to the next slide.
     */
    toggleLockSwipeToNext(lock: boolean): Promise<void>;
    /**
     * Lock or unlock the ability to slide to the previous slide.
     *
     * @param lock If `true`, disable swiping to the previous slide.
     */
    toggleLockSwipeToPrev(lock: boolean): Promise<void>;
    /**
     * Lock or unlock the ability to slide to the next or previous slide.
     *
     * @param lock If `true`, disable swiping to the next and previous slide.
     */
    toggleLockSwipes(lock: boolean): Promise<void>;
    private ensureSwiper;
    private isInitialized;
    private log;
    private optionValueDefault;
    private normalizeOptions;
    private getViewPortHeightIfColumnFill;
    render(): any;
}
