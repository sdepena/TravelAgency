import { EventEmitter } from "../../stencil-public-runtime";
import { DisableableComponent, Component as GxComponent, VisibilityComponent } from "../common/interfaces";
import { HighlightableComponent } from "../common/highlightable";
import { Swipeable } from "../common/swipeable";
export declare class Table implements GxComponent, DisableableComponent, Swipeable, VisibilityComponent, HighlightableComponent {
    element: HTMLGxTableElement;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * Like the `grid-templates-areas` CSS property, this attribute defines a grid
     * template by referencing the names of the areas which are specified with the
     * cells [area attribute](../table-cell/readme.md#area). Repeating the name of
     * an area causes the content to span those cells. A period signifies an
     * empty cell. The syntax itself provides a visualization of the structure of
     * the grid.
     */
    readonly areasTemplate: string;
    /**
     * Like the `grid-templates-columns` CSS property, this attribute defines
     * the columns of the grid with a space-separated list of values. The values
     * represent the width of column.
     */
    readonly columnsTemplate: string;
    /**
     * Like the `grid-templates-rows` CSS property, this attribute defines the
     * rows of the grid with a space-separated list of values. The values
     * represent the height of each row.
     */
    readonly rowsTemplate: string;
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    /**
     * Emitted when the element is swiped.
     */
    swipe: EventEmitter;
    /**
     * Emitted when the element is swiped in upward direction.
     */
    swipeUp: EventEmitter;
    /**
     * Emitted when the element is swiped right direction.
     */
    swipeRight: EventEmitter;
    /**
     * Emitted when the element is swiped downward direction.
     */
    swipeDown: EventEmitter;
    /**
     * Emitted when the element is swiped left direction..
     */
    swipeLeft: EventEmitter;
    handleClick(event: UIEvent): void;
    componentDidLoad(): void;
    render(): any;
}
