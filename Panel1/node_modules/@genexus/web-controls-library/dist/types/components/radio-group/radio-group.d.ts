import { EventEmitter } from "../../stencil-public-runtime";
import { Component as GxComponent, DisableableComponent, VisibilityComponent } from "../common/interfaces";
export declare class RadioGroup implements GxComponent, DisableableComponent, VisibilityComponent {
    private radios;
    private didLoad;
    element: HTMLGxRadioGroupElement;
    /**
     * Specifies how the child `gx-radio-option` will be layed out.
     * It supports two values:
     *
     * * `horizontal`
     * * `vertical` (default)
     */
    readonly direction: "horizontal" | "vertical";
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * The name that will be set to all the inner inputs of type radio
     */
    readonly name: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     */
    readonly readonly: boolean;
    /**
     * The initial value of the control. Setting the value automatically selects
     * the corresponding radio option.
     */
    value: string;
    /**
     * The `change` event is emitted when a change to the element's value is
     * committed by the user.
     */
    change: EventEmitter;
    disabledChanged(): void;
    valueChanged(): void;
    onRadioDidLoad(ev: HTMLRadioOptionElementEvent): void;
    onRadioDidUnload(ev: HTMLRadioOptionElementEvent): void;
    onRadioSelect(ev: HTMLRadioOptionElementEvent): void;
    setDisabled(): void;
    componentDidLoad(): void;
    render(): any;
}
interface HTMLRadioOptionElementEvent extends CustomEvent {
    target: any;
}
export {};
