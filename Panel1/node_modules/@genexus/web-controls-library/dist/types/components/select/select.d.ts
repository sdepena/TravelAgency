import { EventEmitter } from "../../stencil-public-runtime";
import { FormComponent } from "../common/interfaces";
export declare class Select implements FormComponent {
    constructor();
    private renderer;
    protected options: any[];
    private didLoad;
    element: HTMLGxSelectElement;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    readonly cssClass: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     */
    readonly readonly: boolean;
    /**
     * Render a text input showing a list of suggested elements.
     */
    suggest: boolean;
    /**
     * Text that appears in the form control when it has no value set
     */
    placeholder: string;
    /**
     * The initial value of the control. Setting the value automatically selects
     * the corresponding option.
     */
    value: string;
    /**
     * The `input` event is emitted when a change to the element's value is
     * committed by the user.
     */
    input: EventEmitter;
    private getChildOptions;
    private updateOptions;
    valueChanged(): void;
    onSelectOptionDidLoad(ev: HTMLSelectOptionElementEvent): void;
    onSelectOptionDidUnload(): void;
    onSelectOptionDisable(): void;
    onSelectOptionChange(): void;
    onSelectOptionSelect(ev: HTMLSelectOptionElementEvent): void;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId(): Promise<string>;
    componentDidLoad(): void;
    render(): any;
}
interface HTMLSelectOptionElementEvent extends CustomEvent {
    target: any;
}
export {};
