import { Component as GxComponent } from "../common/interfaces";
export declare class QueryViewer implements GxComponent {
    private mapServices;
    private propsNotToPost;
    private objectCall;
    private configurationObserver;
    element: HTMLGxQueryViewerElement;
    parameters: string;
    elements: string;
    /**
     * Base URL of the server
     */
    baseUrl: any;
    /**
     * Environmet of the project: JAVA. .Net, NetCore
     */
    env: string;
    /**
     * Language of the QueryViewer
     */
    language: string;
    /**
     * Object of QueryViewer
     */
    object: string;
    /**
     * Name of the Query or Data provider assigned
     */
    objectName: string;
    /**
     * Type of the QueryViewer: Table, PivotTable, Chart, Card
     */
    type: "Card" | "Chart" | "PivotTable" | "Table" | "Default";
    /**
     * If type == Chart, this is the chart type: Bar, Pie, Timeline, etc...
     */
    chartType: "Column" | "Column3D" | "StackedColumn" | "StackedColumn3D" | "StackedColumn100" | "Bar" | "StackedBar" | "StackedBar100" | "Area" | "StackedArea" | "StackedArea100" | "SmoothArea" | "StepArea" | "Line" | "StackedLine" | "StackedLine100" | "SmoothLine" | "StepLine" | "Pie" | "Pie3D" | "Doughnut" | "Doughnut3D" | "LinearGauge" | "CircularGauge" | "Radar" | "FilledRadar" | "PolarArea" | "Funnel" | "Pyramid" | "ColumnLine" | "Column3DLine" | "Timeline" | "SmoothTimeline" | "StepTimeline" | "Sparkline";
    /**
     * If type == PivotTable or Table, if true there is paging, else everything in one table
     */
    paging: boolean;
    /**
     * If paging true, number of items for a single page
     */
    pageSize: number;
    /**
     * Ax to show data labels
     */
    showDataLabelsIn: string;
    /**
     * Timeline
     */
    plotSeries: "InTheSameChart" | "InSeparateCharts";
    /**
     * Labels for XAxis
     */
    xAxisLabels: "Horizontally" | "Rotated30" | "Rotated45" | "Rotated60" | "Vertically";
    /**
     * if true the x Axes intersect at zero
     */
    xAxisIntersectionAtZero: boolean;
    /**
     * if true show values on the graph
     */
    showValues: boolean;
    /**
     * X Axis title
     */
    xAxisTitle: string;
    /**
     * Y Axis title
     */
    yAxisTitle: string;
    /**
     * Type of data to show
     */
    showDataAs: "Values" | "Percentages" | "ValuesAndPercentages";
    /**
     * If true includes trend on the graph
     */
    includeTrend: boolean;
    /**
     * If includeTrend, defines the period of the trend
     */
    trendPeriod: "SinceTheBeginning" | "LastYear" | "LastSemester" | "LastQuarter" | "LastMonth" | "LastWeek" | "LastDay" | "LastHour" | "LastMinute" | "LastSecond";
    /**
     * For timeline for remembering layout
     */
    rememberLayout: boolean;
    /**
     * Orientation of the graph
     */
    orientation: "Horizontal" | "Vertical";
    /**
     * Include spark line
     */
    includeSparkline: boolean;
    /**
     * Include max and min
     */
    includeMaxMin: boolean;
    /**
     * Theme for showing the graph
     */
    theme: string;
    /**
     * Object type -> Query or DataProvider
     */
    objectType: string;
    /**
     * True if it is external query
     */
    isExternalQuery: boolean;
    /**
     * Allowing elements order to change
     */
    allowElementsOrderChange: boolean;
    /**
     * If type== PivotTable or Table, if true will shrink the table
     */
    autoResize: boolean;
    /**
     * If autoResize, in here select the type, Width, height, or both
     */
    autoResizeType: "Both" | "Vertical" | "Horizontal";
    /**
     * Type of font
     */
    fontFamily: string;
    /**
     * Font size
     */
    fontSize: number;
    /**
     * Font Color
     */
    fontColor: string;
    /**
     * Auto refresh group
     */
    autoRefreshGroup: string;
    /**
     * Allowing or not Comlumn sort
     */
    disableColumnSort: boolean;
    /**
     * Allow selection
     */
    allowSelection: boolean;
    /**
     * If type== PivotTable or Table allow to export to XML
     */
    exportToXML: boolean;
    /**
     * If type== PivotTable or Table allow to export to HTML
     */
    exportToHTML: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLS
     */
    exportToXLS: boolean;
    /**
     * If type== PivotTable or Table allow to export to XLSX
     */
    exportToXLSX: boolean;
    /**
     * If type== PivotTable or Table allow to export to PDF
     */
    exportToPDF: boolean;
    /**
     * Title of the QueryViewer
     */
    queryTitle: string;
    /**
     * Version of data
     */
    dataVersionId: number;
    parameterValueChangedHandler(eventInfo: CustomEvent): void;
    elementChangedHandler(eventInfo: CustomEvent): void;
    configurationChangedHandler(): void;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    private parseObjectToObjectcall;
    private hasObjectCall;
    private loadObjectNameFromObjectCall;
    private postData;
    private getParameters;
    private getElements;
    private getGrouping;
    render(): any;
}
