import { DisableableComponent, Component as GxComponent, VisibilityComponent } from "../common/interfaces";
import { HighlightableComponent } from "../common/highlightable";
export declare class Image implements GxComponent, DisableableComponent, VisibilityComponent, HighlightableComponent {
    constructor();
    element: HTMLGxImageElement;
    /**
     * This attribute lets you specify the alternative text.
     */
    readonly alt: string;
    /**
     * If true, the component will be sized to match the image's intrinsic size when not constrained
     * via CSS dimension properties (for example, height or width).
     * If false, the component will never force its height to match the image's intrinsic size. The width, however,
     * will match the intrinsic width. In GeneXus terms, it will auto grow horizontally, but not vertically.
     */
    readonly autoGrow = true;
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * This attribute lets you specify the height.
     */
    readonly height: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * True to lazy load the image, when it enters the viewport.
     */
    readonly lazyLoad = true;
    /**
     * This attribute lets you specify the low resolution image SRC.
     */
    readonly lowResolutionSrc = "";
    /**
     * This attribute allows specifing how the image is sized according to its container.
     * `contain`, `cover`, `fill` and `none` map directly to the values of the CSS `object-fit` property.
     * The `tile` value repeats the image, both vertically and horizontally, creating a tile effect.
     */
    scaleType: "contain" | "cover" | "fill" | "none" | "tile";
    /**
     * This attribute lets you specify the SRC.
     */
    readonly src: string;
    /**
     * This attribute lets you specify the width.
     */
    width: string;
    /**
     * True to highlight control when an action is fired.
     */
    readonly highlightable = false;
    handleClick(event: UIEvent): void;
    private handleImageLoad;
    componentDidLoad(): void;
    disconnectedCallback(): void;
    render(): any;
    private getInnerImageStyle;
    private shouldLazyLoad;
    private handleLazyLoaded;
}
