import { EventEmitter } from "../../stencil-public-runtime";
import { Component as GxComponent } from "../common/interfaces";
export declare class Map implements GxComponent {
    private centerCoords;
    private isSelectionLayerSlot;
    private map;
    private markersList;
    private linesList;
    private mapProviderApplied;
    private mapTypesProviders;
    private selectionMarker;
    private tileLayerApplied;
    private watchPositionId;
    element: HTMLGxMapElement;
    userLocationCoords: string;
    userLocationHandler(): void;
    /**
     * The coord of initial center of the map.
     *
     */
    center: string;
    /**
     * Enable the High Accuracy in user location.
     * _Note: This property applies when ```watchPosition = true```._
     */
    highAccuracyLocator: boolean;
    /**
     * The map provider.
     * _Note: Currently, this property is for setting a custom map provider using an URL._
     *
     */
    mapProvider: string;
    /**
     * Map type to be used.
     * _Note: If you set a map provider, the selected map type will be ignored._
     *
     */
    mapType: "standard" | "satellite" | "hybrid";
    /**
     * The max zoom level available in the map.
     * _Note: 20 is the best value to be used, only lower values are allowed. Is highly recommended to no change this value if you are not sure about the `maxZoom` supported by the map._
     */
    maxZoom: number;
    /**
     * Enables the possibility to navigate the map and select a location point using the map center.
     */
    selectionLayer: boolean;
    /**
     * Indicates if the current location of the device is displayed on the map.
     */
    watchPosition: boolean;
    selectionLayerHandler(): void;
    /**
     * The initial zoom level in the map.
     *
     */
    zoom: number;
    /**
     * Emmited when the map is loaded.
     *
     */
    gxMapDidLoad: EventEmitter;
    /**
     * Emmited when the map is clicked and return click coords.
     *
     */
    mapClick: EventEmitter;
    /**
     * Emmited when the map is being moved, if selection layer is active.
     *
     */
    selectionInput: EventEmitter;
    /**
     * Emmited when the map stops from being moved, if selection layer is active.
     *
     */
    selectionChange: EventEmitter;
    /**
     * Emmited when the user location coords change.
     *
     */
    userLocationChange: EventEmitter;
    onMapMarkerDidLoad(event: CustomEvent): void;
    onMapLineDidLoad(event: CustomEvent): void;
    private addMapListener;
    private removeMapListener;
    private checkForMaxZoom;
    private fitBounds;
    private getZoom;
    private getSelectionMarkerSlot;
    private onMapMarkerDeleted;
    private onMapLineDeleted;
    private updateSelectionMarkerPosition;
    private registerSelectionLayerEvents;
    private selectingTypes;
    private setMapProvider;
    private setUserLocation;
    componentWillLoad(): void;
    componentDidLoad(): void;
    componentDidUpdate(): void;
    componentDidUnload(): void;
    render(): any;
}
