import { EventEmitter } from "../../stencil-public-runtime";
import { Component as GxComponent, DisableableComponent, VisibilityComponent } from "../common/interfaces";
export declare class PasswordEdit implements GxComponent, DisableableComponent, VisibilityComponent {
    constructor();
    private renderer;
    element: HTMLGxPasswordEditElement;
    /**
     * A CSS class to set as the inner `input` element class.
     */
    readonly cssClass: string;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    readonly invisibleMode: "collapse" | "keep-space";
    /**
     * This attribute lets you specify if the element is disabled.
     * If disabled, it will not fire any user interaction related event
     * (for example, click event).
     */
    readonly disabled = false;
    /**
     * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder)
     * attribute for `input` elements.
     */
    readonly placeholder: string;
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     */
    readonly readonly: boolean;
    /**
     * Indicates if the value is revealed or masked.
     */
    revealed: boolean;
    /**
     * Text of the reveal button to offer revealing the password.
     */
    readonly revealButtonTextOn: string;
    /**
     * Text of the reveal button to offer hiding the password.
     */
    readonly revealButtonTextOff: string;
    /**
     * If true, a reveal password button is shown next to the password input.
     * Pressing the reveal button toggles the password mask, allowing the user to
     * view the password text.
     */
    readonly showRevealButton: boolean;
    /**
     * The initial value of the control.
     */
    value: string;
    /**
     * The `change` event is emitted when a change to the element's value is
     * committed by the user. Unlike the `input` event, the `change` event is not
     * necessarily fired for each change to an element's value but when the
     * control loses focus.
     */
    change: EventEmitter;
    /**
     * The `input` event is fired synchronously when the value is changed.
     */
    input: EventEmitter;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId(): Promise<any>;
    protected valueChanged(): void;
    protected handleTriggerClick(): void;
    render(): any;
    componentDidUnload(): void;
}
