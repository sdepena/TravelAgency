import { EventEmitter } from "../../stencil-public-runtime";
import { FormComponent } from "../common/interfaces";
export declare class Rating implements FormComponent {
    constructor();
    private inputId;
    private svgViewport;
    element: HTMLGxRatingElement;
    /**
     * This attribute allows you specify if the element is disabled.
     * If disabled, it will not trigger any user interaction related event
     * (for example, click event).
     */
    disabled: boolean;
    /**
     * This attribute lets you specify how this element will behave when hidden.
     *
     * | Value        | Details                                                                     |
     * | ------------ | --------------------------------------------------------------------------- |
     * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
     * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
     */
    invisibleMode: "collapse" | "keep-space";
    /**
     * This porpoerty is required if you want to display a score.
     * >E.g: In a score of 4/5 stars the `maxValue` is `5` and the `value` is `4`
     *
     */
    maxValue: number;
    /**
     * This attribute indicates that the user cannot modify the value of the control.
     * Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly)
     * attribute for `input` elements.
     * _Disable by default_
     */
    readonly: boolean;
    /**
     * The current value displayed by the component.
     *
     */
    value: number;
    /**
     * The 'input' event is emitted when a change to the element's value is committed by the user.
     */
    input: EventEmitter;
    handleClick(event: UIEvent): void;
    /**
     * Returns the id of the inner `input` element (if set).
     */
    getNativeInputId(): Promise<string>;
    private renderStarsRating;
    private renderStarsScore;
    render(): any;
    private renderStarShape;
}
