@mixin dragging-behavior(
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @if $accept-drag-class != null {
    &.accept-drag {
      @extend #{$accept-drag-class} !optional;
    }
  }
  @if $no-accept-drag-class != null {
    &.no-accept-drag {
      @extend #{$no-accept-drag-class} !optional;
    }
  }
  @if $start-dragging-class != null {
    &.start-dragging-class {
      @extend #{$start-dragging-class} !optional;
    }
  }
  @if $drag-over-class != null {
    &.drag-over-class {
      @extend #{$drag-over-class} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-group custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the group is active
/// @param {string} $caption Class for styling the caption of the group
@mixin gx-group($class, $highlighted: null, $caption: null) {
  & > fieldset {
    @extend #{$class} !optional;

    @if ($caption != null) {
      & > legend {
        @extend #{$caption} !optional;
      }
    }
  }

  @if ($highlighted != null) {
    &.gx-highlighted > fieldset {
      @extend #{$highlighted} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-image custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the image is active
@mixin gx-image(
  $class,
  $highlighted: null,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  img {
    @extend #{$class} !optional;
  }

  @if ($highlighted != null) {
    &.gx-highlighted {
      img {
        @extend #{$highlighted} !optional;
      }
    }
  }

  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-loading custom elements
/// @param {string} $class Base class of the component
/// @param {string} $animation Class for the animation part of the component (applies when an animation is specified)
/// @param {string} $title Class for the title part of the component
/// @param {string} $description Class for the description part of the component
@mixin gx-loading($class, $animation: null, $title: null, $description: null) {
  @if ($animation != null) {
    gx-lottie,
    .gx-lottie-test {
      @extend #{$animation};
    }
  }

  .box {
    @extend #{$class} !optional;
  }

  @if ($title != null) {
    .title {
      @extend #{$title} !optional;
    }
  }

  @if ($description != null) {
    .title {
      @extend #{$description} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-table custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the table is active
/// @param {string} $horizontal-line Class of the horizontal line separator (to be implemented)
@mixin gx-table($class, $highlighted: null, $horizontal-line: null) {
  @extend #{$class} !optional;

  @if ($highlighted != null) {
    &.gx-highlighted {
      @extend #{$highlighted} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-textblock custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the textblock is active
/// @param {string} $accept-drag-class Class to be used when the component shows that it accepts a drop operation
/// @param {string} $no-accept-drag-class Class to be used when the component shows that it doesn't accept a drop operation
/// @param {string} $start-dragging-class Class to be used when the component starts being dragged
/// @param {string} $drag-over-class Class to be used when the component is hovered by other control during a drag operation
@mixin gx-textblock(
  $class,
  $highlighted: null,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
  .content,
  .label-content {
    @extend #{$class} !optional;
  }

  @if ($highlighted != null) {
    &.gx-highlighted {
      .content,
      .label-content {
        @extend #{$highlighted} !optional;
      }
    }
  }

  @include gx-form-field($class);
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-chronometer custom elements
/// @param {string} $class Base class of the component
@mixin gx-chronometer($class) {
  span {
    @extend #{$class} !optional;
  }
}

////
/// @group theming-mixins
////

$gridContentSelector: "& > *[slot='grid-content']:not(virtual-scroller) >, & > * > .scrollable-content >";

/// Helper mixin to ease styling gx-grid-base custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the grid is active
/// @param {string} $odd-row Class for styling the Odd row
/// @param {string} $even-row Class for styling the Odd even
/// @param {string} loading-animation Class for styling the grid loading animation
/// @param {string} group-separator Class for styling the grid group-separator
/// @param {string} $horizontal-line Class of the horizontal line separator (to be implemented)
@mixin gx-grid-base(
  $class,
  $highlighted: null,
  $odd-row: null,
  $even-row: null,
  $loading-animation: null,
  $group-separator: null,
  $horizontal-line: null
) {
  @extend #{$class};

  @if ($highlighted != null) {
    &.gx-highlighted {
      @extend #{$highlighted} !optional;
    }
  }

  #{$gridContentSelector} {
    @if ($odd-row != null) {
      .gx-grid-row:not(gx-grid-smart-cell):nth-child(odd),
      * > .gx-grid-row:nth-child(odd),
      .gx-grid-row:not([is-row-even]),
      * > .gx-grid-row:not([is-row-even]) {
        @extend #{$odd-row} !optional;
      }
    }

    @if ($even-row != null) {
      .gx-grid-row:not(gx-grid-smart-cell):nth-child(even),
      * > .gx-grid-row:nth-child(even),
      .gx-grid-row[is-row-even],
      * > .gx-grid-row[is-row-even] {
        @extend #{$even-row} !optional;
      }
    }

    @if ($horizontal-line != null) {
      /// CSS Grid Smart. row-gap css property does not support color.
      gx-grid-smart-cell {
        & > *::after {
          --grid--horizontal-line-separator-default: block;
          @extend #{$horizontal-line} !optional;
          content: "";
          height: var(--grid--horizontal-line-size, 1px);
          display: var(
            --grid--horizontal-line-separator,
            --grid--horizontal-line-separator-default
          );
          position: absolute;
          bottom: 0;
          left: 0;
          right: 0;
        }
      }
    }

    @if ($group-separator != null) {
      .gx-group-separator {
        @extend #{$group-separator} !optional;
      }
    }
  }
}

/// Helper mixin to ease styling gx-grid-base's custom elements rows
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the grid row is active
@mixin gx-grid-base-row($class, $highlighted: null) {
  @extend #{$class};

  @if ($highlighted != null) {
    &.gx-highlighted,
    &[data-gx-grid-highlighted] {
      @extend #{$highlighted} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-edit custom elements
/// @param {string} $class Base class of the component
/// @param {string} $readonly-class Base class of the component when readonly
@mixin gx-edit($class, $readonly-class: null) {
  input,
  textarea {
    @extend #{$class} !optional;
  }
  & > [data-readonly] {
    @extend #{$readonly-class} !optional;
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-form-field custom elements
/// @param {string} $class Base class of the field inside the component
/// @param {string} $label Base class of the label of the component
/// @param {string} $highlighted Class to be used when the component's field is focused
/// @param {string} $accept-drag-class Class to be used when the component shows that it accepts a drop operation
/// @param {string} $no-accept-drag-class Class to be used when the component shows that it doesn't accept a drop operation
/// @param {string} $start-dragging-class Class to be used when the component starts being dragged
/// @param {string} $drag-over-class Class to be used when the component is hovered by other control during a drag operation
@mixin gx-form-field(
  $class,
  $label: null,
  $highlighted: null,
  $accept-drag-class: null,
  $no-accept-drag-class: null,
  $start-dragging-class: null,
  $drag-over-class: null
) {
  @include dragging-behavior(
    $accept-drag-class,
    $no-accept-drag-class,
    $start-dragging-class,
    $drag-over-class
  );
  [data-part="field"],
  [data-readonly] {
    @extend #{$class} !optional;
  }
  @if ($label != null) {
    [data-part="label"] {
      @extend #{$label} !optional;
    }
  }
  @if ($highlighted != null) {
    [data-part="field"]:focus,
    &.gx-highlighted[type="text"][readonly="true"] [data-readonly] {
      @extend #{$highlighted} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-button custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the button is focused
@mixin gx-button($class, $highlighted: null) {
  button {
    @extend #{$class} !optional;

    &:hover,
    &:focus,
    &:not(:disabled):not(.disabled):active {
      @extend #{$class} !optional;

      filter: brightness(85%);
    }
  }

  @if ($highlighted != null) {
    &.gx-highlighted {
      button:not(:disabled):not(.disabled) {
        @extend #{$highlighted} !optional;
      }
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-card custom elements
/// @param {string} $class Base class of the component
/// @param {string} $bars Base class of bars of the component
@mixin gx-card($class: null, $bars: null) {
  & > .card {
    @if ($class != null) {
      @extend #{$class} !optional;
    }
    @if ($bars != null) {
      & > .card-header,
      & > .card-footer {
        @extend #{$bars} !optional;
      }
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-tab custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the tab is active
/// @param {string} $selected-tab-caption Class for styling the selected tab caption
/// @param {string} $unselected-tab-caption Class for styling unselected tab caption
@mixin gx-tab(
  $class,
  $highlighted: null,
  $selected-tab-caption: null,
  $unselected-tab-caption: null
) {
  @extend #{$class} !optional;

  @if ($highlighted != null) {
    &.gx-highlighted {
      @extend #{$highlighted} !optional;
    }
  }

  @if ($unselected-tab-caption != null) {
    gx-tab-caption[aria-selected="false"] {
      @extend #{$unselected-tab-caption} !optional;
    }
  }

  @if ($selected-tab-caption != null) {
    gx-tab-caption[aria-selected="true"] {
      @extend #{$selected-tab-caption} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-tab-caption custom elements
/// @param {string} $class Base class of the component
/// @param {string} $highlighted Class to be used when the tab caption is active
@mixin gx-tab-caption($class, $highlighted: null) {
  a.gx-nav-link {
    @extend #{$class} !optional;
  }

  @if ($highlighted != null) {
    &.gx-highlighted {
      a.gx-nav-link {
        @extend #{$highlighted} !optional;
      }
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-navbar custom elements
/// @param {string} $class Base class of the component
/// @param {string} $action Class for styling the actions of the navigation bar
/// @param {string} $back-button Class for styling the back button of the navigation bar
/// @param {string} $default-button Class for styling buttons of the navigation bar
@mixin gx-navbar(
  $class,
  $action: null,
  $back-button: null,
  $default-button: null
) {
  @extend #{$class} !optional;

  @if ($action != null) {
    gx-navbar-item {
      @extend #{$action} !optional;
    }
  }

  @if ($default-button != null) {
    button {
      @extend #{$default-button} !optional;
    }
  }

  @if ($back-button != null) {
    .gx-navbar-back-button {
      @extend #{$back-button} !optional;
    }
  }
}

////
/// @group theming-mixins
////

/// Helper mixin to ease styling gx-action-sheet custom elements
/// @param {string} $class Base class of the component
@mixin gx-action-sheet($class) {
  & {
    @extend #{$class} !optional;
  }
}

