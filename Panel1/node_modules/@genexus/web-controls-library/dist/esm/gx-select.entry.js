import { h, r as registerInstance, c as createEvent, g as getElement } from './index-10623738.js';

let autoSelectId = 0;
class SelectRender {
    constructor(component) {
        this.component = component;
        this.options = [];
        if (!this.selectId && !this.component.readonly) {
            this.selectId = this.component.element.id
                ? `${this.component.element.id}__select`
                : `gx-select-auto-id-${autoSelectId++}`;
        }
    }
    updateOptions(options) {
        this.options = options;
    }
    getNativeInputId() {
        return !this.component.readonly ? this.selectId : null;
    }
    getCssClasses() {
        const classList = [];
        if (this.component.readonly) {
            classList.push("form-control-plaintext");
        }
        else {
            classList.push("custom-select");
        }
        if (this.component.cssClass) {
            classList.push(this.component.cssClass);
        }
        return classList.join(" ");
    }
    getReadonlyTextContent() {
        const matchingOpts = this.options.filter(o => o.value === this.component.value);
        if (matchingOpts.length > 0) {
            return matchingOpts[0].innerText;
        }
        return "";
    }
    getValueFromEvent(event) {
        return event.target && event.target.value;
    }
    handleChange(event) {
        this.component.value = this.getValueFromEvent(event);
        this.component.input.emit(event);
    }
    render() {
        if (this.component.readonly) {
            return (h("span", { class: this.getCssClasses() }, this.getReadonlyTextContent()));
        }
        else {
            let datalistId;
            const attris = {
                "aria-disabled": this.component.disabled ? "true" : undefined,
                class: this.getCssClasses(),
                disabled: this.component.disabled,
                id: this.selectId,
                onChange: this.handleChange.bind(this),
                ref: (select) => {
                    select.value = this.component.value;
                }
            };
            if (this.component.suggest) {
                datalistId = `${this.selectId}__datalist`;
            }
            return this.component.suggest
                ? [
                    h("gx-bootstrap", null),
                    h("input", { list: datalistId, disabled: this.component.disabled, placeholder: this.component.placeholder, value: this.component.value, onChange: this.handleChange.bind(this) }),
                    h("datalist", { id: datalistId }, this.options.map(({ innerText, selected, value, disabled }) => (h("option", { disabled: disabled, selected: selected, value: value }, innerText))))
                ]
                : [
                    h("gx-bootstrap", null),
                    h("select", Object.assign({}, attris), this.options.map(({ innerText, selected, value, disabled }) => (h("option", { disabled: disabled, selected: selected, value: value }, innerText))))
                ];
        }
    }
}

const Select = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        this.options = [];
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new SelectRender(this);
    }
    getChildOptions() {
        return Array.from(this.element.querySelectorAll("gx-select-option")).map((option) => {
            return {
                disabled: option.disabled,
                innerText: option.innerText,
                selected: option.selected,
                value: option.value
            };
        });
    }
    updateOptions(options) {
        this.options = options;
        this.renderer.updateOptions(options);
    }
    valueChanged() {
        // the select value just changed
        const optionsElement = Array.from(this.element.querySelectorAll("gx-select-option"));
        // let's set the new check state to all options
        // regardless if it is checked or not
        optionsElement.forEach(option => {
            if (option.value === this.value) {
                // the option value matches with the new select value
                // let's check this option
                option.selected = true;
            }
            else {
                // the option value doesn't match
                // with the new select value
                // let's uncheck this option
                option.selected = false;
            }
            // if the new select value doesn't
            // match with any option, all options
            // will be unchecked
        });
        // after set the new check state to all options
        // let's update the options list
        this.updateOptions(optionsElement.map((option) => {
            return {
                disabled: option.disabled,
                innerText: option.innerText,
                selected: option.selected,
                value: option.value
            };
        }));
        if (this.didLoad) {
            // emit the new value
            this.input.emit({ value: this.value });
        }
    }
    onSelectOptionDidLoad(ev) {
        const option = ev.target;
        if (this.value) {
            // check if the select has a setted value
            if (this.value === option.value) {
                // this select has a value and this
                // option equals the correct select value
                // so let's set this option as checked
                option.selected = true;
            }
            else {
                // if the option value does not match
                // with the select value,
                // the option will be unchecked
                // regardless if the option was
                // initialized as checked
                option.selected = false;
            }
        }
        else {
            // if the select does not have a value
            // let's look for options initialized as checked
            if (option.selected) {
                // this option was initialized as checked,
                // so let's set the select's value
                // equals to the checked option value
                this.value = option.value;
            }
            // If there is no option checked
            // and no value was set in the select,
            // it will keep undefined until any
            // change or checked option
        }
        this.updateOptions(this.getChildOptions());
    }
    onSelectOptionDidUnload() {
        this.updateOptions(this.getChildOptions());
    }
    onSelectOptionDisable() {
        this.updateOptions(this.getChildOptions());
    }
    onSelectOptionChange() {
        this.updateOptions(this.getChildOptions());
    }
    onSelectOptionSelect(ev) {
        this.options.forEach(option => {
            if (option === ev.target) {
                if (option.value !== this.value) {
                    this.value = option.value;
                }
            }
            else {
                option.selected = false;
            }
        });
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    async getNativeInputId() {
        return this.renderer.getNativeInputId();
    }
    componentDidLoad() {
        this.didLoad = true;
    }
    render() {
        return this.renderer.render();
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "value": ["valueChanged"]
    }; }
};

export { Select as gx_select };
