import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-10623738.js';
import { m as makeHighlightable } from './highlightable-49b186e7.js';
import { i as imagePositionRender, a as imagePositionClass, h as hideMainImageWhenDisabledClass } from './image-position-f497f3df.js';

const tabCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-tab{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex:1;flex:1;--elevation:0;--tab-strip-elevation:0;--tab-caption-border-color:#c3c4c8;--tab-caption-disabled-color:#c3c4c8;--tab-caption-active-border-color:#2d31b4;--tab-caption-focus-border-color:#2d31b4;--tab-caption-hover-border-color:#5a5edc;--tab-caption-vertical-padding:8px;--tab-caption-horizontal-padding:23px;--tab-caption-image-vertical-margin:6px;--tab-caption-image-horizontal-margin:2px;--tab-strip-background-color:transparent;--tab-strip-height:auto}gx-tab[hidden]{display:none !important}gx-tab[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-tab>div{-webkit-box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075));box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075));display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column;overflow:hidden;--tab-scrollbar-background-color:var(\n    --gx-scrollbar-background-color,\n    #f5f5f5\n  );--tab-scrollbar-thumb-color:var(--gx-scrollbar-thumb-color, #555)}gx-tab>div .gx-nav-tabs{--elevation:var(--tab-strip-elevation);-webkit-box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075));box-shadow:0 calc(var(--elevation) * 0.125rem) calc(var(--elevation) * 0.25rem) rgba(0, 0, 0, calc(var(--elevation) * 0.075));background-color:var(--tab-strip-background-color);height:var(--tab-strip-height);display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-wrap:nowrap;flex-wrap:nowrap;overflow-y:auto;scrollbar-width:thin;scrollbar-color:var(--tab-scrollbar-thumb-color) var(--tab-scrollbar-background-color)}gx-tab>div .gx-nav-tabs-filler{-ms-flex:1;flex:1;border-bottom:1px solid var(--tab-caption-border-color)}gx-tab>div .gx-nav-tabs::-webkit-scrollbar{width:4px;height:4px}gx-tab>div .gx-nav-tabs::-webkit-scrollbar-track{background:var(--tab-scrollbar-background-color)}gx-tab>div .gx-nav-tabs::-webkit-scrollbar-thumb{background-color:var(--tab-scrollbar-thumb-color);border-radius:6px;border:1px solid var(--tab-scrollbar-background-color)}gx-tab>div .gx-tab-content{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1}";

const BASE_TABLIST_SELECTOR = ":scope > [role='tablist']";
const Tab = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.tabChange = createEvent(this, "tabChange", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
    }
    tabClickHandler(event) {
        const targetElement = event.target;
        if (targetElement.closest("gx-tab") !== this.element) {
            return;
        }
        const oldSelectedTab = this.lastSelectedTab;
        this.setSelectedTab(targetElement);
        if (oldSelectedTab !== this.lastSelectedTab) {
            this.tabChange.emit(event);
        }
    }
    setSelectedTab(captionElement) {
        this.lastSelectedTab = captionElement;
        this.getCaptionSlots().forEach((slotElement, i) => {
            slotElement.selected = slotElement === captionElement;
            const nthChild = i + 1;
            const pageElement = this.element.querySelector(`:scope > gx-tab-page:nth-child(${nthChild}), 
        ${BASE_TABLIST_SELECTOR} > .gx-tab-content > gx-tab-page:nth-child(${nthChild})`);
            this.mapPageToCaptionSelection(slotElement, pageElement);
        });
    }
    getCaptionSlots() {
        return Array.from(this.element.querySelectorAll(`:scope > [slot='caption'], 
         ${BASE_TABLIST_SELECTOR} > .gx-nav-tabs > [slot='caption']`));
    }
    mapPageToCaptionSelection(captionElement, pageElement) {
        pageElement.classList.toggle("gx-tab-page--active", !!captionElement.selected);
    }
    componentDidLoad() {
        makeHighlightable(this);
        this.linkTabs(true);
    }
    componentDidUpdate() {
        this.linkTabs();
    }
    disconnectedCallback() {
        this.lastSelectedTab = null;
    }
    linkTabs(resolveSelected = false) {
        const captionSlots = this.getCaptionSlots();
        const pageSlots = this.getPageSlots();
        if (captionSlots.length === pageSlots.length) {
            captionSlots.forEach((captionElement, i) => {
                const pageElement = pageSlots[i];
                captionElement.setAttribute("aria-controls", pageElement.id);
                pageElement.setAttribute("aria-labelledby", captionElement.id);
                if (resolveSelected) {
                    this.mapPageToCaptionSelection(captionElement, pageElement);
                    if (captionElement.selected) {
                        this.lastSelectedTab = captionElement;
                    }
                }
            });
        }
    }
    render() {
        this.setCaptionSlotsClass();
        this.setPageSlotsClass();
        return (h(Host, null, h("div", { role: "tablist" }, h("div", { class: "gx-nav-tabs" }, h("slot", { name: "caption" }), h("div", { "aria-hidden": "true", class: "gx-nav-tabs-filler" })), h("div", { class: "gx-tab-content" }, h("slot", { name: "page" })))));
    }
    setCaptionSlotsClass() {
        this.getCaptionSlots().forEach(captionElement => {
            if (!captionElement.classList.contains("gx-nav-item")) {
                captionElement.classList.add("gx-nav-item");
            }
        });
    }
    setPageSlotsClass() {
        this.getPageSlots().forEach(pageElement => {
            if (!pageElement.classList.contains("gx-tab-page")) {
                pageElement.classList.add("gx-tab-page");
            }
        });
    }
    getPageSlots() {
        return Array.from(this.element.querySelectorAll(`:scope > [slot='page'], 
         ${BASE_TABLIST_SELECTOR} > .gx-tab-content > [slot='page']`));
    }
    get element() { return getElement(this); }
};
Tab.style = tabCss;

const tabCaptionCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-tab-caption{display:-ms-flexbox;display:flex;font-size:12px;font-weight:600;text-transform:uppercase}gx-tab-caption[hidden]{display:none !important}gx-tab-caption[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-tab-caption>a{-ms-flex:1;flex:1;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}gx-tab-caption>a>img[slot=disabled-image]{display:none}gx-tab-caption.gx-image-position--below>a>img{-ms-flex-order:99;order:99}gx-tab-caption.gx-image-position--before>a{-ms-flex-direction:row;flex-direction:row}gx-tab-caption.gx-image-position--after>a{-ms-flex-direction:row;flex-direction:row}gx-tab-caption.gx-image-position--after>a>img{-ms-flex-order:99;order:99}gx-tab-caption.gx-image-position--behind>a{-ms-flex-direction:column;flex-direction:column}gx-tab-caption.gx-image-position--behind>a>img{position:absolute}gx-tab-caption.gx-image-position--behind>a>span{z-index:1}gx-tab-caption.gx-image-position--hide-main>a>img[slot=main-image]{display:none}gx-tab-caption:not(.gx-tab-caption--active)>a>img[slot=disabled-image]{display:inline-block}gx-tab-caption [slot=main-image],gx-tab-caption [slot=disabled-image]{max-height:18px;max-width:18px;-o-object-fit:contain;object-fit:contain}gx-tab-caption.gx-image-position--before [slot=main-image],gx-tab-caption.gx-image-position--before [slot=disabled-image]{margin:0 var(--tab-caption-image-vertical-margin)}gx-tab-caption.gx-image-position--after [slot=main-image],gx-tab-caption.gx-image-position--after [slot=disabled-image]{margin:0 var(--tab-caption-image-vertical-margin)}gx-tab-caption.gx-image-position--above [slot=main-image],gx-tab-caption.gx-image-position--above [slot=disabled-image]{margin:var(--tab-caption-image-horizontal-margin) 0}gx-tab-caption.gx-image-position--below [slot=main-image],gx-tab-caption.gx-image-position--below [slot=disabled-image]{margin:var(--tab-caption-image-horizontal-margin) 0}gx-tab-caption.gx-tab-caption .gx-nav-link{display:-ms-flexbox;display:flex;padding:var(--tab-caption-vertical-padding) var(--tab-caption-horizontal-padding);white-space:nowrap;border-color:transparent;border-style:solid;border-bottom-color:var(--tab-caption-border-color);border-width:1px}gx-tab-caption.gx-tab-caption .gx-nav-link,gx-tab-caption.gx-tab-caption .gx-nav-link:active,gx-tab-caption.gx-tab-caption .gx-nav-link:focus,gx-tab-caption.gx-tab-caption .gx-nav-link:hover,gx-tab-caption.gx-tab-caption .gx-nav-link:visited{color:inherit;text-decoration:none;outline:0}gx-tab-caption.gx-tab-caption .gx-nav-link:focus{border:1px solid var(--tab-caption-focus-border-color)}gx-tab-caption.gx-tab-caption .gx-nav-link:hover{border-bottom:2px solid var(--tab-caption-hover-border-color);padding-bottom:calc(var(--tab-caption-vertical-padding) - 1px)}gx-tab-caption.gx-tab-caption .gx-nav-link:active{border-bottom:2px solid var(--tab-caption-active-border-color);padding-bottom:calc(var(--tab-caption-vertical-padding) - 1px)}gx-tab-caption.gx-tab-caption--active .gx-nav-link{border-top-color:var(--tab-caption-border-color);border-right-color:var(--tab-caption-border-color);border-bottom-color:transparent;border-left-color:var(--tab-caption-border-color)}gx-tab-caption.gx-tab-caption--disabled{color:var(--tab-caption-disabled-color)}";

let autoTabId = 0;
const TabCaption = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.tabSelect = createEvent(this, "tabSelect", 7);
        this.hasDisabledImage = false;
        /**
         * This attribute lets you specify if the tab page is disabled
         *
         */
        this.disabled = false;
        /**
         * This attribute lets you specify the relative location of the image to the text.
         *
         * | Value    | Details                                                 |
         * | -------- | ------------------------------------------------------- |
         * | `above`  | The image is located above the text.                    |
         * | `before` | The image is located before the text, in the same line. |
         * | `after`  | The image is located after the text, in the same line.  |
         * | `below`  | The image is located below the text.                    |
         * | `behind` | The image is located behind the text.                   |
         */
        this.imagePosition = "above";
        /**
         * This attribute lets you specify if the tab page corresponding to this caption is selected
         *
         */
        this.selected = false;
        /**
         * True to highlight control when an action is fired.
         */
        this.highlightable = false;
        this.clickHandler = this.clickHandler.bind(this);
    }
    selectedHandler() {
        if (this.selected) {
            this.tabSelect.emit(event);
        }
    }
    componentWillLoad() {
        if (!this.element.id) {
            this.element.id = `gx-tab-caption-auto-id-${autoTabId++}`;
        }
        this.hasDisabledImage =
            this.element.querySelector("[slot='disabled-image']") !== null;
    }
    componentDidLoad() {
        makeHighlightable(this);
    }
    render() {
        this.element.setAttribute("aria-selected", (!!this.selected).toString());
        return (h(Host, { role: "tab", class: {
                "gx-tab-caption": true,
                "gx-tab-caption--active": this.selected,
                "gx-tab-caption--disabled": this.disabled,
                [imagePositionClass(this.imagePosition)]: true,
                [hideMainImageWhenDisabledClass]: !this.selected && this.hasDisabledImage
            } }, h("a", { class: {
                "gx-nav-link": true
            }, href: "#", onClick: this.clickHandler }, imagePositionRender({
            default: h("slot", null),
            disabledImage: h("slot", { name: "disabled-image" }),
            mainImage: h("slot", { name: "main-image" })
        }))));
    }
    clickHandler(event) {
        event.preventDefault();
        if (!this.disabled) {
            this.selected = true;
        }
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "selected": ["selectedHandler"]
    }; }
};
TabCaption.style = tabCaptionCss;

const tabPageCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-tab-page{display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-direction:column;flex-direction:column}gx-tab-page[hidden]{display:none !important}gx-tab-page[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}gx-tab-page.gx-tab-page{display:none}gx-tab-page.gx-tab-page--active{display:-ms-flexbox;display:flex}";

let autoTabId$1 = 0;
const TabPage = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    componentWillLoad() {
        if (!this.element.id) {
            this.element.id = `gx-tab-page-auto-id-${autoTabId$1++}`;
        }
    }
    render() {
        return (h(Host, { role: "tabpanel", tabindex: "0" }, h("slot", null)));
    }
    get element() { return getElement(this); }
};
TabPage.style = tabPageCss;

export { Tab as gx_tab, TabCaption as gx_tab_caption, TabPage as gx_tab_page };
