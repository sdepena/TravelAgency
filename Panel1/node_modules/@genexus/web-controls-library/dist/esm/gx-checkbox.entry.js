import { h, r as registerInstance, c as createEvent, H as Host, g as getElement } from './index-10623738.js';

let autoCheckBoxId = 0;
class CheckBoxRender {
    constructor(component, handlers) {
        this.component = component;
        this.handleChange = handlers.handleChange;
    }
    getNativeInputId() {
        return this.getNativeInput().id;
    }
    getNativeInput() {
        return this.component.element.querySelector("[data-native-element]");
    }
    getCssClasses() {
        const checkbox = this.component;
        const classList = [];
        classList.push("custom-control-input");
        if (checkbox.cssClass) {
            classList.push(checkbox.cssClass);
        }
        if (!checkbox.caption) {
            classList.push("position-static");
        }
        return classList.join(" ");
    }
    getValueFromEvent(event) {
        return event.target && event.target.checked;
    }
    /**
     * Update the native input element when the value changes
     */
    checkedChanged() {
        const inputEl = this.getNativeInput();
        if (inputEl && inputEl.checked !== this.component.checked) {
            inputEl.checked = this.component.checked;
        }
    }
    render() {
        const checkbox = this.component;
        if (!this.inputId) {
            this.inputId = checkbox.element.id
                ? `${checkbox.element.id}__checkbox`
                : `gx-checkbox-auto-id-${autoCheckBoxId++}`;
        }
        const attris = {
            "aria-disabled": checkbox.disabled ? "true" : undefined,
            class: this.getCssClasses(),
            "data-native-element": "",
            disabled: checkbox.disabled,
            id: this.inputId,
            onInput: this.handleChange
        };
        const forAttris = {
            for: attris.id
        };
        return [
            h("gx-bootstrap", null),
            h("div", { class: "custom-control custom-checkbox" },
                h("input", Object.assign({}, attris, { type: "checkbox", checked: checkbox.checked, value: checkbox.checked ? checkbox.checkedValue : checkbox.unCheckedValue })),
                h("label", Object.assign({ class: "custom-control-label" }, forAttris, { "aria-hidden": (!checkbox.caption).toString() }), checkbox.caption))
        ];
    }
}

const checkboxCss = ".gx-line-clamp{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--max-lines);overflow:hidden;max-height:var(--max-height)}.line-measuring{visibility:hidden;position:absolute}gx-checkbox{display:-ms-flexbox;display:flex}gx-checkbox[hidden]{display:none !important}gx-checkbox[hidden][invisible-mode=keep-space]{display:-ms-flexbox !important;display:flex !important;visibility:hidden}";

const CheckBox = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.input = createEvent(this, "input", 7);
        /**
         * This attribute lets you specify how this element will behave when hidden.
         *
         * | Value        | Details                                                                     |
         * | ------------ | --------------------------------------------------------------------------- |
         * | `keep-space` | The element remains in the document flow, and it does occupy space.         |
         * | `collapse`   | The element is removed form the document flow, and it doesn't occupy space. |
         */
        this.invisibleMode = "collapse";
        /**
         * This attribute lets you specify if the element is disabled.
         * If disabled, it will not fire any user interaction related event
         * (for example, click event).
         */
        this.disabled = false;
        this.renderer = new CheckBoxRender(this, {
            handleChange: this.handleChange.bind(this)
        });
    }
    /**
     * Returns the id of the inner `input` element (if set).
     */
    async getNativeInputId() {
        return this.renderer.getNativeInputId();
    }
    checkedChanged() {
        this.renderer.checkedChanged();
    }
    componentWillLoad() {
        this.checked = this.value === this.checkedValue;
    }
    valueChanged() {
        this.checked = this.value === this.checkedValue;
    }
    handleChange(event) {
        event.stopPropagation();
        this.checked = this.renderer.getValueFromEvent(event);
        this.updateValue();
        this.input.emit(event);
    }
    updateValue() {
        this.value = this.checked ? this.checkedValue : this.unCheckedValue;
    }
    render() {
        return h(Host, null, this.renderer.render());
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "checked": ["checkedChanged"],
        "value": ["valueChanged"]
    }; }
};
CheckBox.style = checkboxCss;

export { CheckBox as gx_checkbox };
